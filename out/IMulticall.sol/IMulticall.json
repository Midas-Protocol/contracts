{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "ast": {
    "absolutePath": "/Users/carlomazzaferro/projects/eth/contracts/contracts/utils/IMulticall.sol",
    "id": 66010,
    "exportedSymbols": {
      "IMulticall": [
        66009
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:630:233",
    "nodes": [
      {
        "id": 65997,
        "nodeType": "PragmaDirective",
        "src": "45:24:233",
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 66009,
        "nodeType": "ContractDefinition",
        "src": "180:494:233",
        "nodes": [
          {
            "id": 66008,
            "nodeType": "FunctionDefinition",
            "src": "580:92:233",
            "documentation": {
              "id": 65999,
              "nodeType": "StructuredDocumentation",
              "src": "205:372:233",
              "text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
            },
            "functionSelector": "ac9650d8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "multicall",
            "nameLocation": "589:9:233",
            "parameters": {
              "id": 66003,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 66002,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "616:4:233",
                  "nodeType": "VariableDeclaration",
                  "scope": 66008,
                  "src": "599:21:233",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 66000,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "599:5:233",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 66001,
                    "nodeType": "ArrayTypeName",
                    "src": "599:7:233",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "598:23:233"
            },
            "returnParameters": {
              "id": 66007,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 66006,
                  "mutability": "mutable",
                  "name": "results",
                  "nameLocation": "663:7:233",
                  "nodeType": "VariableDeclaration",
                  "scope": 66008,
                  "src": "648:22:233",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 66004,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "648:5:233",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 66005,
                    "nodeType": "ArrayTypeName",
                    "src": "648:7:233",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "647:24:233"
            },
            "scope": 66009,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IMulticall",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 65998,
          "nodeType": "StructuredDocumentation",
          "src": "71:109:233",
          "text": "@title Multicall interface\n @notice Enables calling multiple methods in a single call to the contract"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          66009
        ],
        "name": "IMulticall",
        "nameLocation": "190:10:233",
        "scope": 66010,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  }
}