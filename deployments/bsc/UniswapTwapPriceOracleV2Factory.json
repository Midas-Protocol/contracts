{
  "address": "0x98EC86b8d2CbAf5329A032b4F655CF0ff6cc029a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rootOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wtoken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "uniswapV2Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "logic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "contract UniswapTwapPriceOracleV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wtoken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc1f445ddd2e34ede6a67a80cfa411ecad414eedca80168f1fa886b6171fc37b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 74,
    "gasUsed": "291380",
    "logsBloom": "0x
    "blockHash": "0x66cfd8271eafe8fc14a6ac762393b40ef903a41c01700c732f2c8e90e3363599",
    "transactionHash": "0xbc1f445ddd2e34ede6a67a80cfa411ecad414eedca80168f1fa886b6171fc37b",
    "logs": [],
    "blockNumber": 15990230,
    "cumulativeGasUsed": "15773683",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7263C40E0CD50a5a10549F5B7BF010D89F94c3c7",
    "0x908d32bf1434B5dA08B30ca0B90720f279d30Bb6",
    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
  ],
  "numDeployments": 1,
  "solcInputHash": "72ce46e3f138d2ab7e097ba1f38b4521",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rootOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wtoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"contract UniswapTwapPriceOracleV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor that sets the `UniswapTwapPriceOracleV2Root` and `UniswapTwapPriceOracleV2` implementation contract.\"},\"deploy(address,address)\":{\"params\":{\"baseToken\":\"The base token of the pairs for which this oracle will be used.\",\"uniswapV2Factory\":\"The `UniswapV2Factory` contract of the pairs for which this oracle will be used.\"}}},\"stateVariables\":{\"logic\":{\"details\":\"Implementation address for the `UniswapV3TwapPriceOracleV2`.\"},\"rootOracle\":{\"details\":\"`UniswapTwapPriceOracleV2Root` contract address.\"},\"wtoken\":{\"details\":\"WETH token contract address.\"}},\"title\":\"UniswapTwapPriceOracleV2Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address,address)\":{\"notice\":\"Deploys a `UniswapTwapPriceOracleV2`.\"},\"oracles(address,address)\":{\"notice\":\"Maps `UniswapV2Factory` contracts to base tokens to `UniswapTwapPriceOracleV2` contract addresses.\"}},\"notice\":\"Deploys and catalogs UniswapTwapPriceOracleV2 contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/default/UniswapTwapPriceOracleV2Factory.sol\":\"UniswapTwapPriceOracleV2Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x45fe5b6e09537c84248325b6cb3595aed7752b07425dfe136351234f2d8130dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/external/compound/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICErc20 is ICToken {\\n  function underlying() external view returns (address);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICToken cTokenCollateral\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4174a86be37f5d7b0e1f02af3f81dfbc22ae8e7598cf9203169133372f2cde7\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface ICToken {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function fuseAdminHasRights() external view returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function comptroller() external view returns (address);\\n\\n  function adminFeeMantissa() external view returns (uint256);\\n\\n  function fuseFeeMantissa() external view returns (uint256);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalAdminFees() external view returns (uint256);\\n\\n  function totalFuseFees() external view returns (uint256);\\n\\n  function isCToken() external view returns (bool);\\n\\n  function isCEther() external view returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function totalBorrowsCurrent() external returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view returns (uint256);\\n\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf3d448eb93652645ae9fd32453be4651f664d00d218f1d0e4fe181a2a39a27f\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x501ba6588dc3bbcbcd7629eb294b2249dce97cb78e1c78feb1815d220b488368\",\"license\":\"BSD-3-Clause\"},\"contracts/external/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xcad1373d47c15a77f0fe29698181bb643d4eb4cc870fdeb40b7e081ebffb598a\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xc30635313c081ea723c128678f4d45c48aac88080d91578e8c4374774d26cba2\",\"license\":\"GPL-3.0-only\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../external/compound/IPriceOracle.sol\\\";\\n\\n/**\\n * @title BasePriceOracle\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\n * @dev Implements the `PriceOracle` interface.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface BasePriceOracle is IPriceOracle {\\n  /**\\n   * @notice Get the price of an underlying asset.\\n   * @param underlying The underlying asset to get the price of.\\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n   * Zero means the price is unavailable.\\n   */\\n  function price(address underlying) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfdb8a3439685177d0150249ec4984ab05fc8a9e4c9172dc714fbb456d0810d47\",\"license\":\"UNLICENSED\"},\"contracts/oracles/default/UniswapTwapPriceOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"../../external/compound/IPriceOracle.sol\\\";\\nimport \\\"../../external/compound/ICToken.sol\\\";\\nimport \\\"../../external/compound/ICErc20.sol\\\";\\n\\nimport \\\"../BasePriceOracle.sol\\\";\\nimport \\\"./UniswapTwapPriceOracleV2Root.sol\\\";\\n\\n/**\\n * @title UniswapTwapPriceOracleV2\\n * @notice Stores cumulative prices and returns TWAPs for assets on Uniswap V2 pairs.\\n * @dev Implements `PriceOracle` and `BasePriceOracle`.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract UniswapTwapPriceOracleV2 is Initializable, IPriceOracle, BasePriceOracle {\\n  /**\\n   * @dev wtoken token contract address.\\n   */\\n  address public wtoken;\\n\\n  /**\\n   * @dev UniswapTwapPriceOracleV2Root contract address.\\n   */\\n  UniswapTwapPriceOracleV2Root public rootOracle;\\n\\n  /**\\n   * @dev UniswapV2Factory contract address.\\n   */\\n  address public uniswapV2Factory;\\n\\n  /**\\n   * @dev The token on which to base TWAPs (its price must be available via `msg.sender`).\\n   */\\n  address public baseToken;\\n\\n  /**\\n   * @dev Constructor that sets the UniswapTwapPriceOracleV2Root, UniswapV2Factory, and base token.\\n   */\\n  function initialize(\\n    address _rootOracle,\\n    address _uniswapV2Factory,\\n    address _baseToken,\\n    address _wtoken\\n  ) external initializer {\\n    require(_rootOracle != address(0), \\\"UniswapTwapPriceOracleV2Root not defined.\\\");\\n    require(_uniswapV2Factory != address(0), \\\"UniswapV2Factory not defined.\\\");\\n    rootOracle = UniswapTwapPriceOracleV2Root(_rootOracle);\\n    uniswapV2Factory = _uniswapV2Factory;\\n    wtoken = _wtoken;\\n    baseToken = _baseToken == address(0) ? address(wtoken) : _baseToken;\\n  }\\n\\n  /**\\n   * @notice Returns the price in ETH of the token underlying `cToken`.\\n   * @dev Implements the `PriceOracle` interface for Fuse pools (and Compound v2).\\n   * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\\n   */\\n  function getUnderlyingPrice(ICToken cToken) external view override returns (uint256) {\\n    // Return 1e18 for ETH\\n    if (cToken.isCEther()) return 1e18;\\n\\n    // Get underlying ERC20 token address\\n    address underlying = ICErc20(address(cToken)).underlying();\\n\\n    // Get price, format, and return\\n    uint256 baseUnit = 10**uint256(ERC20Upgradeable(underlying).decimals());\\n    return (_price(underlying) * 1e18) / baseUnit;\\n  }\\n\\n  /**\\n   * @dev Internal function returning the price in ETH of `underlying`.\\n   */\\n  function _price(address underlying) internal view returns (uint256) {\\n    // Return 1e18 for wtoken\\n    if (underlying == wtoken) return 1e18;\\n\\n    // Return root oracle ERC20/ETH TWAP\\n    uint256 twap = rootOracle.price(underlying, baseToken, uniswapV2Factory);\\n    return\\n      baseToken == address(wtoken)\\n        ? twap\\n        : (twap * BasePriceOracle(msg.sender).price(baseToken)) / (10**uint256(ERC20Upgradeable(baseToken).decimals()));\\n  }\\n\\n  /**\\n   * @dev Returns the price in ETH of `underlying` (implements `BasePriceOracle`).\\n   */\\n  function price(address underlying) external view override returns (uint256) {\\n    return _price(underlying);\\n  }\\n}\\n\",\"keccak256\":\"0x41978bd569bfac0314881d7adea8ae08dcb2432336f93e596c03892b5f7ea0d8\",\"license\":\"UNLICENSED\"},\"contracts/oracles/default/UniswapTwapPriceOracleV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\n\\nimport \\\"./UniswapTwapPriceOracleV2.sol\\\";\\n\\n/**\\n * @title UniswapTwapPriceOracleV2Factory\\n * @notice Deploys and catalogs UniswapTwapPriceOracleV2 contracts.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract UniswapTwapPriceOracleV2Factory {\\n  /**\\n   * @dev WETH token contract address.\\n   */\\n  address public immutable wtoken;\\n\\n  /**\\n   * @dev `UniswapTwapPriceOracleV2Root` contract address.\\n   */\\n  address public immutable rootOracle;\\n\\n  /**\\n   * @dev Implementation address for the `UniswapV3TwapPriceOracleV2`.\\n   */\\n  address public immutable logic;\\n\\n  /**\\n   * @notice Maps `UniswapV2Factory` contracts to base tokens to `UniswapTwapPriceOracleV2` contract addresses.\\n   */\\n  mapping(address => mapping(address => UniswapTwapPriceOracleV2)) public oracles;\\n\\n  /**\\n   * @dev Constructor that sets the `UniswapTwapPriceOracleV2Root` and `UniswapTwapPriceOracleV2` implementation contract.\\n   */\\n  constructor(\\n    address _rootOracle,\\n    address _logic,\\n    address _wtoken\\n  ) {\\n    require(_rootOracle != address(0), \\\"UniswapTwapPriceOracleV2Root not defined.\\\");\\n    require(_logic != address(0), \\\"UniswapTwapPriceOracleV2 implementation/logic contract not defined.\\\");\\n    rootOracle = _rootOracle;\\n    logic = _logic;\\n    wtoken = _wtoken;\\n  }\\n\\n  /**\\n   * @notice Deploys a `UniswapTwapPriceOracleV2`.\\n   * @param uniswapV2Factory The `UniswapV2Factory` contract of the pairs for which this oracle will be used.\\n   * @param baseToken The base token of the pairs for which this oracle will be used.\\n   */\\n  function deploy(address uniswapV2Factory, address baseToken) external returns (address) {\\n    // Input validation\\n    if (baseToken == address(0)) baseToken = address(wtoken);\\n\\n    // Return existing oracle if present\\n    address currentOracle = address(oracles[uniswapV2Factory][baseToken]);\\n    if (currentOracle != address(0)) return currentOracle;\\n\\n    // Deploy oracle\\n    bytes32 salt = keccak256(abi.encodePacked(uniswapV2Factory, baseToken));\\n    address oracle = ClonesUpgradeable.cloneDeterministic(logic, salt);\\n    UniswapTwapPriceOracleV2(oracle).initialize(rootOracle, uniswapV2Factory, baseToken, wtoken);\\n\\n    // Set oracle in state\\n    oracles[uniswapV2Factory][baseToken] = UniswapTwapPriceOracleV2(oracle);\\n\\n    // Return oracle address\\n    return oracle;\\n  }\\n}\\n\",\"keccak256\":\"0x22ad16e7aea4c7ea276ef8c3875034dd744470cc5f4557e7506b2abf031a9c98\",\"license\":\"UNLICENSED\"},\"contracts/oracles/default/UniswapTwapPriceOracleV2Root.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"../../external/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../../external/uniswap/IUniswapV2Factory.sol\\\";\\n\\n/**\\n * @title UniswapTwapPriceOracleV2Root\\n * @notice Stores cumulative prices and returns TWAPs for assets on Uniswap V2 pairs.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract UniswapTwapPriceOracleV2Root {\\n  /**\\n   * @dev wtoken token contract address.\\n   */\\n  address public immutable wtoken;\\n\\n  /**\\n   * @dev Minimum TWAP interval.\\n   */\\n  uint256 public constant MIN_TWAP_TIME = 15 minutes;\\n\\n  /**\\n   * @dev Constructor to set wtoken address\\n   */\\n  constructor(address _wtoken) {\\n    wtoken = _wtoken;\\n  }\\n\\n  /**\\n   * @dev Return the TWAP value price0. Revert if TWAP time range is not within the threshold.\\n   * Copied from: https://github.com/AlphaFinanceLab/homora-v2/blob/master/contracts/oracle/BaseKP3ROracle.sol\\n   * @param pair The pair to query for price0.\\n   */\\n  function price0TWAP(address pair) internal view returns (uint256) {\\n    uint256 length = observationCount[pair];\\n    require(length > 0, \\\"No length-1 TWAP observation.\\\");\\n    Observation memory lastObservation = observations[pair][(length - 1) % OBSERVATION_BUFFER];\\n    if (lastObservation.timestamp > block.timestamp - MIN_TWAP_TIME) {\\n      require(length > 1, \\\"No length-2 TWAP observation.\\\");\\n      lastObservation = observations[pair][(length - 2) % OBSERVATION_BUFFER];\\n    }\\n    uint256 elapsedTime = block.timestamp - lastObservation.timestamp;\\n    require(elapsedTime >= MIN_TWAP_TIME, \\\"Bad TWAP time.\\\");\\n    uint256 currPx0Cumu = currentPx0Cumu(pair);\\n    return (currPx0Cumu - lastObservation.price0Cumulative) / (block.timestamp - lastObservation.timestamp); // overflow is desired\\n  }\\n\\n  /**\\n   * @dev Return the TWAP value price1. Revert if TWAP time range is not within the threshold.\\n   * Copied from: https://github.com/AlphaFinanceLab/homora-v2/blob/master/contracts/oracle/BaseKP3ROracle.sol\\n   * @param pair The pair to query for price1.\\n   */\\n  function price1TWAP(address pair) internal view returns (uint256) {\\n    uint256 length = observationCount[pair];\\n    require(length > 0, \\\"No length-1 TWAP observation.\\\");\\n    Observation memory lastObservation = observations[pair][(length - 1) % OBSERVATION_BUFFER];\\n    if (lastObservation.timestamp > block.timestamp - MIN_TWAP_TIME) {\\n      require(length > 1, \\\"No length-2 TWAP observation.\\\");\\n      lastObservation = observations[pair][(length - 2) % OBSERVATION_BUFFER];\\n    }\\n    uint256 elapsedTime = block.timestamp - lastObservation.timestamp;\\n    require(elapsedTime >= MIN_TWAP_TIME, \\\"Bad TWAP time.\\\");\\n    uint256 currPx1Cumu = currentPx1Cumu(pair);\\n    return (currPx1Cumu - lastObservation.price1Cumulative) / (block.timestamp - lastObservation.timestamp); // overflow is desired\\n  }\\n\\n  /**\\n   * @dev Return the current price0 cumulative value on Uniswap.\\n   * Copied from: https://github.com/AlphaFinanceLab/homora-v2/blob/master/contracts/oracle/BaseKP3ROracle.sol\\n   * @param pair The uniswap pair to query for price0 cumulative value.\\n   */\\n  function currentPx0Cumu(address pair) internal view returns (uint256 px0Cumu) {\\n    uint32 currTime = uint32(block.timestamp);\\n    px0Cumu = IUniswapV2Pair(pair).price0CumulativeLast();\\n    (uint256 reserve0, uint256 reserve1, uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n    if (lastTime != block.timestamp) {\\n      uint32 timeElapsed = currTime - lastTime; // overflow is desired\\n      px0Cumu += uint256((reserve1 << 112) / reserve0) * timeElapsed; // overflow is desired\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the current price1 cumulative value on Uniswap.\\n   * Copied from: https://github.com/AlphaFinanceLab/homora-v2/blob/master/contracts/oracle/BaseKP3ROracle.sol\\n   * @param pair The uniswap pair to query for price1 cumulative value.\\n   */\\n  function currentPx1Cumu(address pair) internal view returns (uint256 px1Cumu) {\\n    uint32 currTime = uint32(block.timestamp);\\n    px1Cumu = IUniswapV2Pair(pair).price1CumulativeLast();\\n    (uint256 reserve0, uint256 reserve1, uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n    if (lastTime != currTime) {\\n      uint32 timeElapsed = currTime - lastTime; // overflow is desired\\n      px1Cumu += uint256((reserve0 << 112) / reserve1) * timeElapsed; // overflow is desired\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the price of `underlying` in terms of `baseToken` given `factory`.\\n   */\\n  function price(\\n    address underlying,\\n    address baseToken,\\n    address factory\\n  ) external view returns (uint256) {\\n    // Return ERC20/ETH TWAP\\n    address pair = IUniswapV2Factory(factory).getPair(underlying, baseToken);\\n    uint256 baseUnit = 10**uint256(ERC20Upgradeable(underlying).decimals());\\n    return (((underlying < baseToken ? price0TWAP(pair) : price1TWAP(pair)) / (2**56)) * baseUnit) / (2**56); // Scaled by 1e18, not 2 ** 112\\n  }\\n\\n  /**\\n   * @dev Struct for cumulative price observations.\\n   */\\n  struct Observation {\\n    uint32 timestamp;\\n    uint256 price0Cumulative;\\n    uint256 price1Cumulative;\\n  }\\n\\n  /**\\n   * @dev Length after which observations roll over to index 0.\\n   */\\n  uint8 public constant OBSERVATION_BUFFER = 4;\\n\\n  /**\\n   * @dev Total observation count for each pair.\\n   */\\n  mapping(address => uint256) public observationCount;\\n\\n  /**\\n   * @dev Array of cumulative price observations for each pair.\\n   */\\n  mapping(address => Observation[OBSERVATION_BUFFER]) public observations;\\n\\n  /// @notice Get pairs for token combinations.\\n  function pairsFor(\\n    address[] calldata tokenA,\\n    address[] calldata tokenB,\\n    address factory\\n  ) external view returns (address[] memory) {\\n    require(\\n      tokenA.length > 0 && tokenA.length == tokenB.length,\\n      \\\"Token array lengths must be equal and greater than 0.\\\"\\n    );\\n    address[] memory pairs = new address[](tokenA.length);\\n    for (uint256 i = 0; i < tokenA.length; i++) pairs[i] = IUniswapV2Factory(factory).getPair(tokenA[i], tokenB[i]);\\n    return pairs;\\n  }\\n\\n  /// @notice Check which of multiple pairs are workable/updatable.\\n  function workable(\\n    address[] calldata pairs,\\n    address[] calldata baseTokens,\\n    uint256[] calldata minPeriods,\\n    uint256[] calldata deviationThresholds\\n  ) external view returns (bool[] memory) {\\n    require(\\n      pairs.length > 0 &&\\n        pairs.length == baseTokens.length &&\\n        pairs.length == minPeriods.length &&\\n        pairs.length == deviationThresholds.length,\\n      \\\"Array lengths must be equal and greater than 0.\\\"\\n    );\\n    bool[] memory answers = new bool[](pairs.length);\\n    for (uint256 i = 0; i < pairs.length; i++)\\n      answers[i] = _workable(pairs[i], baseTokens[i], minPeriods[i], deviationThresholds[i]);\\n    return answers;\\n  }\\n\\n  /// @dev Internal function to check if a pair is workable (updateable AND reserves have changed AND deviation threshold is satisfied).\\n  function _workable(\\n    address pair,\\n    address baseToken,\\n    uint256 minPeriod,\\n    uint256 deviationThreshold\\n  ) internal view returns (bool) {\\n    // Workable if:\\n    // 1) We have no observations\\n    // 2) The elapsed time since the last observation is > minPeriod AND reserves have changed AND deviation threshold is satisfied\\n    // Note that we loop observationCount[pair] around OBSERVATION_BUFFER so we don't waste gas on new storage slots\\n    if (observationCount[pair] <= 0) return true;\\n    (, , uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n    return\\n      (block.timestamp - observations[pair][(observationCount[pair] - 1) % OBSERVATION_BUFFER].timestamp) >\\n      (minPeriod >= MIN_TWAP_TIME ? minPeriod : MIN_TWAP_TIME) &&\\n      lastTime != observations[pair][(observationCount[pair] - 1) % OBSERVATION_BUFFER].timestamp &&\\n      _deviation(pair, baseToken) >= deviationThreshold;\\n  }\\n\\n  /// @dev Internal function to check if a pair's spot price's deviation from its TWAP price as a ratio scaled by 1e18\\n  function _deviation(address pair, address baseToken) internal view returns (uint256) {\\n    // Get token base unit\\n    address token0 = IUniswapV2Pair(pair).token0();\\n    bool useToken0Price = token0 != baseToken;\\n    address underlying = useToken0Price ? token0 : IUniswapV2Pair(pair).token1();\\n    uint256 baseUnit = 10**uint256(ERC20Upgradeable(underlying).decimals());\\n\\n    // Get TWAP price\\n    uint256 twapPrice = (((useToken0Price ? price0TWAP(pair) : price1TWAP(pair)) / (2**56)) * baseUnit) / (2**56); // Scaled by 1e18, not 2 ** 112\\n\\n    // Get spot price\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves();\\n    uint256 spotPrice = useToken0Price ? (reserve1 * baseUnit) / reserve0 : (reserve0 * baseUnit) / reserve1;\\n\\n    // Get ratio and return deviation\\n    uint256 ratio = (spotPrice * 1e18) / twapPrice;\\n    return ratio >= 1e18 ? ratio - 1e18 : 1e18 - ratio;\\n  }\\n\\n  /// @dev Internal function to check if a pair is updatable at all.\\n  function _updateable(address pair) internal view returns (bool) {\\n    // Updateable if:\\n    // 1) We have no observations\\n    // 2) The elapsed time since the last observation is > MIN_TWAP_TIME\\n    // Note that we loop observationCount[pair] around OBSERVATION_BUFFER so we don't waste gas on new storage slots\\n    return\\n      observationCount[pair] <= 0 ||\\n      (block.timestamp - observations[pair][(observationCount[pair] - 1) % OBSERVATION_BUFFER].timestamp) >\\n      MIN_TWAP_TIME;\\n  }\\n\\n  /// @notice Update one pair.\\n  function update(address pair) external {\\n    require(_update(pair), \\\"Failed to update pair.\\\");\\n  }\\n\\n  /// @notice Update multiple pairs at once.\\n  function update(address[] calldata pairs) external {\\n    bool worked = false;\\n    for (uint256 i = 0; i < pairs.length; i++) if (_update(pairs[i])) worked = true;\\n    require(worked, \\\"No pairs can be updated (yet).\\\");\\n  }\\n\\n  /// @dev Internal function to update a single pair.\\n  function _update(address pair) internal returns (bool) {\\n    // Check if workable\\n    if (!_updateable(pair)) return false;\\n\\n    // Get cumulative price(s)\\n    uint256 price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n    uint256 price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n    // Loop observationCount[pair] around OBSERVATION_BUFFER so we don't waste gas on new storage slots\\n    (, , uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n    observations[pair][observationCount[pair] % OBSERVATION_BUFFER] = Observation(\\n      lastTime,\\n      price0Cumulative,\\n      price1Cumulative\\n    );\\n    observationCount[pair]++;\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xb17d39a80df9d5f2c74886613e712b012f0c07806bac0baba84abda974c2391a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161061538038061061583398101604081905261002f9161015d565b6001600160a01b03831661009c5760405162461bcd60e51b815260206004820152602960248201527f556e69737761705477617050726963654f7261636c655632526f6f74206e6f74604482015268103232b334b732b21760b91b60648201526084015b60405180910390fd5b6001600160a01b0382166101245760405162461bcd60e51b815260206004820152604360248201527f556e69737761705477617050726963654f7261636c65563220696d706c656d6560448201527f6e746174696f6e2f6c6f67696320636f6e7472616374206e6f7420646566696e60648201526232b21760e91b608482015260a401610093565b6001600160a01b0392831660a05290821660c052166080526101a0565b80516001600160a01b038116811461015857600080fd5b919050565b60008060006060848603121561017257600080fd5b61017b84610141565b925061018960208501610141565b915061019760408501610141565b90509250925092565b60805160a05160c05161042c6101e96000396000818160e801526101e301526000818161010f015261021f01526000818160c1015281816101430152610257015261042c6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806352a03c031461005c578063545e7c61146100a95780639c0591c8146100bc578063d7dfa0dd146100e3578063e3cb23a51461010a575b600080fd5b61008d61006a3660046103c3565b60006020818152928152604080822090935290815220546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61008d6100b73660046103c3565b610131565b61008d7f000000000000000000000000000000000000000000000000000000000000000081565b61008d7f000000000000000000000000000000000000000000000000000000000000000081565b61008d7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160a01b038216610165577f000000000000000000000000000000000000000000000000000000000000000091505b6001600160a01b0380841660009081526020818152604080832086851684529091529020541680156101985790506102fd565b6040516bffffffffffffffffffffffff19606086811b8216602084015285901b16603482015260009060480160405160208183030381529060405280519060200120905060006102087f000000000000000000000000000000000000000000000000000000000000000083610303565b604051637c643b2f60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152888116602483015287811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301529192509082169063f8c8765e90608401600060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050506001600160a01b038681166000908152602081815260408083208985168452909152902080546001600160a01b031916918316919091179055925050505b92915050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166102fd5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640160405180910390fd5b80356001600160a01b03811681146103be57600080fd5b919050565b600080604083850312156103d657600080fd5b6103df836103a7565b91506103ed602084016103a7565b9050925092905056fea2646970667358221220e94f9eb62c93859a01e3133de193970916c5ad7567f0e3664ab18a93325420b964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806352a03c031461005c578063545e7c61146100a95780639c0591c8146100bc578063d7dfa0dd146100e3578063e3cb23a51461010a575b600080fd5b61008d61006a3660046103c3565b60006020818152928152604080822090935290815220546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61008d6100b73660046103c3565b610131565b61008d7f000000000000000000000000000000000000000000000000000000000000000081565b61008d7f000000000000000000000000000000000000000000000000000000000000000081565b61008d7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160a01b038216610165577f000000000000000000000000000000000000000000000000000000000000000091505b6001600160a01b0380841660009081526020818152604080832086851684529091529020541680156101985790506102fd565b6040516bffffffffffffffffffffffff19606086811b8216602084015285901b16603482015260009060480160405160208183030381529060405280519060200120905060006102087f000000000000000000000000000000000000000000000000000000000000000083610303565b604051637c643b2f60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152888116602483015287811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301529192509082169063f8c8765e90608401600060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050506001600160a01b038681166000908152602081815260408083208985168452909152902080546001600160a01b031916918316919091179055925050505b92915050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166102fd5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640160405180910390fd5b80356001600160a01b03811681146103be57600080fd5b919050565b600080604083850312156103d657600080fd5b6103df836103a7565b91506103ed602084016103a7565b9050925092905056fea2646970667358221220e94f9eb62c93859a01e3133de193970916c5ad7567f0e3664ab18a93325420b964736f6c634300080b0033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor that sets the `UniswapTwapPriceOracleV2Root` and `UniswapTwapPriceOracleV2` implementation contract."
      },
      "deploy(address,address)": {
        "params": {
          "baseToken": "The base token of the pairs for which this oracle will be used.",
          "uniswapV2Factory": "The `UniswapV2Factory` contract of the pairs for which this oracle will be used."
        }
      }
    },
    "stateVariables": {
      "logic": {
        "details": "Implementation address for the `UniswapV3TwapPriceOracleV2`."
      },
      "rootOracle": {
        "details": "`UniswapTwapPriceOracleV2Root` contract address."
      },
      "wtoken": {
        "details": "WETH token contract address."
      }
    },
    "title": "UniswapTwapPriceOracleV2Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(address,address)": {
        "notice": "Deploys a `UniswapTwapPriceOracleV2`."
      },
      "oracles(address,address)": {
        "notice": "Maps `UniswapV2Factory` contracts to base tokens to `UniswapTwapPriceOracleV2` contract addresses."
      }
    },
    "notice": "Deploys and catalogs UniswapTwapPriceOracleV2 contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 43161,
        "contract": "contracts/oracles/default/UniswapTwapPriceOracleV2Factory.sol:UniswapTwapPriceOracleV2Factory",
        "label": "oracles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_contract(UniswapTwapPriceOracleV2)43139))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(UniswapTwapPriceOracleV2)43139": {
        "encoding": "inplace",
        "label": "contract UniswapTwapPriceOracleV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(UniswapTwapPriceOracleV2)43139)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract UniswapTwapPriceOracleV2)",
        "numberOfBytes": "32",
        "value": "t_contract(UniswapTwapPriceOracleV2)43139"
      },
      "t_mapping(t_address,t_mapping(t_address,t_contract(UniswapTwapPriceOracleV2)43139))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => contract UniswapTwapPriceOracleV2))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_contract(UniswapTwapPriceOracleV2)43139)"
      }
    }
  }
}