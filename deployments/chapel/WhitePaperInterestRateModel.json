{
  "address": "0x4b42CDbB68cb0b4138D4D8C96bf1169f0Ac9123E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocksPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseRatePerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplierPerBlock",
          "type": "uint256"
        }
      ],
      "name": "NewInterestParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInterestRateModel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "utilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe141bd0a6827c439c798b36b4435c5d930408ba852de3bc72d34ff42df0a750d",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "396209",
    "logsBloom": "0x00000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000002000000000000000000080000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x45113a6d04321f1b76919243a881bfd027c83b044c86915ca15734493a05b691",
    "transactionHash": "0xe141bd0a6827c439c798b36b4435c5d930408ba852de3bc72d34ff42df0a750d",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 17416670,
        "transactionHash": "0xe141bd0a6827c439c798b36b4435c5d930408ba852de3bc72d34ff42df0a750d",
        "address": "0x4b42CDbB68cb0b4138D4D8C96bf1169f0Ac9123E",
        "topics": [
          "0xf35fa19c15e9ba782633a5df62a98b20217151addc68e3ff2cd623a48d37ec27"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000071672e7f000000000000000000000000000000000000000000000000000000023703e87b",
        "logIndex": 0,
        "blockHash": "0x45113a6d04321f1b76919243a881bfd027c83b044c86915ca15734493a05b691"
      }
    ],
    "blockNumber": 17416670,
    "cumulativeGasUsed": "461058",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10512000,
    "20000000000000000",
    "100000000000000000"
  ],
  "numDeployments": 6,
  "solcInputHash": "614790565b8c7986374ea2a0c06a77bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewInterestParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"baseRatePerYear\":\"The approximate target base APR, as a mantissa (scaled by 1e18)\",\"multiplierPerYear\":\"The rate of increase in interest rate wrt utilization (scaled by 1e18)\"}},\"getBorrowRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The borrow rate percentage per block as a mantissa (scaled by 1e18)\"}},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserveFactorMantissa\":\"The current reserve factor for the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The supply rate percentage per block as a mantissa (scaled by 1e18)\"}},\"utilizationRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market (currently unused)\"},\"returns\":{\"_0\":\"The utilization rate as a mantissa between [0, 1e18]\"}}},\"title\":\"Compound's WhitePaperInterestRateModel Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseRatePerBlock()\":{\"notice\":\"The base interest rate which is the y-intercept when utilization rate is 0\"},\"blocksPerYear()\":{\"notice\":\"The approximate number of blocks per year that is assumed by the interest rate model\"},\"constructor\":{\"notice\":\"Construct an interest rate model\"},\"getBorrowRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the current borrow rate per block, with the error code expected by the market\"},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the current supply rate per block\"},\"isInterestRateModel()\":{\"notice\":\"Indicator that this is an InterestRateModel contract (for inspection)\"},\"multiplierPerBlock()\":{\"notice\":\"The multiplier of utilization rate that gives the slope of the interest rate\"},\"utilizationRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\"}},\"notice\":\"The parameterized model described in section 2.4 of the original Compound Protocol whitepaper\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compound/WhitePaperInterestRateModel.sol\":\"WhitePaperInterestRateModel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x587a54b49d48df2cd91583eac93ddde4e2849f79d0441f179bf835e9dffe24e9\",\"license\":\"UNLICENSED\"},\"contracts/compound/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, errorMessage);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot underflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot underflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, errorMessage);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers.\\n   * Reverts on division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers.\\n   * Reverts with custom message on division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x9a5b4d600de35b6029d66ddbfa6bc79813b06a6e90344a5a606849ec9751b6dc\",\"license\":\"UNLICENSED\"},\"contracts/compound/WhitePaperInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Compound's WhitePaperInterestRateModel Contract\\n * @author Compound\\n * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper\\n */\\ncontract WhitePaperInterestRateModel is InterestRateModel {\\n  using SafeMath for uint256;\\n\\n  event NewInterestParams(uint256 baseRatePerBlock, uint256 multiplierPerBlock);\\n\\n  /**\\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n   */\\n  uint256 public blocksPerYear;\\n\\n  /**\\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n   */\\n  uint256 public multiplierPerBlock;\\n\\n  /**\\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n   */\\n  uint256 public baseRatePerBlock;\\n\\n  /**\\n   * @notice Construct an interest rate model\\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n   */\\n  constructor(\\n    uint256 _blocksPerYear,\\n    uint256 baseRatePerYear,\\n    uint256 multiplierPerYear\\n  ) {\\n    blocksPerYear = _blocksPerYear;\\n    baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\\n    multiplierPerBlock = multiplierPerYear.div(blocksPerYear);\\n\\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock);\\n  }\\n\\n  /**\\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market (currently unused)\\n   * @return The utilization rate as a mantissa between [0, 1e18]\\n   */\\n  function utilizationRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public pure returns (uint256) {\\n    // Utilization rate is 0 when there are no borrows\\n    // if (borrows == 0) {\\n    //   return 0;\\n    // }\\n\\n    // return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market\\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view override returns (uint256) {\\n    uint256 ur = utilizationRate(cash, borrows, reserves);\\n    return ur.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n  }\\n\\n  /**\\n   * @notice Calculates the current supply rate per block\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market\\n   * @param reserveFactorMantissa The current reserve factor for the market\\n   * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view override returns (uint256) {\\n    uint256 oneMinusReserveFactor = uint256(1e18).sub(reserveFactorMantissa);\\n    uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\\n    uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\\n    return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\\n  }\\n}\\n\",\"keccak256\":\"0x35fcfa946ed59abf0837cbf4a6f9e6e314bb4537fa7d9ef2735e60a2f1f69969\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106de3803806106de83398101604081905261002f91610145565b600083905561004982846100b6602090811b6101a717901c565b600281905550610068600054826100b660201b6101a71790919060201c565b60018190556002546040517ff35fa19c15e9ba782633a5df62a98b20217151addc68e3ff2cd623a48d37ec27926100a6928252602082015260400190565b60405180910390a15050506101ea565b60006100fe83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061010560201b60201c565b9392505050565b6000818361012f5760405162461bcd60e51b81526004016101269190610173565b60405180910390fd5b50600061013c84866101c8565b95945050505050565b60008060006060848603121561015a57600080fd5b8351925060208401519150604084015190509250925092565b600060208083528351808285015260005b818110156101a057858101830151858201604001528201610184565b818111156101b2576000604083870101525b50601f01601f1916929092016040019392505050565b6000826101e557634e487b7160e01b600052601260045260246000fd5b500490565b6104e5806101f96000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638726bb891161005b5780638726bb89146100d7578063a385fb96146100e0578063b8168816146100e9578063f14039de146100fc57600080fd5b806315f24053146100825780632191f92a146100a85780636e71e2d8146100c0575b600080fd5b610095610090366004610376565b610105565b6040519081526020015b60405180910390f35b6100b0600181565b604051901515815260200161009f565b6100956100ce366004610376565b60009392505050565b61009560015481565b61009560005481565b6100956100f73660046103a2565b610144565b61009560025481565b60008061013b600254610135670de0b6b3a764000061012f600154866101f290919063ffffffff16565b906101a7565b90610276565b95945050505050565b600080610159670de0b6b3a7640000846102d5565b90506000610168878787610105565b90506000610182670de0b6b3a764000061012f84866101f2565b905061019b670de0b6b3a764000061012f6000846101f2565b98975050505050505050565b60006101e983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610317565b90505b92915050565b600082610201575060006101ec565b600061020d83856103ea565b90508261021a8583610409565b146101e95760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084015b60405180910390fd5b600080610283838561042b565b9050838110156101e95760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161026d565b60006101e983836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610345565b600081836103385760405162461bcd60e51b815260040161026d9190610443565b50600061013b8486610409565b600081848411156103695760405162461bcd60e51b815260040161026d9190610443565b50600061013b8486610498565b60008060006060848603121561038b57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156103b857600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610404576104046103d4565b500290565b60008261042657634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561043e5761043e6103d4565b500190565b600060208083528351808285015260005b8181101561047057858101830151858201604001528201610454565b81811115610482576000604083870101525b50601f01601f1916929092016040019392505050565b6000828210156104aa576104aa6103d4565b50039056fea26469706673582212201453c00ab2ff4201bc6de34c14071807b268d17018c95647f20928f991b6aa4f64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638726bb891161005b5780638726bb89146100d7578063a385fb96146100e0578063b8168816146100e9578063f14039de146100fc57600080fd5b806315f24053146100825780632191f92a146100a85780636e71e2d8146100c0575b600080fd5b610095610090366004610376565b610105565b6040519081526020015b60405180910390f35b6100b0600181565b604051901515815260200161009f565b6100956100ce366004610376565b60009392505050565b61009560015481565b61009560005481565b6100956100f73660046103a2565b610144565b61009560025481565b60008061013b600254610135670de0b6b3a764000061012f600154866101f290919063ffffffff16565b906101a7565b90610276565b95945050505050565b600080610159670de0b6b3a7640000846102d5565b90506000610168878787610105565b90506000610182670de0b6b3a764000061012f84866101f2565b905061019b670de0b6b3a764000061012f6000846101f2565b98975050505050505050565b60006101e983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610317565b90505b92915050565b600082610201575060006101ec565b600061020d83856103ea565b90508261021a8583610409565b146101e95760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084015b60405180910390fd5b600080610283838561042b565b9050838110156101e95760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161026d565b60006101e983836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610345565b600081836103385760405162461bcd60e51b815260040161026d9190610443565b50600061013b8486610409565b600081848411156103695760405162461bcd60e51b815260040161026d9190610443565b50600061013b8486610498565b60008060006060848603121561038b57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156103b857600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610404576104046103d4565b500290565b60008261042657634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561043e5761043e6103d4565b500190565b600060208083528351808285015260005b8181101561047057858101830151858201604001528201610454565b81811115610482576000604083870101525b50601f01601f1916929092016040019392505050565b6000828210156104aa576104aa6103d4565b50039056fea26469706673582212201453c00ab2ff4201bc6de34c14071807b268d17018c95647f20928f991b6aa4f64736f6c634300080b0033",
  "devdoc": {
    "author": "Compound",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "baseRatePerYear": "The approximate target base APR, as a mantissa (scaled by 1e18)",
          "multiplierPerYear": "The rate of increase in interest rate wrt utilization (scaled by 1e18)"
        }
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The borrow rate percentage per block as a mantissa (scaled by 1e18)"
        }
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserveFactorMantissa": "The current reserve factor for the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The supply rate percentage per block as a mantissa (scaled by 1e18)"
        }
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market (currently unused)"
        },
        "returns": {
          "_0": "The utilization rate as a mantissa between [0, 1e18]"
        }
      }
    },
    "title": "Compound's WhitePaperInterestRateModel Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseRatePerBlock()": {
        "notice": "The base interest rate which is the y-intercept when utilization rate is 0"
      },
      "blocksPerYear()": {
        "notice": "The approximate number of blocks per year that is assumed by the interest rate model"
      },
      "constructor": {
        "notice": "Construct an interest rate model"
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "notice": "Calculates the current borrow rate per block, with the error code expected by the market"
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the current supply rate per block"
      },
      "isInterestRateModel()": {
        "notice": "Indicator that this is an InterestRateModel contract (for inspection)"
      },
      "multiplierPerBlock()": {
        "notice": "The multiplier of utilization rate that gives the slope of the interest rate"
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "notice": "Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`"
      }
    },
    "notice": "The parameterized model described in section 2.4 of the original Compound Protocol whitepaper",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31533,
        "contract": "contracts/compound/WhitePaperInterestRateModel.sol:WhitePaperInterestRateModel",
        "label": "blocksPerYear",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 31536,
        "contract": "contracts/compound/WhitePaperInterestRateModel.sol:WhitePaperInterestRateModel",
        "label": "multiplierPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 31539,
        "contract": "contracts/compound/WhitePaperInterestRateModel.sol:WhitePaperInterestRateModel",
        "label": "baseRatePerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}