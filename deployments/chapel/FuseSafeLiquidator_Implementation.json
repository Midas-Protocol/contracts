{
  "address": "0x24C470Ea19414145e96c6684bfaba655F2B702BE",
  "abi": [
    {
      "inputs": [],
      "name": "BTC_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V2_ROUTER_02",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V2_ROUTER_02_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "W_NATIVE",
      "outputs": [
        {
          "internalType": "contract IW_NATIVE",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "W_NATIVE_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wtoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_btcToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_uniswapPairInitHashCode",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "pancakeCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "underlyingCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingCollateralSeized",
          "type": "uint256"
        },
        {
          "internalType": "contract IRedemptionStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "redeemCustomCollateral",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "contract ICEther",
          "name": "cEther",
          "type": "address"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20Collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minOutputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeSeizedTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        }
      ],
      "name": "safeLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20",
          "type": "address"
        },
        {
          "internalType": "contract ICToken",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minOutputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeSeizedTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        }
      ],
      "name": "safeLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract ICEther",
          "name": "cEther",
          "type": "address"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20Collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minProfitAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeProfitTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2RouterForCollateral",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "ethToCoinbase",
          "type": "uint256"
        }
      ],
      "name": "safeLiquidateToEthWithFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20",
          "type": "address"
        },
        {
          "internalType": "contract ICToken",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minProfitAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeProfitTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2RouterForBorrow",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2RouterForCollateral",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "ethToCoinbase",
          "type": "uint256"
        }
      ],
      "name": "safeLiquidateToTokensWithFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV2Call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2f75134818b4e115a20b7c137050510ee0817c7567e4f7855f64089d20ce1cc5",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "4602469",
    "logsBloom": "0x
    "blockHash": "0x836e6420b9e410bda2a37e258eb92e94f67a72e85d5bc3a9d71c8c197f8f15b6",
    "transactionHash": "0x2f75134818b4e115a20b7c137050510ee0817c7567e4f7855f64089d20ce1cc5",
    "logs": [],
    "blockNumber": 17874524,
    "cumulativeGasUsed": "20385507",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "38b763dd50768b107f6ead41ee6b4570",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BTC_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER_02\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER_02_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"W_NATIVE\",\"outputs\":[{\"internalType\":\"contract IW_NATIVE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"W_NATIVE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btcToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_uniswapPairInitHashCode\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"pancakeCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"underlyingCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingCollateralSeized\",\"type\":\"uint256\"},{\"internalType\":\"contract IRedemptionStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"redeemCustomCollateral\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ICEther\",\"name\":\"cEther\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20Collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeSeizedTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"}],\"name\":\"safeLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeSeizedTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"}],\"name\":\"safeLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ICEther\",\"name\":\"cEther\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20Collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minProfitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeProfitTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2RouterForCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"ethToCoinbase\",\"type\":\"uint256\"}],\"name\":\"safeLiquidateToEthWithFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minProfitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeProfitTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2RouterForBorrow\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2RouterForCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"ethToCoinbase\",\"type\":\"uint256\"}],\"name\":\"safeLiquidateToTokensWithFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"details\":\"Do not transfer NATIVE or tokens directly to this address. Only send NATIVE here when using a method, and only approve tokens for transfer to here when using a method. Direct NATIVE transfers will be rejected and direct token transfers will be lost.\",\"kind\":\"dev\",\"methods\":{\"pancakeCall(address,uint256,uint256,bytes)\":{\"details\":\"Callback function for PCS flashloans.\"},\"redeemCustomCollateral(address,uint256,address,bytes)\":{\"details\":\"Redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap). Public visibility because we have to call this function externally if called from a payable FuseSafeLiquidator function (for some reason delegatecall fails when called with msg.value > 0).\"},\"safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20Collateral\":\"The cErc20 collateral contract to be liquidated.\",\"cEther\":\"The borrowed cEther contract to repay.\",\"exchangeSeizedTo\":\"If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\",\"minOutputAmount\":\"The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2Router\":\"The UniswapV2Router to use to convert the seized underlying collateral.\"}},\"safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20\":\"The borrowed cErc20 to repay.\",\"cTokenCollateral\":\"The cToken collateral to be liquidated.\",\"exchangeSeizedTo\":\"If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\",\"minOutputAmount\":\"The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"repayAmount\":\"The amount to repay to liquidate the unhealthy loan.\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2Router\":\"The UniswapV2Router to use to convert the seized underlying collateral.\"}},\"safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20\":\"The borrowed CErc20 contract to repay.\",\"cTokenCollateral\":\"The cToken collateral contract to be liquidated.\",\"exchangeProfitTo\":\"If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\",\"minProfitAmount\":\"The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"repayAmount\":\"The amount to repay to liquidate the unhealthy loan.\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2RouterForBorrow\":\"The UniswapV2Router to use to convert the NATIVE to the underlying borrow (and flashloan the underlying borrow for NATIVE).\",\"uniswapV2RouterForCollateral\":\"The UniswapV2Router to use to convert the underlying collateral to NATIVE.\"}},\"uniswapV2Call(address,uint256,uint256,bytes)\":{\"details\":\"Callback function for Uniswap flashloans.\"}},\"stateVariables\":{\"BTC_TOKEN\":{\"details\":\"Wrapped BTC token to use for flash loans\"},\"PAIR_INIT_HASH_CODE\":{\"details\":\"Wrapped BTC token to use for flash loans\"},\"STABLE_TOKEN\":{\"details\":\"Stable token to use for flash loans\"},\"UNISWAP_V2_ROUTER_02\":{\"details\":\"UniswapV2Router02 contract object.\"},\"UNISWAP_V2_ROUTER_02_ADDRESS\":{\"details\":\"UniswapV2Router02 contract address.\"},\"W_NATIVE\":{\"details\":\"W_NATIVE contract object.\"},\"W_NATIVE_ADDRESS\":{\"details\":\"W_NATIVE contract address.\"},\"_liquidatorProfitExchangeSource\":{\"details\":\"Cached liquidator profit exchange source. ERC20 token address or the zero address for NATIVE. For use in `safeLiquidateToTokensWithFlashLoan`/`safeLiquidateToEthWithFlashLoan` after it is set by `postFlashLoanTokens`/`postFlashLoanWeth`.\"}},\"title\":\"FuseSafeLiquidator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])\":{\"notice\":\"Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\"},\"safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])\":{\"notice\":\"Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\"},\"safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)\":{\"notice\":\"Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in NATIVE profit is seized.\"}},\"notice\":\"FuseSafeLiquidator safely liquidates unhealthy borrowers (with flashloan support).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FuseSafeLiquidator.sol\":\"FuseSafeLiquidator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/FuseSafeLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./liquidators/IRedemptionStrategy.sol\\\";\\n\\nimport \\\"./external/compound/ICToken.sol\\\";\\n\\nimport \\\"./external/compound/ICErc20.sol\\\";\\nimport \\\"./external/compound/ICEther.sol\\\";\\n\\nimport \\\"./utils/IW_NATIVE.sol\\\";\\n\\nimport \\\"./external/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV2Callee.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"./external/uniswap/UniswapV2Library.sol\\\";\\nimport \\\"./external/pcs/PancakeLibrary.sol\\\";\\nimport \\\"./external/compound/IComptroller.sol\\\";\\n\\n/**\\n * @title FuseSafeLiquidator\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice FuseSafeLiquidator safely liquidates unhealthy borrowers (with flashloan support).\\n * @dev Do not transfer NATIVE or tokens directly to this address. Only send NATIVE here when using a method, and only approve tokens for transfer to here when using a method. Direct NATIVE transfers will be rejected and direct token transfers will be lost.\\n */\\ncontract FuseSafeLiquidator is Initializable, IUniswapV2Callee {\\n  using AddressUpgradeable for address payable;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /**\\n   * @dev W_NATIVE contract address.\\n   */\\n  address public W_NATIVE_ADDRESS;\\n\\n  /**\\n   * @dev W_NATIVE contract object.\\n   */\\n  IW_NATIVE public W_NATIVE;\\n\\n  /**\\n   * @dev UniswapV2Router02 contract address.\\n   */\\n  address public UNISWAP_V2_ROUTER_02_ADDRESS;\\n\\n  /**\\n   * @dev Stable token to use for flash loans\\n   */\\n  address public STABLE_TOKEN;\\n\\n  /**\\n   * @dev Wrapped BTC token to use for flash loans\\n   */\\n  address public BTC_TOKEN;\\n\\n  /**\\n   * @dev Wrapped BTC token to use for flash loans\\n   */\\n  bytes PAIR_INIT_HASH_CODE;\\n\\n  /**\\n   * @dev UniswapV2Router02 contract object.\\n   */\\n  IUniswapV2Router02 public UNISWAP_V2_ROUTER_02;\\n\\n  /**\\n   * @dev Cached liquidator profit exchange source.\\n   * ERC20 token address or the zero address for NATIVE.\\n   * For use in `safeLiquidateToTokensWithFlashLoan`/`safeLiquidateToEthWithFlashLoan` after it is set by `postFlashLoanTokens`/`postFlashLoanWeth`.\\n   */\\n  address private _liquidatorProfitExchangeSource;\\n\\n  function initialize(\\n    address _wtoken,\\n    address _uniswapV2router,\\n    address _stableToken,\\n    address _btcToken,\\n    bytes memory _uniswapPairInitHashCode\\n  ) external initializer {\\n    require(_uniswapV2router != address(0), \\\"UniswapV2Factory not defined.\\\");\\n    W_NATIVE_ADDRESS = _wtoken;\\n    UNISWAP_V2_ROUTER_02_ADDRESS = _uniswapV2router;\\n    STABLE_TOKEN = _stableToken;\\n    BTC_TOKEN = _btcToken;\\n    W_NATIVE = IW_NATIVE(W_NATIVE_ADDRESS);\\n    UNISWAP_V2_ROUTER_02 = IUniswapV2Router02(UNISWAP_V2_ROUTER_02_ADDRESS);\\n    PAIR_INIT_HASH_CODE = _uniswapPairInitHashCode;\\n  }\\n\\n  /**\\n   * @dev Internal function to approve unlimited tokens of `erc20Contract` to `to`.\\n   */\\n  function safeApprove(\\n    IERC20Upgradeable token,\\n    address to,\\n    uint256 minAmount\\n  ) private {\\n    uint256 allowance = token.allowance(address(this), to);\\n\\n    if (allowance < minAmount) {\\n      if (allowance > 0) token.safeApprove(to, 0);\\n      token.safeApprove(to, type(uint256).max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to exchange the entire balance of `from` to at least `minOutputAmount` of `to`.\\n   * @param from The input ERC20 token address (or the zero address if NATIVE) to exchange from.\\n   * @param to The output ERC20 token address (or the zero address if NATIVE) to exchange to.\\n   * @param minOutputAmount The minimum output amount of `to` necessary to complete the exchange without reversion.\\n   * @param uniswapV2Router The UniswapV2Router02 to use.\\n   */\\n  function exchangeAllEthOrTokens(\\n    address from,\\n    address to,\\n    uint256 minOutputAmount,\\n    IUniswapV2Router02 uniswapV2Router\\n  ) private {\\n    if (to == from) return;\\n\\n    // From NATIVE, W_NATIVE, or something else?\\n    if (from == address(0)) {\\n      if (to == W_NATIVE_ADDRESS) {\\n        // Deposit all NATIVE to W_NATIVE\\n        W_NATIVE.deposit{ value: address(this).balance }();\\n      } else {\\n        // Exchange from NATIVE to tokens\\n        uniswapV2Router.swapExactETHForTokens{ value: address(this).balance }(\\n          minOutputAmount,\\n          array(W_NATIVE_ADDRESS, to),\\n          address(this),\\n          block.timestamp\\n        );\\n      }\\n    } else if (from == W_NATIVE_ADDRESS && to == address(0)) {\\n      // Withdraw all W_NATIVE to NATIVE\\n      W_NATIVE.withdraw(IERC20Upgradeable(W_NATIVE_ADDRESS).balanceOf(address(this)));\\n    } else {\\n      // Approve input tokens\\n      IERC20Upgradeable fromToken = IERC20Upgradeable(from);\\n      uint256 inputBalance = fromToken.balanceOf(address(this));\\n      safeApprove(fromToken, address(uniswapV2Router), inputBalance);\\n\\n      // Exchange from tokens to NATIVE or tokens\\n      if (to == address(0))\\n        uniswapV2Router.swapExactTokensForETH(\\n          inputBalance,\\n          minOutputAmount,\\n          array(from, W_NATIVE_ADDRESS),\\n          address(this),\\n          block.timestamp\\n        );\\n      else\\n        uniswapV2Router.swapExactTokensForTokens(\\n          inputBalance,\\n          minOutputAmount,\\n          from == W_NATIVE_ADDRESS || to == W_NATIVE_ADDRESS ? array(from, to) : array(from, W_NATIVE_ADDRESS, to),\\n          address(this),\\n          block.timestamp\\n        ); // Put W_NATIVE in the middle of the path if not already a part of the path\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to exchange the entire balance of `from` to at least `minOutputAmount` of `to`.\\n   * @param from The input ERC20 token address (or the zero address if NATIVE) to exchange from.\\n   * @param outputAmount The output amount of NATIVE.\\n   * @param uniswapV2Router The UniswapV2Router02 to use.\\n   */\\n  function exchangeToExactEth(\\n    address from,\\n    uint256 outputAmount,\\n    IUniswapV2Router02 uniswapV2Router\\n  ) private {\\n    if (from == address(0)) return;\\n\\n    // From W_NATIVE something else?\\n    if (from == W_NATIVE_ADDRESS) {\\n      // Withdraw W_NATIVE to NATIVE\\n      W_NATIVE.withdraw(outputAmount);\\n    } else {\\n      // Approve input tokens\\n      IERC20Upgradeable fromToken = IERC20Upgradeable(from);\\n      uint256 inputBalance = fromToken.balanceOf(address(this));\\n      safeApprove(fromToken, address(uniswapV2Router), inputBalance);\\n\\n      // Exchange from tokens to NATIVE\\n      uniswapV2Router.swapTokensForExactETH(\\n        outputAmount,\\n        inputBalance,\\n        array(from, W_NATIVE_ADDRESS),\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\\n   * @param borrower The borrower's Ethereum address.\\n   * @param repayAmount The amount to repay to liquidate the unhealthy loan.\\n   * @param cErc20 The borrowed cErc20 to repay.\\n   * @param cTokenCollateral The cToken collateral to be liquidated.\\n   * @param minOutputAmount The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\\n   * @param exchangeSeizedTo If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\\n   * @param uniswapV2Router The UniswapV2Router to use to convert the seized underlying collateral.\\n   * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n   */\\n  function safeLiquidate(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICToken cTokenCollateral,\\n    uint256 minOutputAmount,\\n    address exchangeSeizedTo,\\n    IUniswapV2Router02 uniswapV2Router,\\n    IRedemptionStrategy[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) external returns (uint256) {\\n    // Transfer tokens in, approve to cErc20, and liquidate borrow\\n    require(repayAmount > 0, \\\"Repay amount (transaction value) must be greater than 0.\\\");\\n    IERC20Upgradeable underlying = IERC20Upgradeable(cErc20.underlying());\\n    underlying.safeTransferFrom(msg.sender, address(this), repayAmount);\\n    safeApprove(underlying, address(cErc20), repayAmount);\\n    require(cErc20.liquidateBorrow(borrower, repayAmount, cTokenCollateral) == 0, \\\"Liquidation failed.\\\");\\n\\n    // Redeem seized cToken collateral if necessary\\n    if (exchangeSeizedTo != address(cTokenCollateral)) {\\n      uint256 seizedCTokenAmount = cTokenCollateral.balanceOf(address(this));\\n\\n      if (seizedCTokenAmount > 0) {\\n        uint256 redeemResult = cTokenCollateral.redeem(seizedCTokenAmount);\\n        require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n        // If cTokenCollateral is CEther\\n        if (cTokenCollateral.isCEther()) {\\n          // Exchange redeemed NATIVE collateral if necessary\\n          exchangeAllEthOrTokens(address(0), exchangeSeizedTo, minOutputAmount, uniswapV2Router);\\n        } else {\\n          // Redeem custom collateral if liquidation strategy is set\\n          IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(ICErc20(address(cTokenCollateral)).underlying());\\n\\n          if (redemptionStrategies.length > 0) {\\n            require(\\n              redemptionStrategies.length == strategyData.length,\\n              \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\"\\n            );\\n            uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n            for (uint256 i = 0; i < redemptionStrategies.length; i++)\\n              (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(\\n                underlyingCollateral,\\n                underlyingCollateralSeized,\\n                redemptionStrategies[i],\\n                strategyData[i]\\n              );\\n          }\\n\\n          // Exchange redeemed token collateral if necessary\\n          exchangeAllEthOrTokens(address(underlyingCollateral), exchangeSeizedTo, minOutputAmount, uniswapV2Router);\\n        }\\n      }\\n    }\\n\\n    // Transfer seized amount to sender\\n    return transferSeizedFunds(exchangeSeizedTo, minOutputAmount);\\n  }\\n\\n  /**\\n   * @notice Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\\n   * @param borrower The borrower's Ethereum address.\\n   * @param cEther The borrowed cEther contract to repay.\\n   * @param cErc20Collateral The cErc20 collateral contract to be liquidated.\\n   * @param minOutputAmount The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\\n   * @param exchangeSeizedTo If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\\n   * @param uniswapV2Router The UniswapV2Router to use to convert the seized underlying collateral.\\n   * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n   */\\n  function safeLiquidate(\\n    address borrower,\\n    ICEther cEther,\\n    ICErc20 cErc20Collateral,\\n    uint256 minOutputAmount,\\n    address exchangeSeizedTo,\\n    IUniswapV2Router02 uniswapV2Router,\\n    IRedemptionStrategy[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) external payable returns (uint256) {\\n    // Liquidate NATIVE borrow\\n    require(msg.value > 0, \\\"Repay amount (transaction value) must be greater than 0.\\\");\\n    cEther.liquidateBorrow{ value: msg.value }(borrower, ICToken(cErc20Collateral));\\n\\n    // Redeem seized cToken collateral if necessary\\n    if (exchangeSeizedTo != address(cErc20Collateral)) {\\n      uint256 seizedCTokenAmount = cErc20Collateral.balanceOf(address(this));\\n\\n      if (seizedCTokenAmount > 0) {\\n        uint256 redeemResult = cErc20Collateral.redeem(seizedCTokenAmount);\\n        require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n        // Redeem custom collateral if liquidation strategy is set\\n        IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(cErc20Collateral.underlying());\\n\\n        if (redemptionStrategies.length > 0) {\\n          require(\\n            redemptionStrategies.length == strategyData.length,\\n            \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\"\\n          );\\n          uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n          for (uint256 i = 0; i < redemptionStrategies.length; i++)\\n            (underlyingCollateral, underlyingCollateralSeized) = this.redeemCustomCollateral(\\n              underlyingCollateral,\\n              underlyingCollateralSeized,\\n              redemptionStrategies[i],\\n              strategyData[i]\\n            ); // redeemCustomCollateral called externally because this safeLiquidate function is payable (for some reason delegatecall fails when called with msg.value > 0)\\n        }\\n\\n        // Exchange redeemed collateral if necessary\\n        exchangeAllEthOrTokens(address(underlyingCollateral), exchangeSeizedTo, minOutputAmount, uniswapV2Router);\\n      }\\n    }\\n\\n    // Transfer seized amount to sender\\n    return transferSeizedFunds(exchangeSeizedTo, minOutputAmount);\\n  }\\n\\n  /**\\n   * @dev Transfers seized funds to the sender.\\n   * @param erc20Contract The address of the token to transfer.\\n   * @param minOutputAmount The minimum amount to transfer.\\n   */\\n  function transferSeizedFunds(address erc20Contract, uint256 minOutputAmount) internal returns (uint256) {\\n    uint256 seizedOutputAmount;\\n\\n    if (erc20Contract == address(0)) {\\n      seizedOutputAmount = address(this).balance;\\n      require(seizedOutputAmount >= minOutputAmount, \\\"Minimum NATIVE output amount not satisfied.\\\");\\n\\n      if (seizedOutputAmount > 0) {\\n        (bool success, ) = msg.sender.call{ value: seizedOutputAmount }(\\\"\\\");\\n        require(success, \\\"Failed to transfer output NATIVE to msg.sender.\\\");\\n      }\\n    } else {\\n      IERC20Upgradeable token = IERC20Upgradeable(erc20Contract);\\n      seizedOutputAmount = token.balanceOf(address(this));\\n      require(seizedOutputAmount >= minOutputAmount, \\\"Minimum token output amount not satified.\\\");\\n      if (seizedOutputAmount > 0) token.safeTransfer(msg.sender, seizedOutputAmount);\\n    }\\n\\n    return seizedOutputAmount;\\n  }\\n\\n  /**\\n   * @notice Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in NATIVE profit is seized.\\n   * @param borrower The borrower's Ethereum address.\\n   * @param repayAmount The amount to repay to liquidate the unhealthy loan.\\n   * @param cErc20 The borrowed CErc20 contract to repay.\\n   * @param cTokenCollateral The cToken collateral contract to be liquidated.\\n   * @param minProfitAmount The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\\n   * @param exchangeProfitTo If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\\n   * @param uniswapV2RouterForBorrow The UniswapV2Router to use to convert the NATIVE to the underlying borrow (and flashloan the underlying borrow for NATIVE).\\n   * @param uniswapV2RouterForCollateral The UniswapV2Router to use to convert the underlying collateral to NATIVE.\\n   * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n   */\\n  function safeLiquidateToTokensWithFlashLoan(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICToken cTokenCollateral,\\n    uint256 minProfitAmount,\\n    address exchangeProfitTo,\\n    IUniswapV2Router02 uniswapV2RouterForBorrow,\\n    IUniswapV2Router02 uniswapV2RouterForCollateral,\\n    IRedemptionStrategy[] memory redemptionStrategies,\\n    bytes[] memory strategyData,\\n    uint256 ethToCoinbase\\n  ) external returns (uint256) {\\n    // Input validation\\n    require(repayAmount > 0, \\\"Repay amount must be greater than 0.\\\");\\n\\n    // Flashloan via Uniswap (scoping `underlyingBorrow` variable to avoid \\\"stack too deep\\\" compiler error)\\n    IUniswapV2Pair pair;\\n    bool token0IsUnderlyingBorrow;\\n    {\\n      address underlyingBorrow = cErc20.underlying();\\n      pair = IUniswapV2Pair(\\n        IUniswapV2Factory(uniswapV2RouterForBorrow.factory()).getPair(underlyingBorrow, W_NATIVE_ADDRESS)\\n      );\\n      token0IsUnderlyingBorrow = pair.token0() == underlyingBorrow;\\n    }\\n    pair.swap(\\n      token0IsUnderlyingBorrow ? repayAmount : 0,\\n      !token0IsUnderlyingBorrow ? repayAmount : 0,\\n      address(this),\\n      msg.data\\n    );\\n\\n    // Exchange profit, send NATIVE to coinbase if necessary, and transfer seized funds\\n    return distributeProfit(exchangeProfitTo, minProfitAmount, ethToCoinbase);\\n  }\\n\\n  function safeLiquidateToEthWithFlashLoan(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICEther cEther,\\n    ICErc20 cErc20Collateral,\\n    uint256 minProfitAmount,\\n    address exchangeProfitTo,\\n    IUniswapV2Router02 uniswapV2RouterForCollateral,\\n    IRedemptionStrategy[] memory redemptionStrategies,\\n    bytes[] memory strategyData,\\n    uint256 ethToCoinbase\\n  ) external returns (uint256) {\\n    // Input validation\\n    require(repayAmount > 0, \\\"Repay amount must be greater than 0.\\\");\\n\\n    // Flashloan via Uniswap\\n    // Use STABLE_TOKEN unless collateral is STABLE_TOKEN, in which case we use WBTC to avoid a reentrancy error\\n    // when exchanging the collateral to repay the borrow\\n\\n    IUniswapV2Pair pair = IUniswapV2Pair(\\n      PancakeLibrary.pairFor(\\n        UNISWAP_V2_ROUTER_02.factory(),\\n        address(uniswapV2RouterForCollateral) == UNISWAP_V2_ROUTER_02_ADDRESS &&\\n          cErc20Collateral.underlying() == STABLE_TOKEN\\n          ? BTC_TOKEN\\n          : STABLE_TOKEN,\\n        W_NATIVE_ADDRESS,\\n        PAIR_INIT_HASH_CODE\\n      )\\n    );\\n\\n    address token0 = pair.token0();\\n\\n    pair.swap(\\n      token0 == W_NATIVE_ADDRESS ? repayAmount : 0,\\n      token0 != W_NATIVE_ADDRESS ? repayAmount : 0,\\n      address(this),\\n      msg.data\\n    );\\n\\n    // Exchange profit, send NATIVE to coinbase if necessary, and transfer seized funds\\n    return distributeProfit(exchangeProfitTo, minProfitAmount, ethToCoinbase);\\n  }\\n\\n  /**\\n   * Exchange profit, send NATIVE to coinbase if necessary, and transfer seized funds to sender.\\n   */\\n  function distributeProfit(\\n    address exchangeProfitTo,\\n    uint256 minProfitAmount,\\n    uint256 ethToCoinbase\\n  ) private returns (uint256) {\\n    if (exchangeProfitTo == address(0)) {\\n      // Exchange profit if necessary\\n      exchangeAllEthOrTokens(\\n        _liquidatorProfitExchangeSource,\\n        exchangeProfitTo,\\n        minProfitAmount + ethToCoinbase,\\n        UNISWAP_V2_ROUTER_02\\n      );\\n\\n      // Transfer NATIVE to block.coinbase if requested\\n      if (ethToCoinbase > 0) block.coinbase.call{ value: ethToCoinbase }(\\\"\\\");\\n\\n      // Transfer profit to msg.sender\\n      return transferSeizedFunds(exchangeProfitTo, minProfitAmount);\\n    } else {\\n      // Transfer NATIVE to block.coinbase if requested\\n      if (ethToCoinbase > 0) {\\n        exchangeToExactEth(_liquidatorProfitExchangeSource, ethToCoinbase, UNISWAP_V2_ROUTER_02);\\n        block.coinbase.call{ value: ethToCoinbase }(\\\"\\\");\\n      }\\n\\n      // Exchange profit if necessary\\n      exchangeAllEthOrTokens(\\n        _liquidatorProfitExchangeSource,\\n        exchangeProfitTo,\\n        minProfitAmount + ethToCoinbase,\\n        UNISWAP_V2_ROUTER_02\\n      );\\n\\n      // Transfer profit to msg.sender\\n      return transferSeizedFunds(exchangeProfitTo, minProfitAmount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Receives NATIVE from liquidations and flashloans.\\n   * Requires that `msg.sender` is W_NATIVE, a CToken, or a Uniswap V2 Router, or another contract.\\n   */\\n  receive() external payable {\\n    require(payable(msg.sender).isContract(), \\\"Sender is not a contract.\\\");\\n  }\\n\\n  /**\\n   * @dev Callback function for Uniswap flashloans.\\n   */\\n  function uniswapV2Call(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) public override {\\n    address cToken = abi.decode(data[68:100], (address));\\n\\n    // Liquidate unhealthy borrow, exchange seized collateral, return flashloaned funds, and exchange profit\\n    if (ICToken(cToken).isCEther()) {\\n      // Decode params\\n      (\\n        address borrower,\\n        uint256 repayAmount,\\n        ,\\n        address cTokenCollateral,\\n        uint256 minProfitAmount,\\n        address exchangeProfitTo,\\n        IUniswapV2Router02 uniswapV2Router,\\n        address[] memory redemptionStrategies,\\n        bytes[] memory strategyData\\n      ) = abi.decode(\\n          data[4:],\\n          (address, uint256, address, address, uint256, address, IUniswapV2Router02, address[], bytes[])\\n        );\\n\\n      // Calculate flashloan return amount\\n      uint256 flashLoanReturnAmount = (repayAmount * 1000) / 997;\\n      if ((repayAmount * 1000) % 997 > 0) flashLoanReturnAmount++; // Round up if division resulted in a remainder\\n\\n      // Post W_NATIVE flashloan\\n      // Cache liquidation profit token (or the zero address for NATIVE) for use as source for exchange later\\n      _liquidatorProfitExchangeSource = postFlashLoanWeth(\\n        borrower,\\n        repayAmount,\\n        ICEther(cToken),\\n        ICErc20(cTokenCollateral),\\n        minProfitAmount,\\n        exchangeProfitTo,\\n        flashLoanReturnAmount,\\n        uniswapV2Router,\\n        redemptionStrategies,\\n        strategyData\\n      );\\n    } else {\\n      // Decode params\\n      (\\n        address borrower,\\n        uint256 repayAmount,\\n        ,\\n        address cTokenCollateral,\\n        uint256 minProfitAmount,\\n        address exchangeProfitTo,\\n        IUniswapV2Router02 uniswapV2RouterForBorrow,\\n        IUniswapV2Router02 uniswapV2RouterForCollateral,\\n        address[] memory redemptionStrategies,\\n        bytes[] memory strategyData\\n      ) = abi.decode(\\n          data[4:],\\n          (\\n            address,\\n            uint256,\\n            address,\\n            address,\\n            uint256,\\n            address,\\n            IUniswapV2Router02,\\n            IUniswapV2Router02,\\n            address[],\\n            bytes[]\\n          )\\n        );\\n\\n      // Calculate flashloan return amount\\n      uint256 flashLoanReturnAmount = (repayAmount * 1000) / 997;\\n      if ((repayAmount * 1000) % 997 > 0) flashLoanReturnAmount++; // Round up if division resulted in a remainder\\n\\n      // Post token flashloan\\n      // Cache liquidation profit token (or the zero address for NATIVE) for use as source for exchange later\\n      _liquidatorProfitExchangeSource = postFlashLoanTokens(\\n        borrower,\\n        repayAmount,\\n        ICErc20(cToken),\\n        ICToken(cTokenCollateral),\\n        minProfitAmount,\\n        exchangeProfitTo,\\n        flashLoanReturnAmount,\\n        uniswapV2RouterForBorrow,\\n        uniswapV2RouterForCollateral,\\n        redemptionStrategies,\\n        strategyData\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Callback function for PCS flashloans.\\n   */\\n  function pancakeCall(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external override {\\n    uniswapV2Call(sender, amount0, amount1, data);\\n  }\\n\\n  /**\\n   * @dev Fetches and sorts the reserves for a pair.\\n   * Original code from PancakeLibrary.\\n   */\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) private view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(tokenA, tokenB))\\n      .getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  /**\\n   * @dev Performs chained getAmountIn calculations on any number of pairs.\\n   * Original code from PancakeLibrary.\\n   */\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) private view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"PancakeLibrary: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n      amounts[i - 1] = PancakeLibrary.getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  /**\\n   * @dev Liquidate unhealthy NATIVE borrow, exchange seized collateral, return flashloaned funds, and exchange profit.\\n   */\\n  function postFlashLoanWeth(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICEther cEther,\\n    ICErc20 cErc20Collateral,\\n    uint256 minProfitAmount,\\n    address exchangeProfitTo,\\n    uint256 flashLoanReturnAmount,\\n    IUniswapV2Router02 uniswapV2Router,\\n    address[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) private returns (address) {\\n    // Unwrap W_NATIVE\\n    W_NATIVE.withdraw(repayAmount);\\n\\n    // Liquidate NATIVE borrow using flashloaned NATIVE\\n    cEther.liquidateBorrow{ value: repayAmount }(borrower, ICToken(cErc20Collateral));\\n\\n    // Redeem seized cTokens for underlying asset\\n    uint256 seizedCTokenAmount = cErc20Collateral.balanceOf(address(this));\\n    require(seizedCTokenAmount > 0, \\\"No cTokens seized.\\\");\\n    uint256 redeemResult = cErc20Collateral.redeem(seizedCTokenAmount);\\n    require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n    // Repay flashloan\\n    return\\n      repayWethFlashLoan(\\n        repayAmount,\\n        cErc20Collateral,\\n        exchangeProfitTo,\\n        flashLoanReturnAmount,\\n        uniswapV2Router,\\n        redemptionStrategies,\\n        strategyData\\n      );\\n  }\\n\\n  /**\\n   * @dev Repays W_NATIVE flashloans.\\n   */\\n  function repayWethFlashLoan(\\n    uint256 repayAmount,\\n    ICErc20 cErc20Collateral,\\n    address exchangeProfitTo,\\n    uint256 flashLoanReturnAmount,\\n    IUniswapV2Router02 uniswapV2Router,\\n    address[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) private returns (address) {\\n    // Check underlying collateral seized\\n    IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(cErc20Collateral.underlying());\\n    uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n\\n    // Redeem custom collateral if liquidation strategy is set\\n    if (redemptionStrategies.length > 0) {\\n      require(\\n        redemptionStrategies.length == strategyData.length,\\n        \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\"\\n      );\\n      for (uint256 i = 0; i < redemptionStrategies.length; i++)\\n        (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(\\n          underlyingCollateral,\\n          underlyingCollateralSeized,\\n          IRedemptionStrategy(redemptionStrategies[i]),\\n          strategyData[i]\\n        );\\n    }\\n\\n    // Check side of the flashloan to repay: if input token (underlying collateral) is part of flashloan, repay it (to avoid reentracy error); otherwise, convert to W_NATIVE and repay W_NATIVE\\n    if (\\n      address(uniswapV2Router) == UNISWAP_V2_ROUTER_02_ADDRESS &&\\n      address(underlyingCollateral) == (cErc20Collateral.underlying() == STABLE_TOKEN ? BTC_TOKEN : STABLE_TOKEN)\\n    ) {\\n      // Get tokens required to repay flashloan and repay flashloan in non-W_NATIVE tokens\\n      uint256 tokensRequired = getAmountsIn(\\n        uniswapV2Router.factory(),\\n        repayAmount,\\n        array(address(underlyingCollateral), W_NATIVE_ADDRESS)\\n      )[0];\\n      require(tokensRequired <= underlyingCollateralSeized, \\\"Flashloan return amount greater than seized collateral.\\\");\\n      require(\\n        underlyingCollateral.transfer(msg.sender, tokensRequired),\\n        \\\"Failed to transfer non-W_NATIVE tokens back to flashlender.\\\"\\n      );\\n    } else {\\n      // If underlying collateral is not already W_NATIVE, convert it to W_NATIVE\\n      if (address(underlyingCollateral) != W_NATIVE_ADDRESS) {\\n        // If underlying collateral is NATIVE, deposit to W_NATIVE; if token, exchange to W_NATIVE\\n        if (address(underlyingCollateral) == address(0)) {\\n          // Deposit NATIVE to W_NATIVE to repay flashloan\\n          W_NATIVE.deposit{ value: flashLoanReturnAmount }();\\n        } else {\\n          // Approve to Uniswap router\\n          safeApprove(underlyingCollateral, address(uniswapV2Router), underlyingCollateralSeized);\\n\\n          // Swap collateral tokens for W_NATIVE via Uniswap router\\n          if (exchangeProfitTo == address(underlyingCollateral))\\n            uniswapV2Router.swapTokensForExactTokens(\\n              flashLoanReturnAmount,\\n              underlyingCollateralSeized,\\n              array(address(underlyingCollateral), W_NATIVE_ADDRESS),\\n              address(this),\\n              block.timestamp\\n            );\\n          else {\\n            uniswapV2Router.swapExactTokensForTokens(\\n              underlyingCollateralSeized,\\n              flashLoanReturnAmount,\\n              array(address(underlyingCollateral), W_NATIVE_ADDRESS),\\n              address(this),\\n              block.timestamp\\n            );\\n            underlyingCollateral = IERC20Upgradeable(W_NATIVE_ADDRESS);\\n          }\\n        }\\n      }\\n\\n      // Repay flashloan in W_NATIVE\\n      require(\\n        flashLoanReturnAmount <= IERC20Upgradeable(W_NATIVE_ADDRESS).balanceOf(address(this)),\\n        \\\"Flashloan return amount greater than W_NATIVE exchanged from seized collateral.\\\"\\n      );\\n      require(W_NATIVE.transfer(msg.sender, flashLoanReturnAmount), \\\"Failed to transfer W_NATIVE back to flashlender.\\\");\\n    }\\n\\n    // Return the profited token\\n    return address(underlyingCollateral);\\n  }\\n\\n  /**\\n   * @dev Liquidate unhealthy token borrow, exchange seized collateral, return flashloaned funds, and exchange profit.\\n   */\\n  function postFlashLoanTokens(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICToken cTokenCollateral,\\n    uint256 minProfitAmount,\\n    address exchangeProfitTo,\\n    uint256 flashLoanReturnAmount,\\n    IUniswapV2Router02 uniswapV2RouterForBorrow,\\n    IUniswapV2Router02 uniswapV2RouterForCollateral,\\n    address[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) private returns (address) {\\n    // Approve repayAmount to cErc20\\n    IERC20Upgradeable underlyingBorrow = IERC20Upgradeable(cErc20.underlying());\\n    safeApprove(underlyingBorrow, address(cErc20), repayAmount);\\n\\n    // Liquidate NATIVE borrow using flashloaned NATIVE\\n    require(cErc20.liquidateBorrow(borrower, repayAmount, cTokenCollateral) == 0, \\\"Liquidation failed.\\\");\\n\\n    // Redeem seized cTokens for underlying asset\\n    uint256 seizedCTokenAmount = cTokenCollateral.balanceOf(address(this));\\n    require(seizedCTokenAmount > 0, \\\"No cTokens seized.\\\");\\n    uint256 redeemResult = cTokenCollateral.redeem(seizedCTokenAmount);\\n    require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n    // Repay flashloan\\n    return\\n      repayTokenFlashLoan(\\n        repayAmount,\\n        cTokenCollateral,\\n        exchangeProfitTo,\\n        flashLoanReturnAmount,\\n        uniswapV2RouterForBorrow,\\n        uniswapV2RouterForCollateral,\\n        redemptionStrategies,\\n        strategyData,\\n        underlyingBorrow\\n      );\\n  }\\n\\n  /**\\n   * @dev Repays token flashloans.\\n   */\\n  function repayTokenFlashLoan(\\n    uint256 repayAmount,\\n    ICToken cTokenCollateral,\\n    address exchangeProfitTo,\\n    uint256 flashLoanReturnAmount,\\n    IUniswapV2Router02 uniswapV2RouterForBorrow,\\n    IUniswapV2Router02 uniswapV2RouterForCollateral,\\n    address[] memory redemptionStrategies,\\n    bytes[] memory strategyData,\\n    IERC20Upgradeable underlyingBorrow\\n  ) private returns (address) {\\n    // Swap cTokenCollateral for cErc20 via Uniswap\\n    if (cTokenCollateral.isCEther()) {\\n      // Get flashloan repay amount in terms of W_NATIVE collateral via Uniswap router\\n      // uniswapV2RouterForCollateral is ignored because it should be the same as uniswapV2RouterForBorrow\\n      uint256 underlyingCollateralSeized = address(this).balance;\\n      uint256 wethRequired = getAmountsIn(\\n        uniswapV2RouterForBorrow.factory(),\\n        repayAmount,\\n        array(W_NATIVE_ADDRESS, address(underlyingBorrow))\\n      )[0];\\n\\n      // Repay flashloan\\n      require(wethRequired <= underlyingCollateralSeized, \\\"Seized NATIVE collateral not enough to repay flashloan.\\\");\\n      W_NATIVE.deposit{ value: wethRequired }();\\n      require(\\n        W_NATIVE.transfer(msg.sender, wethRequired),\\n        \\\"Failed to repay Uniswap flashloan with W_NATIVE exchanged from seized collateral.\\\"\\n      );\\n\\n      // Return the profited token (NATIVE)\\n      return address(0);\\n    } else {\\n      // Check underlying collateral seized\\n      IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(ICErc20(address(cTokenCollateral)).underlying());\\n      uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n\\n      // Redeem custom collateral if liquidation strategy is set\\n      if (redemptionStrategies.length > 0) {\\n        require(\\n          redemptionStrategies.length == strategyData.length,\\n          \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\"\\n        );\\n        for (uint256 i = 0; i < redemptionStrategies.length; i++)\\n          (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(\\n            underlyingCollateral,\\n            underlyingCollateralSeized,\\n            IRedemptionStrategy(redemptionStrategies[i]),\\n            strategyData[i]\\n          );\\n      }\\n\\n      // Check which side of the flashloan to repay\\n      if (address(underlyingCollateral) == address(underlyingBorrow)) {\\n        // Repay flashloan on borrow side with collateral\\n        require(\\n          flashLoanReturnAmount <= underlyingBorrow.balanceOf(address(this)),\\n          \\\"Token flashloan return amount greater than tokens exchanged from seized collateral.\\\"\\n        );\\n        require(\\n          underlyingBorrow.transfer(msg.sender, flashLoanReturnAmount),\\n          \\\"Failed to repay token flashloan on borrow (non-W_NATIVE) side.\\\"\\n        );\\n\\n        // Return the profited token (same as collateral and borrow)\\n        return address(underlyingCollateral);\\n      } else {\\n        // Get W_NATIVE required to repay flashloan\\n        uint256 wethRequired = getAmountsIn(\\n          uniswapV2RouterForBorrow.factory(),\\n          repayAmount,\\n          array(W_NATIVE_ADDRESS, address(underlyingBorrow))\\n        )[0];\\n\\n        if (address(underlyingCollateral) != W_NATIVE_ADDRESS) {\\n          // Approve to Uniswap router\\n          safeApprove(underlyingCollateral, address(uniswapV2RouterForCollateral), underlyingCollateralSeized);\\n\\n          // Swap collateral tokens for W_NATIVE to be repaid via Uniswap router\\n          if (exchangeProfitTo == address(underlyingCollateral))\\n            uniswapV2RouterForCollateral.swapTokensForExactTokens(\\n              wethRequired,\\n              underlyingCollateralSeized,\\n              array(address(underlyingCollateral), W_NATIVE_ADDRESS),\\n              address(this),\\n              block.timestamp\\n            );\\n          else\\n            uniswapV2RouterForCollateral.swapExactTokensForTokens(\\n              underlyingCollateralSeized,\\n              wethRequired,\\n              array(address(underlyingCollateral), W_NATIVE_ADDRESS),\\n              address(this),\\n              block.timestamp\\n            );\\n        }\\n\\n        // Repay flashloan\\n        require(\\n          wethRequired <= IERC20Upgradeable(W_NATIVE_ADDRESS).balanceOf(address(this)),\\n          \\\"Not enough W_NATIVE exchanged from seized collateral to repay flashloan.\\\"\\n        );\\n        require(\\n          W_NATIVE.transfer(msg.sender, wethRequired),\\n          \\\"Failed to repay Uniswap flashloan with W_NATIVE exchanged from seized collateral.\\\"\\n        );\\n\\n        // Return the profited token (underlying collateral if same as exchangeProfitTo; otherwise, W_NATIVE)\\n        return exchangeProfitTo == address(underlyingCollateral) ? address(underlyingCollateral) : W_NATIVE_ADDRESS;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * Public visibility because we have to call this function externally if called from a payable FuseSafeLiquidator function (for some reason delegatecall fails when called with msg.value > 0).\\n   */\\n  function redeemCustomCollateral(\\n    IERC20Upgradeable underlyingCollateral,\\n    uint256 underlyingCollateralSeized,\\n    IRedemptionStrategy strategy,\\n    bytes memory strategyData\\n  ) public returns (IERC20Upgradeable, uint256) {\\n    bytes memory returndata = _functionDelegateCall(\\n      address(strategy),\\n      abi.encodeWithSelector(strategy.redeem.selector, underlyingCollateral, underlyingCollateralSeized, strategyData)\\n    );\\n    return abi.decode(returndata, (IERC20Upgradeable, uint256));\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], but performing a delegate call.\\n   * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L37\\n   */\\n  function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n    require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Used by `_functionDelegateCall` to verify the result of a delegate call.\\n   * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L45\\n   */\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an array containing the parameters supplied.\\n   */\\n  function array(uint256 a) private pure returns (uint256[] memory) {\\n    uint256[] memory arr = new uint256[](1);\\n    arr[0] = a;\\n    return arr;\\n  }\\n\\n  /**\\n   * @dev Returns an array containing the parameters supplied.\\n   */\\n  function array(address a) private pure returns (address[] memory) {\\n    address[] memory arr = new address[](1);\\n    arr[0] = a;\\n    return arr;\\n  }\\n\\n  /**\\n   * @dev Returns an array containing the parameters supplied.\\n   */\\n  function array(address a, address b) private pure returns (address[] memory) {\\n    address[] memory arr = new address[](2);\\n    arr[0] = a;\\n    arr[1] = b;\\n    return arr;\\n  }\\n\\n  /**\\n   * @dev Returns an array containing the parameters supplied.\\n   */\\n  function array(\\n    address a,\\n    address b,\\n    address c\\n  ) private pure returns (address[] memory) {\\n    address[] memory arr = new address[](3);\\n    arr[0] = a;\\n    arr[1] = b;\\n    arr[2] = c;\\n    return arr;\\n  }\\n}\\n\",\"keccak256\":\"0x62d6ae00cc20e71666cd9ae2dc258e1c48c71f321701d9f9ccb0bc1258d0753f\",\"license\":\"UNLICENSED\"},\"contracts/external/compound/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICErc20 is ICToken {\\n  function underlying() external view returns (address);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICToken cTokenCollateral\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4174a86be37f5d7b0e1f02af3f81dfbc22ae8e7598cf9203169133372f2cde7\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICEther.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CEther Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICEther is ICToken {\\n  function liquidateBorrow(address borrower, ICToken cTokenCollateral) external payable;\\n}\\n\",\"keccak256\":\"0x6e18cb5ffd00a80880e535905da6adc63badd917a182d21522510a73ec50f455\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface ICToken {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function fuseAdminHasRights() external view returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function comptroller() external view returns (address);\\n\\n  function adminFeeMantissa() external view returns (uint256);\\n\\n  function fuseFeeMantissa() external view returns (uint256);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalAdminFees() external view returns (uint256);\\n\\n  function totalFuseFees() external view returns (uint256);\\n\\n  function isCToken() external view returns (bool);\\n\\n  function isCEther() external view returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function totalBorrowsCurrent() external returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view returns (uint256);\\n\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf3d448eb93652645ae9fd32453be4651f664d00d218f1d0e4fe181a2a39a27f\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./IUnitroller.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ninterface IComptroller {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function fuseAdminHasRights() external view returns (bool);\\n\\n  function oracle() external view returns (IPriceOracle);\\n\\n  function closeFactorMantissa() external view returns (uint256);\\n\\n  function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n  function markets(address cToken) external view returns (bool, uint256);\\n\\n  function getAssetsIn(address account) external view returns (ICToken[] memory);\\n\\n  function checkMembership(address account, ICToken cToken) external view returns (bool);\\n\\n  function getAccountLiquidity(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function _setPriceOracle(IPriceOracle newOracle) external returns (uint256);\\n\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\n\\n  function _become(IUnitroller unitroller) external;\\n\\n  function borrowGuardianPaused(address cToken) external view returns (bool);\\n\\n  function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n  function getAllMarkets() external view returns (ICToken[] memory);\\n\\n  function getAllBorrowers() external view returns (address[] memory);\\n\\n  function suppliers(address account) external view returns (bool);\\n\\n  function enforceWhitelist() external view returns (bool);\\n\\n  function whitelist(address account) external view returns (bool);\\n\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\\n\\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\\n\\n  function _toggleAutoImplementations(bool enabled) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8b7a302d6d4be25bd9ce0b934b05ac68f04be29ed0c9ea34e47266e5bb358655\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x501ba6588dc3bbcbcd7629eb294b2249dce97cb78e1c78feb1815d220b488368\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title RewardsDistributor\\n * @author Compound\\n */\\ninterface IRewardsDistributor {\\n  /// @dev The token to reward (i.e., COMP)\\n  function rewardToken() external view returns (address);\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  function compSupplySpeeds(address) external view returns (uint256);\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  function compBorrowSpeeds(address) external view returns (uint256);\\n\\n  /// @notice The COMP accrued but not yet transferred to each user\\n  function compAccrued(address) external view returns (uint256);\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param supplier The minter/redeemer\\n   */\\n  function flywheelPreSupplierAction(address cToken, address supplier) external;\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param borrower The borrower\\n   */\\n  function flywheelPreBorrowerAction(address cToken, address borrower) external;\\n\\n  /**\\n   * @notice Returns an array of all markets.\\n   */\\n  function getAllMarkets() external view returns (ICToken[] memory);\\n}\\n\",\"keccak256\":\"0x175299449a462109cf22ec786c1bcc820f16eba8052dcfa621e65666e657e3f3\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IUnitroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ninterface IUnitroller {\\n  function _setPendingImplementation(address newPendingImplementation) external returns (uint256);\\n\\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x629111448df95d5f4c6cae88cd8fceb67537af80e82f643e697d2dd4c22e1c49\",\"license\":\"BSD-3-Clause\"},\"contracts/external/pcs/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IPancakePair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x906adea611b1c914a52fa355abe1c5cc2b97cb305ec74d22e787163a2099b317\",\"license\":\"GPL-3.0-only\"},\"contracts/external/pcs/PancakeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IPancakePair.sol\\\";\\n\\nlibrary PancakeLibrary {\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n    require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    bytes memory initHashCode\\n  ) internal pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(\\n      uint160(\\n        uint256(\\n          keccak256(abi.encodePacked(hex\\\"ff\\\", factory, keccak256(abi.encodePacked(token0, token1)), initHashCode))\\n        )\\n      )\\n    );\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    bytes memory initHashCode\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    pairFor(factory, tokenA, tokenB, initHashCode);\\n    (uint256 reserve0, uint256 reserve1, ) = IPancakePair(pairFor(factory, tokenA, tokenB, initHashCode)).getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"PancakeLibrary: INSUFFICIENT_AMOUNT\\\");\\n    require(reserveA > 0 && reserveB > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n    amountB = (amountA * reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n    uint256 amountInWithFee = amountIn * 9975;\\n    uint256 numerator = amountInWithFee * reserveOut;\\n    uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n    uint256 numerator = reserveIn * amountOut * 1000;\\n    uint256 denominator = (reserveOut - amountOut) * 997;\\n    amountIn = numerator / denominator + 1;\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path,\\n    bytes memory initHashCode\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"PancakeLibrary: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1], initHashCode);\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path,\\n    bytes memory initHashCode\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"PancakeLibrary: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i], initHashCode);\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7725d701a062d1afc1323949943a5e6dcc6a6cd907ae12b62a9adc96b23326db\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Callee {\\n  function uniswapV2Call(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n\\n  function pancakeCall(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7ea455d83b1c553b480d902ab38abb395841140869a8ef449859e07754ab7c03\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xcad1373d47c15a77f0fe29698181bb643d4eb4cc870fdeb40b7e081ebffb598a\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xc30635313c081ea723c128678f4d45c48aac88080d91578e8c4374774d26cba2\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x62d8aba76a668ee9cc44e89f8b5bca363bd9682e725bf0c8780b0473daec590b\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb43a52d7a8eb3895ddfdfbf97490d1c3e8d3630b69be8ab4dc4591e0b1de546d\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex\\\"ff\\\",\\n              factory,\\n              keccak256(abi.encodePacked(token0, token1)),\\n              hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n    require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n    amountB = (amountA * reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n    uint256 amountInWithFee = amountIn * 997;\\n    uint256 numerator = amountInWithFee * reserveOut;\\n    uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n    uint256 numerator = reserveIn * amountOut * 1000;\\n    uint256 denominator = (reserveOut - amountOut) * 997;\\n    amountIn = numerator / denominator + 1;\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb2d712cb86e4df512a5d185ad4c99c9c5f8b20784b9996fd88d89905caa57fb3\",\"license\":\"GPL-3.0-only\"},\"contracts/liquidators/IRedemptionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IRedemptionStrategy\\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface IRedemptionStrategy {\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n}\\n\",\"keccak256\":\"0x9b49bb83d75a1f2d241cc6052fca842336cf54966476f2ddffbbe804bc713bbb\",\"license\":\"UNLICENSED\"},\"contracts/utils/IW_NATIVE.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IW_NATIVE {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x8e623801d4c96dd893095521d7a58247cdf45c2c0a58a6e5a7a82890b02e687e\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615226806100206000396000f3fe6080604052600436106100e15760003560e01c8063848008121161007f578063b596625811610059578063b5966258146102a4578063b798d3ff146102e3578063ba8bca5a14610303578063c8348b541461032357600080fd5b80638480081214610244578063a68ee11914610264578063a94c12bc1461028457600080fd5b8063700d5dd7116100bb578063700d5dd7146101a65780637754f887146101c6578063789fc9ad146101fe57806381738f131461021e57600080fd5b80630d1b27631461014057806310d1e85c146101665780634a9364171461018657600080fd5b3661013b57333b6101395760405162461bcd60e51b815260206004820152601960248201527f53656e646572206973206e6f74206120636f6e74726163742e0000000000000060448201526064015b60405180910390fd5b005b600080fd5b61015361014e36600461440a565b610343565b6040519081526020015b60405180910390f35b34801561017257600080fd5b506101396101813660046144d4565b6106d3565b34801561019257600080fd5b506101396101a1366004614569565b6108e7565b3480156101b257600080fd5b506101536101c13660046145f0565b610a89565b3480156101d257600080fd5b506003546101e6906001600160a01b031681565b6040516001600160a01b03909116815260200161015d565b34801561020a57600080fd5b506004546101e6906001600160a01b031681565b34801561022a57600080fd5b506000546101e6906201000090046001600160a01b031681565b34801561025057600080fd5b5061013961025f3660046144d4565b610d0a565b34801561027057600080fd5b5061015361027f3660046146dc565b610d1e565b34801561029057600080fd5b506002546101e6906001600160a01b031681565b3480156102b057600080fd5b506102c46102bf3660046147aa565b6111a1565b604080516001600160a01b03909316835260208301919091520161015d565b3480156102ef57600080fd5b506001546101e6906001600160a01b031681565b34801561030f57600080fd5b506006546101e6906001600160a01b031681565b34801561032f57600080fd5b5061015361033e366004614815565b611222565b60008034116103645760405162461bcd60e51b8152600401610130906148ea565b604051635572051560e11b81526001600160a01b038a81166004830152888116602483015289169063aae40a2a9034906044016000604051808303818588803b1580156103b057600080fd5b505af11580156103c4573d6000803e3d6000fd5b5050505050866001600160a01b0316856001600160a01b0316146106bc576040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190614947565b905080156106ba5760405163db006a7560e01b8152600481018290526000906001600160a01b038a169063db006a75906024016020604051808303816000875af115801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c39190614947565b905080156104e35760405162461bcd60e51b815260040161013090614960565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054791906149be565b8651909150156106ab5784518651146105725760405162461bcd60e51b8152600401610130906149db565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190614947565b905060005b87518110156106a857306001600160a01b031663b596625884848b858151811061060e5761060e614a5e565b60200260200101518b868151811061062857610628614a5e565b60200260200101516040518563ffffffff1660e01b815260040161064f9493929190614acc565b60408051808303816000875af115801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190614aff565b9093509150806106a081614b43565b9150506105e2565b50505b6106b781898b8a611548565b50505b505b6106c685876119ac565b9998505050505050505050565b60006106e3606460448486614b5e565b8101906106f09190614b88565b9050806001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107549190614ba5565b1561081c5760008080808080808061076f8a6004818e614b5e565b81019061077c9190614c2b565b985098509850985098509850509750975060006103e5886103e86107a09190614cc5565b6107aa9190614cfa565b905060006103e56107bd8a6103e8614cc5565b6107c79190614d0e565b11156107db57806107d781614b43565b9150505b6107ed89898c8a8a8a878b8b8b611bd1565b600780546001600160a01b0319166001600160a01b0392909216919091179055506108df975050505050505050565b600080808080808080806108338b6004818f614b5e565b8101906108409190614d22565b9950995099509950995099509950509850985060006103e5896103e86108669190614cc5565b6108709190614cfa565b905060006103e56108838b6103e8614cc5565b61088d9190614d0e565b11156108a1578061089d81614b43565b9150505b6108b48a8a8d8b8b8b878c8c8c8c611de4565b600780546001600160a01b0319166001600160a01b0392909216919091179055505050505050505050505b505050505050565b600054610100900460ff166109025760005460ff1615610906565b303b155b6109695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610130565b600054610100900460ff1615801561098b576000805461ffff19166101011790555b6001600160a01b0385166109e15760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632466163746f7279206e6f7420646566696e65642e0000006044820152606401610130565b6000805462010000600160b01b031916620100006001600160a01b0389811682029290921792839055600280546001600160a01b03199081168a85169081179092556003805482168a86161790556004805482168986161790556001805493909504909316918316919091179092556006805490911690911790558151610a6f90600590602085019061417e565b5080156108df576000805461ff0019169055505050505050565b6000808b11610aaa5760405162461bcd60e51b815260040161013090614dfe565b60008060008c6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1191906149be565b9050886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7591906149be565b60005460405163e6a4390560e01b81526001600160a01b038481166004830152620100009092048216602482015291169063e6a4390590604401602060405180830381865afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf091906149be565b9250806001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e91906149be565b6001600160a01b031614915050816001600160a01b031663022c0d9f82610c86576000610c88565b8e5b8315610c95576000610c97565b8f5b306000366040518663ffffffff1660e01b8152600401610cbb959493929190614e42565b600060405180830381600087803b158015610cd557600080fd5b505af1158015610ce9573d6000803e3d6000fd5b50505050610cf8898b86612078565b9e9d5050505050505050505050505050565b610d1785858585856106d3565b5050505050565b6000808911610d3f5760405162461bcd60e51b8152600401610130906148ea565b6000886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da391906149be565b9050610dba6001600160a01b03821633308d61219c565b610dc5818a8c612207565b604051637af1e23160e11b81526001600160a01b038c81166004830152602482018c905289811660448301528a169063f5e3c462906064016020604051808303816000875af1158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e409190614947565b15610e835760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b6044820152606401610130565b876001600160a01b0316866001600160a01b031614611188576040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a0823190602401602060405180830381865afa158015610ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f079190614947565b905080156111865760405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d9190614947565b90508015610f9d5760405162461bcd60e51b815260040161013090614960565b896001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff9190614ba5565b15611016576110116000898b8a611548565b611184565b60008a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107a91906149be565b8751909150156111765785518751146110a55760405162461bcd60e51b8152600401610130906149db565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190614947565b905060005b88518110156111735761115c83838b848151811061113557611135614a5e565b60200260200101518b858151811061114f5761114f614a5e565b60200260200101516111a1565b90935091508061116b81614b43565b915050611115565b50505b611182818a8c8b611548565b505b505b505b61119286886119ac565b9b9a5050505050505050505050565b60008060006111fe856310badf4e60e01b8989886040516024016111c793929190614e91565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526122b6565b9050808060200190518101906112149190614aff565b925092505094509492505050565b6000808a116112435760405162461bcd60e51b815260040161013090614dfe565b600061141a600660009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561129b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bf91906149be565b6002546001600160a01b038981169116148015611352575060035460408051636f307dc360e01b815290516001600160a01b03928316928e1691636f307dc39160048083019260209291908290030181865afa158015611323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134791906149be565b6001600160a01b0316145b611367576003546001600160a01b0316611374565b6004546001600160a01b03165b600060029054906101000a90046001600160a01b03166005805461139790614eb8565b80601f01602080910402602001604051908101604052809291908181526020018280546113c390614eb8565b80156114105780601f106113e557610100808354040283529160200191611410565b820191906000526020600020905b8154815290600101906020018083116113f357829003601f168201915b50505050506123aa565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561145c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148091906149be565b6000549091506001600160a01b038084169163022c0d9f918085166201000090920416146114af5760006114b1565b8d5b6000546001600160a01b03858116620100009092041614156114d45760006114d6565b8e5b306000366040518663ffffffff1660e01b81526004016114fa959493929190614e42565b600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b50505050611537888a86612078565b9d9c50505050505050505050505050565b836001600160a01b0316836001600160a01b03161415611567576119a6565b6001600160a01b03841661169d576000546001600160a01b03848116620100009092041614156115ff57600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156115e157600080fd5b505af11580156115f5573d6000803e3d6000fd5b50505050506119a6565b806001600160a01b0316637ff36ab5478461162f600060029054906101000a90046001600160a01b031688612435565b30426040518663ffffffff1660e01b81526004016116509493929190614f37565b60006040518083038185885af115801561166e573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526116979190810190614f6c565b506119a6565b6000546001600160a01b0385811662010000909204161480156116c757506001600160a01b038316155b1561179e576001546000546040516370a0823160e01b81523060048201526001600160a01b0392831692632e1a7d4d9262010000900416906370a0823190602401602060405180830381865afa158015611725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117499190614947565b6040518263ffffffff1660e01b815260040161176791815260200190565b600060405180830381600087803b15801561178157600080fd5b505af1158015611795573d6000803e3d6000fd5b505050506119a6565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156117e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180b9190614947565b9050611818828483612207565b6001600160a01b0385166118c557826001600160a01b03166318cbafe582866118568a600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b8152600401611878959493929190614ff1565b6000604051808303816000875af1158015611897573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118bf9190810190614f6c565b506108df565b6000546001600160a01b03808516916338ed173991849188918b81166201000090920416148061190857506000546001600160a01b038a81166201000090920416145b61192f5760005461192a908b906201000090046001600160a01b03168b6124c2565b611939565b6119398a8a612435565b30426040518663ffffffff1660e01b815260040161195b959493929190614ff1565b6000604051808303816000875af115801561197a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119a29190810190614f6c565b5050505b50505050565b6000806001600160a01b038416611ae057504782811015611a235760405162461bcd60e51b815260206004820152602b60248201527f4d696e696d756d204e4154495645206f757470757420616d6f756e74206e6f7460448201526a1039b0ba34b9b334b2b21760a91b6064820152608401610130565b8015611adb57604051600090339083908381818185875af1925050503d8060008114611a6b576040519150601f19603f3d011682016040523d82523d6000602084013e611a70565b606091505b5050905080611ad95760405162461bcd60e51b815260206004820152602f60248201527f4661696c656420746f207472616e73666572206f7574707574204e415449564560448201526e103a379036b9b39739b2b73232b91760891b6064820152608401610130565b505b611bca565b6040516370a0823160e01b815230600482015284906001600160a01b038216906370a0823190602401602060405180830381865afa158015611b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4a9190614947565b915083821015611bae5760405162461bcd60e51b815260206004820152602960248201527f4d696e696d756d20746f6b656e206f757470757420616d6f756e74206e6f742060448201526839b0ba34b334b2b21760b91b6064820152608401610130565b8115611bc857611bc86001600160a01b0382163384612585565b505b9392505050565b600154604051632e1a7d4d60e01b8152600481018b90526000916001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611c1857600080fd5b505af1158015611c2c573d6000803e3d6000fd5b5050604051635572051560e11b81526001600160a01b038e811660048301528b811660248301528c16925063aae40a2a91508c906044016000604051808303818588803b158015611c7c57600080fd5b505af1158015611c90573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093506001600160a01b038c1692506370a082319150602401602060405180830381865afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d009190614947565b905060008111611d475760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b6044820152606401610130565b60405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db59190614947565b90508015611dd55760405162461bcd60e51b815260040161013090614960565b6115378c8b8a8a8a8a8a6125ba565b6000808a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4991906149be565b9050611e56818c8e612207565b604051637af1e23160e11b81526001600160a01b038e81166004830152602482018e90528b811660448301528c169063f5e3c462906064016020604051808303816000875af1158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed19190614947565b15611f145760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b6044820152606401610130565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a0823190602401602060405180830381865afa158015611f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7f9190614947565b905060008111611fc65760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b6044820152606401610130565b60405163db006a7560e01b8152600481018290526000906001600160a01b038d169063db006a75906024016020604051808303816000875af1158015612010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120349190614947565b905080156120545760405162461bcd60e51b815260040161013090614960565b6120658e8d8c8c8c8c8c8c8b612dd2565b9f9e505050505050505050505050505050565b60006001600160a01b038416612114576007546120b4906001600160a01b0316856120a3858761502d565b6006546001600160a01b0316611548565b81156121035760405141908390600081818185875af1925050503d80600081146120fa576040519150601f19603f3d011682016040523d82523d6000602084013e6120ff565b606091505b5050505b61210d84846119ac565b9050611bca565b811561218157600754600654612138916001600160a01b03908116918591166137a0565b60405141908390600081818185875af1925050503d8060008114612178576040519150601f19603f3d011682016040523d82523d6000602084013e61217d565b606091505b5050505b600754612103906001600160a01b0316856120a3858761502d565b6040516001600160a01b03808516602483015283166044820152606481018290526119a69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261393c565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015612257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227b9190614947565b9050818110156119a65780156122a0576122a06001600160a01b038516846000613a0e565b6119a66001600160a01b03851684600019613a0e565b60606001600160a01b0383163b61231e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610130565b600080846001600160a01b0316846040516123399190615045565b600060405180830381855af49150503d8060008114612374576040519150601f19603f3d011682016040523d82523d6000602084013e612379565b606091505b50915091506123a182826040518060600160405280602781526020016151ca60279139613b23565b95945050505050565b60008060006123b98686613b5c565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091508790604801604051602081830303815290604052805190602001208560405160200161241293929190615061565b60408051601f198184030181529190528051602090910120979650505050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050838160008151811061246e5761246e614a5e565b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106124a2576124a2614a5e565b6001600160a01b0390921660209283029190910190910152905092915050565b604080516003808252608082019092526060916000919060208201848036833701905050905084816000815181106124fc576124fc614a5e565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061253057612530614a5e565b60200260200101906001600160a01b031690816001600160a01b031681525050828160028151811061256457612564614a5e565b6001600160a01b039092166020928302919091019091015290509392505050565b6040516001600160a01b0383166024820152604481018290526125b590849063a9059cbb60e01b906064016121d0565b505050565b600080876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261f91906149be565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268d9190614947565b85519091501561270e5783518551146126b85760405162461bcd60e51b8152600401610130906149db565b60005b855181101561270c576126f583838884815181106126db576126db614a5e565b602002602001015188858151811061114f5761114f614a5e565b90935091508061270481614b43565b9150506126bb565b505b6002546001600160a01b0387811691161480156127d7575060035460408051636f307dc360e01b815290516001600160a01b03928316928c1691636f307dc39160048083019260209291908290030181865afa158015612772573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279691906149be565b6001600160a01b0316146127b5576003546001600160a01b03166127c2565b6004546001600160a01b03165b6001600160a01b0316826001600160a01b0316145b156129e3576000612868876001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561281f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284391906149be565b8c61286386600060029054906101000a90046001600160a01b0316612435565b613c52565b60008151811061287a5761287a614a5e565b60200260200101519050818111156128fa5760405162461bcd60e51b815260206004820152603760248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e207365697a656420636f6c6c61746572616c2e0000000000000000006064820152608401610130565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015612947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296b9190614ba5565b6129dd5760405162461bcd60e51b815260206004820152603b60248201527f4661696c656420746f207472616e73666572206e6f6e2d575f4e41544956452060448201527f746f6b656e73206261636b20746f20666c6173686c656e6465722e00000000006064820152608401610130565b50612dc5565b6000546001600160a01b03838116620100009092041614612bed576001600160a01b038216612a7a57600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a5c57600080fd5b505af1158015612a70573d6000803e3d6000fd5b5050505050612bed565b612a85828783612207565b816001600160a01b0316886001600160a01b03161415612b3e57856001600160a01b0316638803dbee8883612acf86600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b8152600401612af1959493929190614ff1565b6000604051808303816000875af1158015612b10573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b389190810190614f6c565b50612bed565b856001600160a01b03166338ed17398289612b6e86600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b8152600401612b90959493929190614ff1565b6000604051808303816000875af1158015612baf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612bd79190810190614f6c565b506000546201000090046001600160a01b031691505b6000546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015612c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5e9190614947565b871115612ceb5760405162461bcd60e51b815260206004820152604f60248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e20575f4e41544956452065786368616e6765642066726f6d2073656960648201526e3d32b21031b7b63630ba32b930b61760891b608482015260a401610130565b60015460405163a9059cbb60e01b8152336004820152602481018990526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d609190614ba5565b612dc55760405162461bcd60e51b815260206004820152603060248201527f4661696c656420746f207472616e7366657220575f4e4154495645206261636b60448201526f103a3790333630b9b43632b73232b91760811b6064820152608401610130565b5098975050505050505050565b6000886001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190614ba5565b1561305d5760004790506000612ec5886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea791906149be565b6000548e90612863906201000090046001600160a01b031688612435565b600081518110612ed757612ed7614a5e565b6020026020010151905081811115612f575760405162461bcd60e51b815260206004820152603760248201527f5365697a6564204e415449564520636f6c6c61746572616c206e6f7420656e6f60448201527f75676820746f20726570617920666c6173686c6f616e2e0000000000000000006064820152608401610130565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612fa757600080fd5b505af1158015612fbb573d6000803e3d6000fd5b505060015460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b03909116935063a9059cbb925060440190506020604051808303816000875af1158015613012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130369190614ba5565b6130525760405162461bcd60e51b8152600401610130906150aa565b6000925050506106c6565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561309d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c191906149be565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561310b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312f9190614947565b8651909150156131b057845186511461315a5760405162461bcd60e51b8152600401610130906149db565b60005b86518110156131ae57613197838389848151811061317d5761317d614a5e565b602002602001015189858151811061114f5761114f614a5e565b9093509150806131a681614b43565b91505061315d565b505b836001600160a01b0316826001600160a01b031614156133ae576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa15801561320e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132329190614947565b8911156132c35760405162461bcd60e51b815260206004820152605360248201527f546f6b656e20666c6173686c6f616e2072657475726e20616d6f756e7420677260448201527f6561746572207468616e20746f6b656e732065786368616e6765642066726f6d6064820152721039b2b4bd32b21031b7b63630ba32b930b61760691b608482015260a401610130565b60405163a9059cbb60e01b8152336004820152602481018a90526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015613310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133349190614ba5565b6133a65760405162461bcd60e51b815260206004820152603e60248201527f4661696c656420746f20726570617920746f6b656e20666c6173686c6f616e2060448201527f6f6e20626f72726f7720286e6f6e2d575f4e41544956452920736964652e00006064820152608401610130565b5090506106c6565b6000613433896001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341591906149be565b6000548f90612863906201000090046001600160a01b031689612435565b60008151811061344557613445614a5e565b60200260200101519050600060029054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b0316146135dc57613488838984612207565b826001600160a01b03168b6001600160a01b0316141561354157876001600160a01b0316638803dbee82846134d287600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b81526004016134f4959493929190614ff1565b6000604051808303816000875af1158015613513573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261353b9190810190614f6c565b506135dc565b876001600160a01b03166338ed1739838361357187600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b8152600401613593959493929190614ff1565b6000604051808303816000875af11580156135b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135da9190810190614f6c565b505b6000546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015613629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364d9190614947565b8111156136d35760405162461bcd60e51b815260206004820152604860248201527f4e6f7420656e6f75676820575f4e41544956452065786368616e67656420667260448201527f6f6d207365697a656420636f6c6c61746572616c20746f20726570617920666c60648201526730b9b43637b0b71760c11b608482015260a401610130565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015613724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137489190614ba5565b6137645760405162461bcd60e51b8152600401610130906150aa565b826001600160a01b03168b6001600160a01b031614613794576000546201000090046001600160a01b0316613796565b825b93505050506106c6565b6001600160a01b0383166137b357505050565b6000546001600160a01b038481166201000090920416141561382957600154604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561381557600080fd5b505af11580156119a2573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015283906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138969190614947565b90506138a3828483612207565b826001600160a01b0316634a25d94a85836138d389600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b81526004016138f5959493929190614ff1565b6000604051808303816000875af1158015613914573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108df9190810190614f6c565b6000613991826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ddf9092919063ffffffff16565b8051909150156125b557808060200190518101906139af9190614ba5565b6125b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610130565b801580613a885750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015613a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a869190614947565b155b613af35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610130565b6040516001600160a01b0383166024820152604481018290526125b590849063095ea7b360e01b906064016121d0565b60608315613b32575081611bca565b825115613b425782518084602001fd5b8160405162461bcd60e51b81526004016101309190615121565b600080826001600160a01b0316846001600160a01b03161415613bcd5760405162461bcd60e51b815260206004820152602360248201527f50616e63616b654c6962726172793a204944454e544943414c5f41444452455360448201526253455360e81b6064820152608401610130565b826001600160a01b0316846001600160a01b031610613bed578284613bf0565b83835b90925090506001600160a01b038216613c4b5760405162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a205a45524f5f41444452455353000000006044820152606401610130565b9250929050565b6060600282511015613ca65760405162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a20494e56414c49445f50415448000000006044820152606401610130565b81516001600160401b03811115613cbf57613cbf61423f565b604051908082528060200260200182016040528015613ce8578160200160208202803683370190505b509050828160018351613cfb9190615134565b81518110613d0b57613d0b614a5e565b602002602001018181525050600060018351613d279190615134565b90505b8015611bc857600080613d7a8786613d43600187615134565b81518110613d5357613d53614a5e565b6020026020010151878681518110613d6d57613d6d614a5e565b6020026020010151613df6565b91509150613da2848481518110613d9357613d93614a5e565b60200260200101518383613f2b565b84613dae600186615134565b81518110613dbe57613dbe614a5e565b60200260200101818152505050508080613dd79061514b565b915050613d2a565b6060613dee848460008561404d565b949350505050565b6000806000613e058585613b5c565b5060405163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291925060009182919089169063e6a4390590604401602060405180830381865afa158015613e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e8191906149be565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ee29190615179565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613f19578082613f1c565b81815b90999098509650505050505050565b6000808411613f8f5760405162461bcd60e51b815260206004820152602a60248201527f50616e63616b654c6962726172793a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b6064820152608401610130565b600083118015613f9f5750600082115b613ffa5760405162461bcd60e51b815260206004820152602660248201527f50616e63616b654c6962726172793a20494e53554646494349454e545f4c495160448201526555494449545960d01b6064820152608401610130565b60006140068585614cc5565b614012906103e8614cc5565b905060006140208685615134565b61402c906103e5614cc5565b90506140388183614cfa565b61404390600161502d565b9695505050505050565b6060824710156140ae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610130565b6001600160a01b0385163b6141055760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610130565b600080866001600160a01b031685876040516141219190615045565b60006040518083038185875af1925050503d806000811461415e576040519150601f19603f3d011682016040523d82523d6000602084013e614163565b606091505b5091509150614173828286613b23565b979650505050505050565b82805461418a90614eb8565b90600052602060002090601f0160209004810192826141ac57600085556141f2565b82601f106141c557805160ff19168380011785556141f2565b828001600101855582156141f2579182015b828111156141f25782518255916020019190600101906141d7565b506141fe929150614202565b5090565b5b808211156141fe5760008155600101614203565b6001600160a01b038116811461422c57600080fd5b50565b803561423a81614217565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561427d5761427d61423f565b604052919050565b60006001600160401b0382111561429e5761429e61423f565b5060051b60200190565b600082601f8301126142b957600080fd5b813560206142ce6142c983614285565b614255565b82815260059290921b840181019181810190868411156142ed57600080fd5b8286015b8481101561431157803561430481614217565b83529183019183016142f1565b509695505050505050565b600082601f83011261432d57600080fd5b81356001600160401b038111156143465761434661423f565b614359601f8201601f1916602001614255565b81815284602083860101111561436e57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261439c57600080fd5b813560206143ac6142c983614285565b82815260059290921b840181019181810190868411156143cb57600080fd5b8286015b848110156143115780356001600160401b038111156143ee5760008081fd5b6143fc8986838b010161431c565b8452509183019183016143cf565b600080600080600080600080610100898b03121561442757600080fd5b883561443281614217565b9750602089013561444281614217565b9650604089013561445281614217565b955060608901359450608089013561446981614217565b935060a089013561447981614217565b925060c08901356001600160401b038082111561449557600080fd5b6144a18c838d016142a8565b935060e08b01359150808211156144b757600080fd5b506144c48b828c0161438b565b9150509295985092959890939650565b6000806000806000608086880312156144ec57600080fd5b85356144f781614217565b9450602086013593506040860135925060608601356001600160401b038082111561452157600080fd5b818801915088601f83011261453557600080fd5b81358181111561454457600080fd5b89602082850101111561455657600080fd5b9699959850939650602001949392505050565b600080600080600060a0868803121561458157600080fd5b853561458c81614217565b9450602086013561459c81614217565b935060408601356145ac81614217565b925060608601356145bc81614217565b915060808601356001600160401b038111156145d757600080fd5b6145e38882890161431c565b9150509295509295909350565b60008060008060008060008060008060006101608c8e03121561461257600080fd5b61461b8c61422f565b9a5060208c0135995061463060408d0161422f565b985061463e60608d0161422f565b975060808c0135965061465360a08d0161422f565b955061466160c08d0161422f565b945061466f60e08d0161422f565b93506001600160401b03806101008e0135111561468b57600080fd5b61469c8e6101008f01358f016142a8565b9350806101208e013511156146b057600080fd5b506146c28d6101208e01358e0161438b565b91506101408c013590509295989b509295989b9093969950565b60008060008060008060008060006101208a8c0312156146fb57600080fd5b893561470681614217565b985060208a0135975060408a013561471d81614217565b965061472b60608b0161422f565b955060808a0135945061474060a08b0161422f565b935061474e60c08b0161422f565b925060e08a01356001600160401b038082111561476a57600080fd5b6147768d838e016142a8565b93506101008c013591508082111561478d57600080fd5b5061479a8c828d0161438b565b9150509295985092959850929598565b600080600080608085870312156147c057600080fd5b84356147cb81614217565b93506020850135925060408501356147e281614217565b915060608501356001600160401b038111156147fd57600080fd5b6148098782880161431c565b91505092959194509250565b6000806000806000806000806000806101408b8d03121561483557600080fd5b61483e8b61422f565b995060208b0135985061485360408c0161422f565b975061486160608c0161422f565b965060808b0135955061487660a08c0161422f565b945061488460c08c0161422f565b935060e08b01356001600160401b03808211156148a057600080fd5b6148ac8e838f016142a8565b94506101008d01359150808211156148c357600080fd5b506148d08d828e0161438b565b9250506101208b013590509295989b9194979a5092959850565b60208082526038908201527f526570617920616d6f756e7420287472616e73616374696f6e2076616c75652960408201527f206d7573742062652067726561746572207468616e20302e0000000000000000606082015260800190565b60006020828403121561495957600080fd5b5051919050565b602080825260409082018190527f4572726f722063616c6c696e672072656465656d696e67207365697a65642063908201527f546f6b656e3a206572726f7220636f6465206e6f7420657175616c20746f2030606082015260800190565b6000602082840312156149d057600080fd5b8151611bca81614217565b6020808252605b908201527f49526564656d7074696f6e537472617465677920636f6e74726163742061727260408201527f617920616e64207374726174656779206461746120627974657320617272617960608201527f206d6e75737420746865207468652073616d65206c656e6774682e0000000000608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015614a8f578181015183820152602001614a77565b838111156119a65750506000910152565b60008151808452614ab8816020860160208601614a74565b601f01601f19169290920160200192915050565b6001600160a01b038581168252602082018590528316604082015260806060820181905260009061404390830184614aa0565b60008060408385031215614b1257600080fd5b8251614b1d81614217565b6020939093015192949293505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415614b5757614b57614b2d565b5060010190565b60008085851115614b6e57600080fd5b83861115614b7b57600080fd5b5050820193919092039150565b600060208284031215614b9a57600080fd5b8135611bca81614217565b600060208284031215614bb757600080fd5b81518015158114611bca57600080fd5b600082601f830112614bd857600080fd5b81356020614be86142c983614285565b82815260059290921b84018101918181019086841115614c0757600080fd5b8286015b84811015614311578035614c1e81614217565b8352918301918301614c0b565b60008060008060008060008060006101208a8c031215614c4a57600080fd5b8935614c5581614217565b985060208a0135975060408a0135614c6c81614217565b9650614c7a60608b0161422f565b955060808a01359450614c8f60a08b0161422f565b9350614c9d60c08b0161422f565b925060e08a01356001600160401b0380821115614cb957600080fd5b6147768d838e01614bc7565b6000816000190483118215151615614cdf57614cdf614b2d565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614d0957614d09614ce4565b500490565b600082614d1d57614d1d614ce4565b500690565b6000806000806000806000806000806101408b8d031215614d4257600080fd5b614d4b8b61422f565b995060208b01359850614d6060408c0161422f565b9750614d6e60608c0161422f565b965060808b01359550614d8360a08c0161422f565b9450614d9160c08c0161422f565b9350614d9f60e08c0161422f565b92506101008b01356001600160401b0380821115614dbc57600080fd5b614dc88e838f01614bc7565b93506101208d0135915080821115614ddf57600080fd5b50614dec8d828e0161438b565b9150509295989b9194979a5092959850565b60208082526024908201527f526570617920616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b858152602081018590526001600160a01b03841660408201526080606082018190528101829052818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60018060a01b03841681528260208201526060604082015260006123a16060830184614aa0565b600181811c90821680614ecc57607f821691505b60208210811415614eed57634e487b7160e01b600052602260045260246000fd5b50919050565b600081518084526020808501945080840160005b83811015614f2c5781516001600160a01b031687529582019590820190600101614f07565b509495945050505050565b848152608060208201526000614f506080830186614ef3565b6001600160a01b03949094166040830152506060015292915050565b60006020808385031215614f7f57600080fd5b82516001600160401b03811115614f9557600080fd5b8301601f81018513614fa657600080fd5b8051614fb46142c982614285565b81815260059190911b82018301908381019087831115614fd357600080fd5b928401925b8284101561417357835182529284019290840190614fd8565b85815284602082015260a06040820152600061501060a0830186614ef3565b6001600160a01b0394909416606083015250608001529392505050565b6000821982111561504057615040614b2d565b500190565b60008251615057818460208701614a74565b9190910192915050565b60ff60f81b81526bffffffffffffffffffffffff198460601b1660018201528260158201526000825161509b816035850160208701614a74565b91909101603501949350505050565b60208082526051908201527f4661696c656420746f20726570617920556e697377617020666c6173686c6f6160408201527f6e207769746820575f4e41544956452065786368616e6765642066726f6d207360608201527032b4bd32b21031b7b63630ba32b930b61760791b608082015260a00190565b602081526000611bca6020830184614aa0565b60008282101561514657615146614b2d565b500390565b60008161515a5761515a614b2d565b506000190190565b80516001600160701b038116811461423a57600080fd5b60008060006060848603121561518e57600080fd5b61519784615162565b92506151a560208501615162565b9150604084015163ffffffff811681146151be57600080fd5b80915050925092509256fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220039dd7ee05ff92c63257de5a4ab0b3fca7509912ca85e2a5c3d97204e92977b064736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c8063848008121161007f578063b596625811610059578063b5966258146102a4578063b798d3ff146102e3578063ba8bca5a14610303578063c8348b541461032357600080fd5b80638480081214610244578063a68ee11914610264578063a94c12bc1461028457600080fd5b8063700d5dd7116100bb578063700d5dd7146101a65780637754f887146101c6578063789fc9ad146101fe57806381738f131461021e57600080fd5b80630d1b27631461014057806310d1e85c146101665780634a9364171461018657600080fd5b3661013b57333b6101395760405162461bcd60e51b815260206004820152601960248201527f53656e646572206973206e6f74206120636f6e74726163742e0000000000000060448201526064015b60405180910390fd5b005b600080fd5b61015361014e36600461440a565b610343565b6040519081526020015b60405180910390f35b34801561017257600080fd5b506101396101813660046144d4565b6106d3565b34801561019257600080fd5b506101396101a1366004614569565b6108e7565b3480156101b257600080fd5b506101536101c13660046145f0565b610a89565b3480156101d257600080fd5b506003546101e6906001600160a01b031681565b6040516001600160a01b03909116815260200161015d565b34801561020a57600080fd5b506004546101e6906001600160a01b031681565b34801561022a57600080fd5b506000546101e6906201000090046001600160a01b031681565b34801561025057600080fd5b5061013961025f3660046144d4565b610d0a565b34801561027057600080fd5b5061015361027f3660046146dc565b610d1e565b34801561029057600080fd5b506002546101e6906001600160a01b031681565b3480156102b057600080fd5b506102c46102bf3660046147aa565b6111a1565b604080516001600160a01b03909316835260208301919091520161015d565b3480156102ef57600080fd5b506001546101e6906001600160a01b031681565b34801561030f57600080fd5b506006546101e6906001600160a01b031681565b34801561032f57600080fd5b5061015361033e366004614815565b611222565b60008034116103645760405162461bcd60e51b8152600401610130906148ea565b604051635572051560e11b81526001600160a01b038a81166004830152888116602483015289169063aae40a2a9034906044016000604051808303818588803b1580156103b057600080fd5b505af11580156103c4573d6000803e3d6000fd5b5050505050866001600160a01b0316856001600160a01b0316146106bc576040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190614947565b905080156106ba5760405163db006a7560e01b8152600481018290526000906001600160a01b038a169063db006a75906024016020604051808303816000875af115801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c39190614947565b905080156104e35760405162461bcd60e51b815260040161013090614960565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054791906149be565b8651909150156106ab5784518651146105725760405162461bcd60e51b8152600401610130906149db565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190614947565b905060005b87518110156106a857306001600160a01b031663b596625884848b858151811061060e5761060e614a5e565b60200260200101518b868151811061062857610628614a5e565b60200260200101516040518563ffffffff1660e01b815260040161064f9493929190614acc565b60408051808303816000875af115801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190614aff565b9093509150806106a081614b43565b9150506105e2565b50505b6106b781898b8a611548565b50505b505b6106c685876119ac565b9998505050505050505050565b60006106e3606460448486614b5e565b8101906106f09190614b88565b9050806001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107549190614ba5565b1561081c5760008080808080808061076f8a6004818e614b5e565b81019061077c9190614c2b565b985098509850985098509850509750975060006103e5886103e86107a09190614cc5565b6107aa9190614cfa565b905060006103e56107bd8a6103e8614cc5565b6107c79190614d0e565b11156107db57806107d781614b43565b9150505b6107ed89898c8a8a8a878b8b8b611bd1565b600780546001600160a01b0319166001600160a01b0392909216919091179055506108df975050505050505050565b600080808080808080806108338b6004818f614b5e565b8101906108409190614d22565b9950995099509950995099509950509850985060006103e5896103e86108669190614cc5565b6108709190614cfa565b905060006103e56108838b6103e8614cc5565b61088d9190614d0e565b11156108a1578061089d81614b43565b9150505b6108b48a8a8d8b8b8b878c8c8c8c611de4565b600780546001600160a01b0319166001600160a01b0392909216919091179055505050505050505050505b505050505050565b600054610100900460ff166109025760005460ff1615610906565b303b155b6109695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610130565b600054610100900460ff1615801561098b576000805461ffff19166101011790555b6001600160a01b0385166109e15760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632466163746f7279206e6f7420646566696e65642e0000006044820152606401610130565b6000805462010000600160b01b031916620100006001600160a01b0389811682029290921792839055600280546001600160a01b03199081168a85169081179092556003805482168a86161790556004805482168986161790556001805493909504909316918316919091179092556006805490911690911790558151610a6f90600590602085019061417e565b5080156108df576000805461ff0019169055505050505050565b6000808b11610aaa5760405162461bcd60e51b815260040161013090614dfe565b60008060008c6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1191906149be565b9050886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7591906149be565b60005460405163e6a4390560e01b81526001600160a01b038481166004830152620100009092048216602482015291169063e6a4390590604401602060405180830381865afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf091906149be565b9250806001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e91906149be565b6001600160a01b031614915050816001600160a01b031663022c0d9f82610c86576000610c88565b8e5b8315610c95576000610c97565b8f5b306000366040518663ffffffff1660e01b8152600401610cbb959493929190614e42565b600060405180830381600087803b158015610cd557600080fd5b505af1158015610ce9573d6000803e3d6000fd5b50505050610cf8898b86612078565b9e9d5050505050505050505050505050565b610d1785858585856106d3565b5050505050565b6000808911610d3f5760405162461bcd60e51b8152600401610130906148ea565b6000886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da391906149be565b9050610dba6001600160a01b03821633308d61219c565b610dc5818a8c612207565b604051637af1e23160e11b81526001600160a01b038c81166004830152602482018c905289811660448301528a169063f5e3c462906064016020604051808303816000875af1158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e409190614947565b15610e835760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b6044820152606401610130565b876001600160a01b0316866001600160a01b031614611188576040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a0823190602401602060405180830381865afa158015610ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f079190614947565b905080156111865760405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d9190614947565b90508015610f9d5760405162461bcd60e51b815260040161013090614960565b896001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fff9190614ba5565b15611016576110116000898b8a611548565b611184565b60008a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107a91906149be565b8751909150156111765785518751146110a55760405162461bcd60e51b8152600401610130906149db565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190614947565b905060005b88518110156111735761115c83838b848151811061113557611135614a5e565b60200260200101518b858151811061114f5761114f614a5e565b60200260200101516111a1565b90935091508061116b81614b43565b915050611115565b50505b611182818a8c8b611548565b505b505b505b61119286886119ac565b9b9a5050505050505050505050565b60008060006111fe856310badf4e60e01b8989886040516024016111c793929190614e91565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526122b6565b9050808060200190518101906112149190614aff565b925092505094509492505050565b6000808a116112435760405162461bcd60e51b815260040161013090614dfe565b600061141a600660009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561129b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bf91906149be565b6002546001600160a01b038981169116148015611352575060035460408051636f307dc360e01b815290516001600160a01b03928316928e1691636f307dc39160048083019260209291908290030181865afa158015611323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134791906149be565b6001600160a01b0316145b611367576003546001600160a01b0316611374565b6004546001600160a01b03165b600060029054906101000a90046001600160a01b03166005805461139790614eb8565b80601f01602080910402602001604051908101604052809291908181526020018280546113c390614eb8565b80156114105780601f106113e557610100808354040283529160200191611410565b820191906000526020600020905b8154815290600101906020018083116113f357829003601f168201915b50505050506123aa565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561145c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148091906149be565b6000549091506001600160a01b038084169163022c0d9f918085166201000090920416146114af5760006114b1565b8d5b6000546001600160a01b03858116620100009092041614156114d45760006114d6565b8e5b306000366040518663ffffffff1660e01b81526004016114fa959493929190614e42565b600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b50505050611537888a86612078565b9d9c50505050505050505050505050565b836001600160a01b0316836001600160a01b03161415611567576119a6565b6001600160a01b03841661169d576000546001600160a01b03848116620100009092041614156115ff57600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156115e157600080fd5b505af11580156115f5573d6000803e3d6000fd5b50505050506119a6565b806001600160a01b0316637ff36ab5478461162f600060029054906101000a90046001600160a01b031688612435565b30426040518663ffffffff1660e01b81526004016116509493929190614f37565b60006040518083038185885af115801561166e573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526116979190810190614f6c565b506119a6565b6000546001600160a01b0385811662010000909204161480156116c757506001600160a01b038316155b1561179e576001546000546040516370a0823160e01b81523060048201526001600160a01b0392831692632e1a7d4d9262010000900416906370a0823190602401602060405180830381865afa158015611725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117499190614947565b6040518263ffffffff1660e01b815260040161176791815260200190565b600060405180830381600087803b15801561178157600080fd5b505af1158015611795573d6000803e3d6000fd5b505050506119a6565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156117e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180b9190614947565b9050611818828483612207565b6001600160a01b0385166118c557826001600160a01b03166318cbafe582866118568a600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b8152600401611878959493929190614ff1565b6000604051808303816000875af1158015611897573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118bf9190810190614f6c565b506108df565b6000546001600160a01b03808516916338ed173991849188918b81166201000090920416148061190857506000546001600160a01b038a81166201000090920416145b61192f5760005461192a908b906201000090046001600160a01b03168b6124c2565b611939565b6119398a8a612435565b30426040518663ffffffff1660e01b815260040161195b959493929190614ff1565b6000604051808303816000875af115801561197a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119a29190810190614f6c565b5050505b50505050565b6000806001600160a01b038416611ae057504782811015611a235760405162461bcd60e51b815260206004820152602b60248201527f4d696e696d756d204e4154495645206f757470757420616d6f756e74206e6f7460448201526a1039b0ba34b9b334b2b21760a91b6064820152608401610130565b8015611adb57604051600090339083908381818185875af1925050503d8060008114611a6b576040519150601f19603f3d011682016040523d82523d6000602084013e611a70565b606091505b5050905080611ad95760405162461bcd60e51b815260206004820152602f60248201527f4661696c656420746f207472616e73666572206f7574707574204e415449564560448201526e103a379036b9b39739b2b73232b91760891b6064820152608401610130565b505b611bca565b6040516370a0823160e01b815230600482015284906001600160a01b038216906370a0823190602401602060405180830381865afa158015611b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4a9190614947565b915083821015611bae5760405162461bcd60e51b815260206004820152602960248201527f4d696e696d756d20746f6b656e206f757470757420616d6f756e74206e6f742060448201526839b0ba34b334b2b21760b91b6064820152608401610130565b8115611bc857611bc86001600160a01b0382163384612585565b505b9392505050565b600154604051632e1a7d4d60e01b8152600481018b90526000916001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611c1857600080fd5b505af1158015611c2c573d6000803e3d6000fd5b5050604051635572051560e11b81526001600160a01b038e811660048301528b811660248301528c16925063aae40a2a91508c906044016000604051808303818588803b158015611c7c57600080fd5b505af1158015611c90573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093506001600160a01b038c1692506370a082319150602401602060405180830381865afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d009190614947565b905060008111611d475760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b6044820152606401610130565b60405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db59190614947565b90508015611dd55760405162461bcd60e51b815260040161013090614960565b6115378c8b8a8a8a8a8a6125ba565b6000808a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4991906149be565b9050611e56818c8e612207565b604051637af1e23160e11b81526001600160a01b038e81166004830152602482018e90528b811660448301528c169063f5e3c462906064016020604051808303816000875af1158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed19190614947565b15611f145760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b6044820152606401610130565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a0823190602401602060405180830381865afa158015611f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7f9190614947565b905060008111611fc65760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b6044820152606401610130565b60405163db006a7560e01b8152600481018290526000906001600160a01b038d169063db006a75906024016020604051808303816000875af1158015612010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120349190614947565b905080156120545760405162461bcd60e51b815260040161013090614960565b6120658e8d8c8c8c8c8c8c8b612dd2565b9f9e505050505050505050505050505050565b60006001600160a01b038416612114576007546120b4906001600160a01b0316856120a3858761502d565b6006546001600160a01b0316611548565b81156121035760405141908390600081818185875af1925050503d80600081146120fa576040519150601f19603f3d011682016040523d82523d6000602084013e6120ff565b606091505b5050505b61210d84846119ac565b9050611bca565b811561218157600754600654612138916001600160a01b03908116918591166137a0565b60405141908390600081818185875af1925050503d8060008114612178576040519150601f19603f3d011682016040523d82523d6000602084013e61217d565b606091505b5050505b600754612103906001600160a01b0316856120a3858761502d565b6040516001600160a01b03808516602483015283166044820152606481018290526119a69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261393c565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015612257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227b9190614947565b9050818110156119a65780156122a0576122a06001600160a01b038516846000613a0e565b6119a66001600160a01b03851684600019613a0e565b60606001600160a01b0383163b61231e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610130565b600080846001600160a01b0316846040516123399190615045565b600060405180830381855af49150503d8060008114612374576040519150601f19603f3d011682016040523d82523d6000602084013e612379565b606091505b50915091506123a182826040518060600160405280602781526020016151ca60279139613b23565b95945050505050565b60008060006123b98686613b5c565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091508790604801604051602081830303815290604052805190602001208560405160200161241293929190615061565b60408051601f198184030181529190528051602090910120979650505050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050838160008151811061246e5761246e614a5e565b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106124a2576124a2614a5e565b6001600160a01b0390921660209283029190910190910152905092915050565b604080516003808252608082019092526060916000919060208201848036833701905050905084816000815181106124fc576124fc614a5e565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061253057612530614a5e565b60200260200101906001600160a01b031690816001600160a01b031681525050828160028151811061256457612564614a5e565b6001600160a01b039092166020928302919091019091015290509392505050565b6040516001600160a01b0383166024820152604481018290526125b590849063a9059cbb60e01b906064016121d0565b505050565b600080876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261f91906149be565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268d9190614947565b85519091501561270e5783518551146126b85760405162461bcd60e51b8152600401610130906149db565b60005b855181101561270c576126f583838884815181106126db576126db614a5e565b602002602001015188858151811061114f5761114f614a5e565b90935091508061270481614b43565b9150506126bb565b505b6002546001600160a01b0387811691161480156127d7575060035460408051636f307dc360e01b815290516001600160a01b03928316928c1691636f307dc39160048083019260209291908290030181865afa158015612772573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279691906149be565b6001600160a01b0316146127b5576003546001600160a01b03166127c2565b6004546001600160a01b03165b6001600160a01b0316826001600160a01b0316145b156129e3576000612868876001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561281f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284391906149be565b8c61286386600060029054906101000a90046001600160a01b0316612435565b613c52565b60008151811061287a5761287a614a5e565b60200260200101519050818111156128fa5760405162461bcd60e51b815260206004820152603760248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e207365697a656420636f6c6c61746572616c2e0000000000000000006064820152608401610130565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015612947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296b9190614ba5565b6129dd5760405162461bcd60e51b815260206004820152603b60248201527f4661696c656420746f207472616e73666572206e6f6e2d575f4e41544956452060448201527f746f6b656e73206261636b20746f20666c6173686c656e6465722e00000000006064820152608401610130565b50612dc5565b6000546001600160a01b03838116620100009092041614612bed576001600160a01b038216612a7a57600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a5c57600080fd5b505af1158015612a70573d6000803e3d6000fd5b5050505050612bed565b612a85828783612207565b816001600160a01b0316886001600160a01b03161415612b3e57856001600160a01b0316638803dbee8883612acf86600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b8152600401612af1959493929190614ff1565b6000604051808303816000875af1158015612b10573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b389190810190614f6c565b50612bed565b856001600160a01b03166338ed17398289612b6e86600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b8152600401612b90959493929190614ff1565b6000604051808303816000875af1158015612baf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612bd79190810190614f6c565b506000546201000090046001600160a01b031691505b6000546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015612c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5e9190614947565b871115612ceb5760405162461bcd60e51b815260206004820152604f60248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e20575f4e41544956452065786368616e6765642066726f6d2073656960648201526e3d32b21031b7b63630ba32b930b61760891b608482015260a401610130565b60015460405163a9059cbb60e01b8152336004820152602481018990526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d609190614ba5565b612dc55760405162461bcd60e51b815260206004820152603060248201527f4661696c656420746f207472616e7366657220575f4e4154495645206261636b60448201526f103a3790333630b9b43632b73232b91760811b6064820152608401610130565b5098975050505050505050565b6000886001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190614ba5565b1561305d5760004790506000612ec5886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea791906149be565b6000548e90612863906201000090046001600160a01b031688612435565b600081518110612ed757612ed7614a5e565b6020026020010151905081811115612f575760405162461bcd60e51b815260206004820152603760248201527f5365697a6564204e415449564520636f6c6c61746572616c206e6f7420656e6f60448201527f75676820746f20726570617920666c6173686c6f616e2e0000000000000000006064820152608401610130565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612fa757600080fd5b505af1158015612fbb573d6000803e3d6000fd5b505060015460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b03909116935063a9059cbb925060440190506020604051808303816000875af1158015613012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130369190614ba5565b6130525760405162461bcd60e51b8152600401610130906150aa565b6000925050506106c6565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561309d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c191906149be565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561310b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312f9190614947565b8651909150156131b057845186511461315a5760405162461bcd60e51b8152600401610130906149db565b60005b86518110156131ae57613197838389848151811061317d5761317d614a5e565b602002602001015189858151811061114f5761114f614a5e565b9093509150806131a681614b43565b91505061315d565b505b836001600160a01b0316826001600160a01b031614156133ae576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa15801561320e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132329190614947565b8911156132c35760405162461bcd60e51b815260206004820152605360248201527f546f6b656e20666c6173686c6f616e2072657475726e20616d6f756e7420677260448201527f6561746572207468616e20746f6b656e732065786368616e6765642066726f6d6064820152721039b2b4bd32b21031b7b63630ba32b930b61760691b608482015260a401610130565b60405163a9059cbb60e01b8152336004820152602481018a90526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015613310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133349190614ba5565b6133a65760405162461bcd60e51b815260206004820152603e60248201527f4661696c656420746f20726570617920746f6b656e20666c6173686c6f616e2060448201527f6f6e20626f72726f7720286e6f6e2d575f4e41544956452920736964652e00006064820152608401610130565b5090506106c6565b6000613433896001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341591906149be565b6000548f90612863906201000090046001600160a01b031689612435565b60008151811061344557613445614a5e565b60200260200101519050600060029054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b0316146135dc57613488838984612207565b826001600160a01b03168b6001600160a01b0316141561354157876001600160a01b0316638803dbee82846134d287600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b81526004016134f4959493929190614ff1565b6000604051808303816000875af1158015613513573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261353b9190810190614f6c565b506135dc565b876001600160a01b03166338ed1739838361357187600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b8152600401613593959493929190614ff1565b6000604051808303816000875af11580156135b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135da9190810190614f6c565b505b6000546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015613629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364d9190614947565b8111156136d35760405162461bcd60e51b815260206004820152604860248201527f4e6f7420656e6f75676820575f4e41544956452065786368616e67656420667260448201527f6f6d207365697a656420636f6c6c61746572616c20746f20726570617920666c60648201526730b9b43637b0b71760c11b608482015260a401610130565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015613724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137489190614ba5565b6137645760405162461bcd60e51b8152600401610130906150aa565b826001600160a01b03168b6001600160a01b031614613794576000546201000090046001600160a01b0316613796565b825b93505050506106c6565b6001600160a01b0383166137b357505050565b6000546001600160a01b038481166201000090920416141561382957600154604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561381557600080fd5b505af11580156119a2573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015283906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138969190614947565b90506138a3828483612207565b826001600160a01b0316634a25d94a85836138d389600060029054906101000a90046001600160a01b0316612435565b30426040518663ffffffff1660e01b81526004016138f5959493929190614ff1565b6000604051808303816000875af1158015613914573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108df9190810190614f6c565b6000613991826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ddf9092919063ffffffff16565b8051909150156125b557808060200190518101906139af9190614ba5565b6125b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610130565b801580613a885750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015613a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a869190614947565b155b613af35760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610130565b6040516001600160a01b0383166024820152604481018290526125b590849063095ea7b360e01b906064016121d0565b60608315613b32575081611bca565b825115613b425782518084602001fd5b8160405162461bcd60e51b81526004016101309190615121565b600080826001600160a01b0316846001600160a01b03161415613bcd5760405162461bcd60e51b815260206004820152602360248201527f50616e63616b654c6962726172793a204944454e544943414c5f41444452455360448201526253455360e81b6064820152608401610130565b826001600160a01b0316846001600160a01b031610613bed578284613bf0565b83835b90925090506001600160a01b038216613c4b5760405162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a205a45524f5f41444452455353000000006044820152606401610130565b9250929050565b6060600282511015613ca65760405162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a20494e56414c49445f50415448000000006044820152606401610130565b81516001600160401b03811115613cbf57613cbf61423f565b604051908082528060200260200182016040528015613ce8578160200160208202803683370190505b509050828160018351613cfb9190615134565b81518110613d0b57613d0b614a5e565b602002602001018181525050600060018351613d279190615134565b90505b8015611bc857600080613d7a8786613d43600187615134565b81518110613d5357613d53614a5e565b6020026020010151878681518110613d6d57613d6d614a5e565b6020026020010151613df6565b91509150613da2848481518110613d9357613d93614a5e565b60200260200101518383613f2b565b84613dae600186615134565b81518110613dbe57613dbe614a5e565b60200260200101818152505050508080613dd79061514b565b915050613d2a565b6060613dee848460008561404d565b949350505050565b6000806000613e058585613b5c565b5060405163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291925060009182919089169063e6a4390590604401602060405180830381865afa158015613e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e8191906149be565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ee29190615179565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613f19578082613f1c565b81815b90999098509650505050505050565b6000808411613f8f5760405162461bcd60e51b815260206004820152602a60248201527f50616e63616b654c6962726172793a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b6064820152608401610130565b600083118015613f9f5750600082115b613ffa5760405162461bcd60e51b815260206004820152602660248201527f50616e63616b654c6962726172793a20494e53554646494349454e545f4c495160448201526555494449545960d01b6064820152608401610130565b60006140068585614cc5565b614012906103e8614cc5565b905060006140208685615134565b61402c906103e5614cc5565b90506140388183614cfa565b61404390600161502d565b9695505050505050565b6060824710156140ae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610130565b6001600160a01b0385163b6141055760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610130565b600080866001600160a01b031685876040516141219190615045565b60006040518083038185875af1925050503d806000811461415e576040519150601f19603f3d011682016040523d82523d6000602084013e614163565b606091505b5091509150614173828286613b23565b979650505050505050565b82805461418a90614eb8565b90600052602060002090601f0160209004810192826141ac57600085556141f2565b82601f106141c557805160ff19168380011785556141f2565b828001600101855582156141f2579182015b828111156141f25782518255916020019190600101906141d7565b506141fe929150614202565b5090565b5b808211156141fe5760008155600101614203565b6001600160a01b038116811461422c57600080fd5b50565b803561423a81614217565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561427d5761427d61423f565b604052919050565b60006001600160401b0382111561429e5761429e61423f565b5060051b60200190565b600082601f8301126142b957600080fd5b813560206142ce6142c983614285565b614255565b82815260059290921b840181019181810190868411156142ed57600080fd5b8286015b8481101561431157803561430481614217565b83529183019183016142f1565b509695505050505050565b600082601f83011261432d57600080fd5b81356001600160401b038111156143465761434661423f565b614359601f8201601f1916602001614255565b81815284602083860101111561436e57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261439c57600080fd5b813560206143ac6142c983614285565b82815260059290921b840181019181810190868411156143cb57600080fd5b8286015b848110156143115780356001600160401b038111156143ee5760008081fd5b6143fc8986838b010161431c565b8452509183019183016143cf565b600080600080600080600080610100898b03121561442757600080fd5b883561443281614217565b9750602089013561444281614217565b9650604089013561445281614217565b955060608901359450608089013561446981614217565b935060a089013561447981614217565b925060c08901356001600160401b038082111561449557600080fd5b6144a18c838d016142a8565b935060e08b01359150808211156144b757600080fd5b506144c48b828c0161438b565b9150509295985092959890939650565b6000806000806000608086880312156144ec57600080fd5b85356144f781614217565b9450602086013593506040860135925060608601356001600160401b038082111561452157600080fd5b818801915088601f83011261453557600080fd5b81358181111561454457600080fd5b89602082850101111561455657600080fd5b9699959850939650602001949392505050565b600080600080600060a0868803121561458157600080fd5b853561458c81614217565b9450602086013561459c81614217565b935060408601356145ac81614217565b925060608601356145bc81614217565b915060808601356001600160401b038111156145d757600080fd5b6145e38882890161431c565b9150509295509295909350565b60008060008060008060008060008060006101608c8e03121561461257600080fd5b61461b8c61422f565b9a5060208c0135995061463060408d0161422f565b985061463e60608d0161422f565b975060808c0135965061465360a08d0161422f565b955061466160c08d0161422f565b945061466f60e08d0161422f565b93506001600160401b03806101008e0135111561468b57600080fd5b61469c8e6101008f01358f016142a8565b9350806101208e013511156146b057600080fd5b506146c28d6101208e01358e0161438b565b91506101408c013590509295989b509295989b9093969950565b60008060008060008060008060006101208a8c0312156146fb57600080fd5b893561470681614217565b985060208a0135975060408a013561471d81614217565b965061472b60608b0161422f565b955060808a0135945061474060a08b0161422f565b935061474e60c08b0161422f565b925060e08a01356001600160401b038082111561476a57600080fd5b6147768d838e016142a8565b93506101008c013591508082111561478d57600080fd5b5061479a8c828d0161438b565b9150509295985092959850929598565b600080600080608085870312156147c057600080fd5b84356147cb81614217565b93506020850135925060408501356147e281614217565b915060608501356001600160401b038111156147fd57600080fd5b6148098782880161431c565b91505092959194509250565b6000806000806000806000806000806101408b8d03121561483557600080fd5b61483e8b61422f565b995060208b0135985061485360408c0161422f565b975061486160608c0161422f565b965060808b0135955061487660a08c0161422f565b945061488460c08c0161422f565b935060e08b01356001600160401b03808211156148a057600080fd5b6148ac8e838f016142a8565b94506101008d01359150808211156148c357600080fd5b506148d08d828e0161438b565b9250506101208b013590509295989b9194979a5092959850565b60208082526038908201527f526570617920616d6f756e7420287472616e73616374696f6e2076616c75652960408201527f206d7573742062652067726561746572207468616e20302e0000000000000000606082015260800190565b60006020828403121561495957600080fd5b5051919050565b602080825260409082018190527f4572726f722063616c6c696e672072656465656d696e67207365697a65642063908201527f546f6b656e3a206572726f7220636f6465206e6f7420657175616c20746f2030606082015260800190565b6000602082840312156149d057600080fd5b8151611bca81614217565b6020808252605b908201527f49526564656d7074696f6e537472617465677920636f6e74726163742061727260408201527f617920616e64207374726174656779206461746120627974657320617272617960608201527f206d6e75737420746865207468652073616d65206c656e6774682e0000000000608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015614a8f578181015183820152602001614a77565b838111156119a65750506000910152565b60008151808452614ab8816020860160208601614a74565b601f01601f19169290920160200192915050565b6001600160a01b038581168252602082018590528316604082015260806060820181905260009061404390830184614aa0565b60008060408385031215614b1257600080fd5b8251614b1d81614217565b6020939093015192949293505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415614b5757614b57614b2d565b5060010190565b60008085851115614b6e57600080fd5b83861115614b7b57600080fd5b5050820193919092039150565b600060208284031215614b9a57600080fd5b8135611bca81614217565b600060208284031215614bb757600080fd5b81518015158114611bca57600080fd5b600082601f830112614bd857600080fd5b81356020614be86142c983614285565b82815260059290921b84018101918181019086841115614c0757600080fd5b8286015b84811015614311578035614c1e81614217565b8352918301918301614c0b565b60008060008060008060008060006101208a8c031215614c4a57600080fd5b8935614c5581614217565b985060208a0135975060408a0135614c6c81614217565b9650614c7a60608b0161422f565b955060808a01359450614c8f60a08b0161422f565b9350614c9d60c08b0161422f565b925060e08a01356001600160401b0380821115614cb957600080fd5b6147768d838e01614bc7565b6000816000190483118215151615614cdf57614cdf614b2d565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614d0957614d09614ce4565b500490565b600082614d1d57614d1d614ce4565b500690565b6000806000806000806000806000806101408b8d031215614d4257600080fd5b614d4b8b61422f565b995060208b01359850614d6060408c0161422f565b9750614d6e60608c0161422f565b965060808b01359550614d8360a08c0161422f565b9450614d9160c08c0161422f565b9350614d9f60e08c0161422f565b92506101008b01356001600160401b0380821115614dbc57600080fd5b614dc88e838f01614bc7565b93506101208d0135915080821115614ddf57600080fd5b50614dec8d828e0161438b565b9150509295989b9194979a5092959850565b60208082526024908201527f526570617920616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b858152602081018590526001600160a01b03841660408201526080606082018190528101829052818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60018060a01b03841681528260208201526060604082015260006123a16060830184614aa0565b600181811c90821680614ecc57607f821691505b60208210811415614eed57634e487b7160e01b600052602260045260246000fd5b50919050565b600081518084526020808501945080840160005b83811015614f2c5781516001600160a01b031687529582019590820190600101614f07565b509495945050505050565b848152608060208201526000614f506080830186614ef3565b6001600160a01b03949094166040830152506060015292915050565b60006020808385031215614f7f57600080fd5b82516001600160401b03811115614f9557600080fd5b8301601f81018513614fa657600080fd5b8051614fb46142c982614285565b81815260059190911b82018301908381019087831115614fd357600080fd5b928401925b8284101561417357835182529284019290840190614fd8565b85815284602082015260a06040820152600061501060a0830186614ef3565b6001600160a01b0394909416606083015250608001529392505050565b6000821982111561504057615040614b2d565b500190565b60008251615057818460208701614a74565b9190910192915050565b60ff60f81b81526bffffffffffffffffffffffff198460601b1660018201528260158201526000825161509b816035850160208701614a74565b91909101603501949350505050565b60208082526051908201527f4661696c656420746f20726570617920556e697377617020666c6173686c6f6160408201527f6e207769746820575f4e41544956452065786368616e6765642066726f6d207360608201527032b4bd32b21031b7b63630ba32b930b61760791b608082015260a00190565b602081526000611bca6020830184614aa0565b60008282101561514657615146614b2d565b500390565b60008161515a5761515a614b2d565b506000190190565b80516001600160701b038116811461423a57600080fd5b60008060006060848603121561518e57600080fd5b61519784615162565b92506151a560208501615162565b9150604084015163ffffffff811681146151be57600080fd5b80915050925092509256fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220039dd7ee05ff92c63257de5a4ab0b3fca7509912ca85e2a5c3d97204e92977b064736f6c634300080b0033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "details": "Do not transfer NATIVE or tokens directly to this address. Only send NATIVE here when using a method, and only approve tokens for transfer to here when using a method. Direct NATIVE transfers will be rejected and direct token transfers will be lost.",
    "kind": "dev",
    "methods": {
      "pancakeCall(address,uint256,uint256,bytes)": {
        "details": "Callback function for PCS flashloans."
      },
      "redeemCustomCollateral(address,uint256,address,bytes)": {
        "details": "Redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap). Public visibility because we have to call this function externally if called from a payable FuseSafeLiquidator function (for some reason delegatecall fails when called with msg.value > 0)."
      },
      "safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20Collateral": "The cErc20 collateral contract to be liquidated.",
          "cEther": "The borrowed cEther contract to repay.",
          "exchangeSeizedTo": "If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).",
          "minOutputAmount": "The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2Router": "The UniswapV2Router to use to convert the seized underlying collateral."
        }
      },
      "safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20": "The borrowed cErc20 to repay.",
          "cTokenCollateral": "The cToken collateral to be liquidated.",
          "exchangeSeizedTo": "If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).",
          "minOutputAmount": "The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "repayAmount": "The amount to repay to liquidate the unhealthy loan.",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2Router": "The UniswapV2Router to use to convert the seized underlying collateral."
        }
      },
      "safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20": "The borrowed CErc20 contract to repay.",
          "cTokenCollateral": "The cToken collateral contract to be liquidated.",
          "exchangeProfitTo": "If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).",
          "minProfitAmount": "The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "repayAmount": "The amount to repay to liquidate the unhealthy loan.",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2RouterForBorrow": "The UniswapV2Router to use to convert the NATIVE to the underlying borrow (and flashloan the underlying borrow for NATIVE).",
          "uniswapV2RouterForCollateral": "The UniswapV2Router to use to convert the underlying collateral to NATIVE."
        }
      },
      "uniswapV2Call(address,uint256,uint256,bytes)": {
        "details": "Callback function for Uniswap flashloans."
      }
    },
    "stateVariables": {
      "BTC_TOKEN": {
        "details": "Wrapped BTC token to use for flash loans"
      },
      "PAIR_INIT_HASH_CODE": {
        "details": "Wrapped BTC token to use for flash loans"
      },
      "STABLE_TOKEN": {
        "details": "Stable token to use for flash loans"
      },
      "UNISWAP_V2_ROUTER_02": {
        "details": "UniswapV2Router02 contract object."
      },
      "UNISWAP_V2_ROUTER_02_ADDRESS": {
        "details": "UniswapV2Router02 contract address."
      },
      "W_NATIVE": {
        "details": "W_NATIVE contract object."
      },
      "W_NATIVE_ADDRESS": {
        "details": "W_NATIVE contract address."
      },
      "_liquidatorProfitExchangeSource": {
        "details": "Cached liquidator profit exchange source. ERC20 token address or the zero address for NATIVE. For use in `safeLiquidateToTokensWithFlashLoan`/`safeLiquidateToEthWithFlashLoan` after it is set by `postFlashLoanTokens`/`postFlashLoanWeth`."
      }
    },
    "title": "FuseSafeLiquidator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])": {
        "notice": "Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable)."
      },
      "safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])": {
        "notice": "Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable)."
      },
      "safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)": {
        "notice": "Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in NATIVE profit is seized."
      }
    },
    "notice": "FuseSafeLiquidator safely liquidates unhealthy borrowers (with flashloan support).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 210,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8783,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "W_NATIVE_ADDRESS",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8787,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "W_NATIVE",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IW_NATIVE)54656"
      },
      {
        "astId": 8790,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "UNISWAP_V2_ROUTER_02_ADDRESS",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8793,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "STABLE_TOKEN",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8796,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "BTC_TOKEN",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8799,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "PAIR_INIT_HASH_CODE",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      },
      {
        "astId": 8803,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "UNISWAP_V2_ROUTER_02",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IUniswapV2Router02)38175"
      },
      {
        "astId": 8806,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "_liquidatorProfitExchangeSource",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Router02)38175": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IW_NATIVE)54656": {
        "encoding": "inplace",
        "label": "contract IW_NATIVE",
        "numberOfBytes": "20"
      }
    }
  }
}