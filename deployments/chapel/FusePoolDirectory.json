{
  "address": "0xBb09e65b6f03196A328369c9C352Fa920379022c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "admins",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "AdminWhitelistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct FusePoolDirectory.FusePool",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "name": "PoolRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "admins",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "_editAdminWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "deployers",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "_editDeployerWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enforce",
          "type": "bool"
        }
      ],
      "name": "_setDeployerWhitelistEnforcement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "bookmarkPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enforceWhitelist",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "closeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationIncentive",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "priceOracle",
          "type": "address"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deployerWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enforceDeployerWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBookmarks",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPoolsByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPublicPools",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "whitelistedAdmin",
          "type": "bool"
        }
      ],
      "name": "getPublicPoolsByVerification",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enforceDeployerWhitelist",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_deployerWhitelist",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockPosted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestampPosted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setPoolName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe260efd034d615c9d51be2d931c2b29d1afe5d81d719ffe89e6b32a1397dbc13",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 12,
    "gasUsed": "3257176",
    "logsBloom": "0x
    "blockHash": "0xc12074b9d1d8d645f74ef5731c43779dab270139b7527f2eeb4671061312bbc5",
    "transactionHash": "0xe260efd034d615c9d51be2d931c2b29d1afe5d81d719ffe89e6b32a1397dbc13",
    "logs": [],
    "blockNumber": 16545832,
    "cumulativeGasUsed": "5768651",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "8cc1330d9e18cc1f2be949867affeee6",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FusePoolDirectory.FusePool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"_editAdminWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"deployers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"_editDeployerWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enforce\",\"type\":\"bool\"}],\"name\":\"_setDeployerWhitelistEnforcement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"bookmarkPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enforceWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"closeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationIncentive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployerWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enforceDeployerWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBookmarks\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPoolsByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"whitelistedAdmin\",\"type\":\"bool\"}],\"name\":\"getPublicPoolsByVerification\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enforceDeployerWhitelist\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_deployerWhitelist\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setPoolName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"events\":{\"AdminWhitelistUpdated(address[],bool)\":{\"details\":\"Event emitted when the admin whitelist is updated.\"},\"PoolRegistered(uint256,(string,address,address,uint256,uint256))\":{\"details\":\"Emitted when a new Fuse pool is added to the directory.\"}},\"kind\":\"dev\",\"methods\":{\"_editAdminWhitelist(address[],bool)\":{\"details\":\"Adds/removes Ethereum accounts to the admin whitelist.\",\"params\":{\"admins\":\"Array of Ethereum accounts to be whitelisted.\",\"status\":\"Whether to add or remove the accounts.\"}},\"_editDeployerWhitelist(address[],bool)\":{\"details\":\"Adds/removes Ethereum accounts to the deployer whitelist.\",\"params\":{\"deployers\":\"Array of Ethereum accounts to be whitelisted.\",\"status\":\"Whether to add or remove the accounts.\"}},\"_setDeployerWhitelistEnforcement(bool)\":{\"details\":\"Controls if the deployer whitelist is to be enforced.\",\"params\":{\"enforce\":\"Boolean indicating if the deployer whitelist is to be enforced.\"}},\"deployPool(string,address,bool,uint256,uint256,address)\":{\"details\":\"Deploys a new Fuse pool and adds to the directory.\",\"params\":{\"closeFactor\":\"The pool's close factor (scaled by 1e18).\",\"enforceWhitelist\":\"Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\",\"implementation\":\"The Comptroller implementation contract address.\",\"liquidationIncentive\":\"The pool's liquidation incentive (scaled by 1e18).\",\"name\":\"The name of the pool.\",\"priceOracle\":\"The pool's PriceOracle contract address.\"},\"returns\":{\"_0\":\"The index of the registered Fuse pool and the Unitroller proxy address.\"}},\"getAllPools()\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive.\"},\"getPublicPools()\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive.\"},\"getPublicPoolsByVerification(bool)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive.\"},\"initialize(bool,address[])\":{\"details\":\"Initializes a deployer whitelist if desired.\",\"params\":{\"_deployerWhitelist\":\"Array of Ethereum accounts to be whitelisted.\",\"_enforceDeployerWhitelist\":\"Boolean indicating if the deployer whitelist is to be enforced.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_bookmarks\":{\"details\":\"Maps Ethereum accounts to arrays of Fuse pool Comptroller proxy contract addresses.\"},\"_poolsByAccount\":{\"details\":\"Maps Ethereum accounts to arrays of Fuse pool indexes.\"},\"adminWhitelist\":{\"details\":\"Maps Ethereum accounts to booleans indicating if they are a whitelisted admin.\"},\"deployerWhitelist\":{\"details\":\"Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\"},\"enforceDeployerWhitelist\":{\"details\":\"Booleans indicating if the deployer whitelist is enforced.\"},\"poolExists\":{\"details\":\"Maps Fuse pool Comptroller addresses to bools indicating if they have been registered via the directory.\"},\"pools\":{\"details\":\"Array of Fuse interest rate pools.\"}},\"title\":\"FusePoolDirectory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bookmarkPool(address)\":{\"notice\":\"Bookmarks a Fuse pool Unitroller (Comptroller proxy) contract addresses.\"},\"getAllPools()\":{\"notice\":\"Returns arrays of all Fuse pools' data.\"},\"getBookmarks(address)\":{\"notice\":\"Returns arrays of Fuse pool Unitroller (Comptroller proxy) contract addresses bookmarked by `account`.\"},\"getPoolsByAccount(address)\":{\"notice\":\"Returns arrays of Fuse pool indexes and data created by `account`.\"},\"getPublicPools()\":{\"notice\":\"Returns arrays of all public Fuse pool indexes and data.\"},\"getPublicPoolsByVerification(bool)\":{\"notice\":\"Returns arrays of all public Fuse pool indexes and data with whitelisted admins.\"},\"setPoolName(uint256,string)\":{\"notice\":\"Modify existing Fuse pool name.\"}},\"notice\":\"FusePoolDirectory is a directory for Fuse interest rate pools.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FusePoolDirectory.sol\":\"FusePoolDirectory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2Upgradeable {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xa74666c992a3899fee9ae3b69ef08988e1d2b4f3a2d7f1544e821a3d4107412c\",\"license\":\"MIT\"},\"contracts/FusePoolDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\\\";\\n\\n\\nimport \\\"./external/compound/IComptroller.sol\\\";\\nimport \\\"./external/compound/IUnitroller.sol\\\";\\nimport \\\"./external/compound/IPriceOracle.sol\\\";\\nimport \\\"./compound/Unitroller.sol\\\";\\n\\n/**\\n * @title FusePoolDirectory\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice FusePoolDirectory is a directory for Fuse interest rate pools.\\n */\\ncontract FusePoolDirectory is OwnableUpgradeable {\\n    /**\\n     * @dev Initializes a deployer whitelist if desired.\\n     * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\\n     * @param _deployerWhitelist Array of Ethereum accounts to be whitelisted.\\n     */\\n    function initialize(bool _enforceDeployerWhitelist, address[] memory _deployerWhitelist) public initializer {\\n        __Ownable_init();\\n        enforceDeployerWhitelist = _enforceDeployerWhitelist;\\n        for (uint256 i = 0; i < _deployerWhitelist.length; i++) deployerWhitelist[_deployerWhitelist[i]] = true;\\n    }\\n\\n    /**\\n     * @dev Struct for a Fuse interest rate pool.\\n     */\\n    struct FusePool {\\n        string name;\\n        address creator;\\n        address comptroller;\\n        uint256 blockPosted;\\n        uint256 timestampPosted;\\n    }\\n\\n    /**\\n     * @dev Array of Fuse interest rate pools.\\n     */\\n    FusePool[] public pools;\\n\\n    /**\\n     * @dev Maps Ethereum accounts to arrays of Fuse pool indexes.\\n     */\\n    mapping(address => uint256[]) private _poolsByAccount;\\n\\n    /**\\n     * @dev Maps Fuse pool Comptroller addresses to bools indicating if they have been registered via the directory.\\n     */\\n    mapping(address => bool) public poolExists;\\n\\n    /**\\n     * @dev Emitted when a new Fuse pool is added to the directory.\\n     */\\n    event PoolRegistered(uint256 index, FusePool pool);\\n\\n    /**\\n     * @dev Booleans indicating if the deployer whitelist is enforced.\\n     */\\n    bool public enforceDeployerWhitelist;\\n\\n    /**\\n     * @dev Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\\n     */\\n    mapping(address => bool) public deployerWhitelist;\\n\\n    /**\\n     * @dev Controls if the deployer whitelist is to be enforced.\\n     * @param enforce Boolean indicating if the deployer whitelist is to be enforced.\\n     */\\n    function _setDeployerWhitelistEnforcement(bool enforce) external onlyOwner {\\n        enforceDeployerWhitelist = enforce;\\n    }\\n\\n    /**\\n     * @dev Adds/removes Ethereum accounts to the deployer whitelist.\\n     * @param deployers Array of Ethereum accounts to be whitelisted.\\n     * @param status Whether to add or remove the accounts.\\n     */\\n    function _editDeployerWhitelist(address[] calldata deployers, bool status) external onlyOwner {\\n        require(deployers.length > 0, \\\"No deployers supplied.\\\");\\n        for (uint256 i = 0; i < deployers.length; i++) deployerWhitelist[deployers[i]] = status;\\n    }\\n\\n    /**\\n     * @dev Adds a new Fuse pool to the directory (without checking msg.sender).\\n     * @param name The name of the pool.\\n     * @param comptroller The pool's Comptroller proxy contract address.\\n     * @return The index of the registered Fuse pool.\\n     */\\n    function _registerPool(string memory name, address comptroller) internal returns (uint256) {\\n        require(!poolExists[comptroller], \\\"Pool already exists in the directory.\\\");\\n        require(!enforceDeployerWhitelist || deployerWhitelist[msg.sender], \\\"Sender is not on deployer whitelist.\\\");\\n        require(bytes(name).length <= 100, \\\"No pool name supplied.\\\");\\n        FusePool memory pool = FusePool(name, msg.sender, comptroller, block.number, block.timestamp);\\n        pools.push(pool);\\n        _poolsByAccount[msg.sender].push(pools.length - 1);\\n        poolExists[comptroller] = true;\\n        emit PoolRegistered(pools.length - 1, pool);\\n        return pools.length - 1;\\n    }\\n\\n    /**\\n     * @dev Deploys a new Fuse pool and adds to the directory.\\n     * @param name The name of the pool.\\n     * @param implementation The Comptroller implementation contract address.\\n     * @param enforceWhitelist Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\\n     * @param closeFactor The pool's close factor (scaled by 1e18).\\n     * @param liquidationIncentive The pool's liquidation incentive (scaled by 1e18).\\n     * @param priceOracle The pool's PriceOracle contract address.\\n     * @return The index of the registered Fuse pool and the Unitroller proxy address.\\n     */\\n    function deployPool(string memory name, address implementation, bool enforceWhitelist, uint256 closeFactor, uint256 liquidationIncentive, address priceOracle) external returns (uint256, address) {\\n        // Input validation\\n        require(implementation != address(0), \\\"No Comptroller implementation contract address specified.\\\");\\n        require(priceOracle != address(0), \\\"No PriceOracle contract address specified.\\\");\\n\\n        // Deploy CEtherDelegator using msg.sender, underlying, and block.number as a salt\\n//        bytes32 salt = keccak256(abi.encodePacked(msg.sender, address(0), block.number));\\n//\\n\\n//        address proxy = Create2Upgradeable.deploy(0, salt, cEtherDelegatorCreationCode);\\n\\n        // Deploy Unitroller using msg.sender, name, and block.number as a salt\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, name, block.number));\\n        bytes memory unitrollerCreationCode = abi.encodePacked(type(Unitroller).creationCode);\\n        address proxy = Create2Upgradeable.deploy(0, salt, unitrollerCreationCode);\\n\\n        // Setup Unitroller\\n        IUnitroller unitroller = IUnitroller(proxy);\\n        require(unitroller._setPendingImplementation(implementation) == 0, \\\"Failed to set pending implementation on Unitroller.\\\"); // Checks Comptroller implementation whitelist\\n        IComptroller comptrollerImplementation = IComptroller(implementation);\\n        comptrollerImplementation._become(unitroller);\\n        IComptroller comptrollerProxy = IComptroller(proxy);\\n\\n        // Set pool parameters\\n        require(comptrollerProxy._setCloseFactor(closeFactor) == 0, \\\"Failed to set pool close factor.\\\");\\n        require(comptrollerProxy._setLiquidationIncentive(liquidationIncentive) == 0, \\\"Failed to set pool liquidation incentive.\\\");\\n        require(comptrollerProxy._setPriceOracle(IPriceOracle(priceOracle)) == 0, \\\"Failed to set pool price oracle.\\\");\\n\\n        // Whitelist\\n        if (enforceWhitelist) require(comptrollerProxy._setWhitelistEnforcement(true) == 0, \\\"Failed to enforce supplier/borrower whitelist.\\\");\\n\\n        // Enable auto-implementation\\n        require(comptrollerProxy._toggleAutoImplementations(true) == 0, \\\"Failed to enable pool auto implementations.\\\");\\n\\n        // Make msg.sender the admin\\n        require(unitroller._setPendingAdmin(msg.sender) == 0, \\\"Failed to set pending admin on Unitroller.\\\");\\n\\n        // Register the pool with this FusePoolDirectory\\n        return (_registerPool(name, proxy), proxy);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all Fuse pools' data.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getAllPools() external view returns (FusePool[] memory) {\\n        return pools;\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all public Fuse pool indexes and data.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getPublicPools() external view returns (uint256[] memory, FusePool[] memory) {\\n        uint256 arrayLength = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            try IComptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n            } catch { }\\n\\n            arrayLength++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](arrayLength);\\n        FusePool[] memory publicPools = new FusePool[](arrayLength);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            try IComptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n            } catch { }\\n\\n            indexes[index] = i;\\n            publicPools[index] = pools[i];\\n            index++;\\n        }\\n\\n        return (indexes, publicPools);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of Fuse pool indexes and data created by `account`.\\n     */\\n    function getPoolsByAccount(address account) external view returns (uint256[] memory, FusePool[] memory) {\\n        uint256[] memory indexes = new uint256[](_poolsByAccount[account].length);\\n        FusePool[] memory accountPools = new FusePool[](_poolsByAccount[account].length);\\n\\n        for (uint256 i = 0; i < _poolsByAccount[account].length; i++) {\\n            indexes[i] = _poolsByAccount[account][i];\\n            accountPools[i] = pools[_poolsByAccount[account][i]];\\n        }\\n\\n        return (indexes, accountPools);\\n    }\\n\\n    /**\\n     * @dev Maps Ethereum accounts to arrays of Fuse pool Comptroller proxy contract addresses.\\n     */\\n    mapping(address => address[]) private _bookmarks;\\n\\n    /**\\n     * @notice Returns arrays of Fuse pool Unitroller (Comptroller proxy) contract addresses bookmarked by `account`.\\n     */\\n    function getBookmarks(address account) external view returns (address[] memory) {\\n        return _bookmarks[account];\\n    }\\n\\n    /**\\n     * @notice Bookmarks a Fuse pool Unitroller (Comptroller proxy) contract addresses.\\n     */\\n    function bookmarkPool(address comptroller) external {\\n        _bookmarks[msg.sender].push(comptroller);\\n    }\\n\\n    /**\\n     * @notice Modify existing Fuse pool name.\\n     */\\n    function setPoolName(uint256 index, string calldata name) external {\\n        IComptroller _comptroller = IComptroller(pools[index].comptroller);\\n        require(msg.sender == _comptroller.admin() && _comptroller.adminHasRights() || msg.sender == owner());\\n        pools[index].name = name;\\n    }\\n\\n    /**\\n     * @dev Maps Ethereum accounts to booleans indicating if they are a whitelisted admin.\\n     */\\n    mapping(address => bool) public adminWhitelist;\\n\\n    /**\\n     * @dev Event emitted when the admin whitelist is updated.\\n     */\\n    event AdminWhitelistUpdated(address[] admins, bool status);\\n\\n    /**\\n     * @dev Adds/removes Ethereum accounts to the admin whitelist.\\n     * @param admins Array of Ethereum accounts to be whitelisted.\\n     * @param status Whether to add or remove the accounts.\\n     */\\n    function _editAdminWhitelist(address[] calldata admins, bool status) external onlyOwner {\\n        require(admins.length > 0, \\\"No admins supplied.\\\");\\n        for (uint256 i = 0; i < admins.length; i++) adminWhitelist[admins[i]] = status;\\n        emit AdminWhitelistUpdated(admins, status);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all public Fuse pool indexes and data with whitelisted admins.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getPublicPoolsByVerification(bool whitelistedAdmin) external view returns (uint256[] memory, FusePool[] memory) {\\n        uint256 arrayLength = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n            try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n\\n                try comptroller.admin() returns (address admin) {\\n                    if (whitelistedAdmin != adminWhitelist[admin]) continue;\\n                } catch { }\\n            } catch { }\\n\\n            arrayLength++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](arrayLength);\\n        FusePool[] memory publicPools = new FusePool[](arrayLength);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n            try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n\\n                try comptroller.admin() returns (address admin) {\\n                    if (whitelistedAdmin != adminWhitelist[admin]) continue;\\n                } catch { }\\n            } catch { }\\n\\n            indexes[index] = i;\\n            publicPools[index] = pools[i];\\n            index++;\\n        }\\n\\n        return (indexes, publicPools);\\n    }\\n}\\n\",\"keccak256\":\"0xde2cbf495b6016fd087c0d64242da6873891fe2a25925340256e94e32067c2d3\",\"license\":\"UNLICENSED\"},\"contracts/compound/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Returns a boolean indicating if the sender has admin rights\\n     */\\n    function hasAdminRights() internal view returns (bool) {\\n        ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\n        return (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) || (msg.sender == address(fuseAdmin) && comptrollerStorage.fuseAdminHasRights());\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_,\\n                        uint256 reserveFactorMantissa_,\\n                        uint256 adminFeeMantissa_) public {\\n        require(msg.sender == address(fuseAdmin), \\\"only Fuse admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // Set reserve factor\\n        err = _setReserveFactorFresh(reserveFactorMantissa_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting reserve factor failed\\\");\\n\\n        // Set admin fee\\n        err = _setAdminFeeFresh(adminFeeMantissa_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting admin fee failed\\\");\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n    \\n    /**\\n     * @dev Returns latest pending Fuse fee (to be set with `_setFuseFeeFresh`)\\n     */\\n    function getPendingFuseFeeFromAdmin() internal view returns (uint) {\\n        return fuseAdmin.interestFeeRate();\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) override external nonReentrant(false) returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) override external nonReentrant(false) returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) override external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) override external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) override external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) override external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) override external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() override external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)));\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() override external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)), reserveFactorMantissa + fuseFeeMantissa + adminFeeMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() override external nonReentrant(false) returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) override external nonReentrant(false) returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) override public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() override public nonReentrant(false) returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() override public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)));\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() override external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() override virtual public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumber == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)));\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumber);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        return finishInterestAccrual(currentBlockNumber, cashPrior, borrowRateMantissa, blockDelta);\\n    }\\n\\n    /**\\n     * @dev Split off from `accrueInterest` to avoid \\\"stack too deep\\\" error\\\".\\n     */\\n    function finishInterestAccrual(uint currentBlockNumber, uint cashPrior, uint borrowRateMantissa, uint blockDelta) private returns (uint) {\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  totalFuseFeesNew = interestAccumulated * fuseFee + totalFuseFees\\n         *  totalAdminFeesNew = interestAccumulated * adminFee + totalAdminFees\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        uint interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, totalBorrows);\\n        uint totalBorrowsNew = add_(interestAccumulated, totalBorrows);\\n        uint totalReservesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, totalReserves);\\n        uint totalFuseFeesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: fuseFeeMantissa}), interestAccumulated, totalFuseFees);\\n        uint totalAdminFeesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: adminFeeMantissa}), interestAccumulated, totalAdminFees);\\n        uint borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndex, borrowIndex);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n        totalFuseFees = totalFuseFeesNew;\\n        totalAdminFees = totalAdminFeesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant(false) returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        // Check max supply\\n        // unused function\\n        /* allowed = comptroller.mintWithinLimits(address(this), vars.exchangeRateMantissa, accountTokens[minter], mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        } */\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        vars.totalSupplyNew = add_(totalSupply, vars.mintTokens);\\n\\n        vars.accountTokensNew = add_(accountTokens[minter], vars.mintTokens);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        uint cashPrior = getCashPrior();\\n\\n        if (cashPrior < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        // Check min borrow for this user for this asset\\n        allowed = comptroller.borrowWithinLimits(address(this), vars.accountBorrowsNew);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant(false) returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant(false) returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant(false) returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) override external nonReentrant(true) returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    struct SeizeInternalLocalVars {\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n        uint liquidatorSeizeTokens;\\n        uint protocolSeizeTokens;\\n        uint protocolSeizeAmount;\\n        uint exchangeRateMantissa;\\n        uint totalReservesNew;\\n        uint totalFuseFeeNew;\\n        uint totalSupplyNew;\\n        uint feeSeizeTokens;\\n        uint feeSeizeAmount;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        SeizeInternalLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (vars.mathErr, vars.borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(vars.mathErr));\\n        }\\n\\n        vars.protocolSeizeTokens = mul_(seizeTokens, Exp({mantissa: protocolSeizeShareMantissa}));\\n        vars.feeSeizeTokens = mul_(seizeTokens, Exp({mantissa: feeSeizeShareMantissa}));\\n        vars.liquidatorSeizeTokens = sub_(sub_(seizeTokens, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"exchange rate math error\\\");\\n\\n        vars.protocolSeizeAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), vars.protocolSeizeTokens);\\n        vars.feeSeizeAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), vars.feeSeizeTokens);\\n\\n        vars.totalReservesNew = add_(totalReserves, vars.protocolSeizeAmount);\\n        vars.totalSupplyNew = sub_(sub_(totalSupply, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n        vars.totalFuseFeeNew = add_(totalFuseFees, vars.feeSeizeAmount);\\n\\n        (vars.mathErr, vars.liquidatorTokensNew) = addUInt(accountTokens[liquidator], vars.liquidatorSeizeTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        totalReserves = vars.totalReservesNew;\\n        totalSupply = vars.totalSupplyNew;\\n        totalFuseFees = vars.totalFuseFeeNew;\\n\\n        accountTokens[borrower] = vars.borrowerTokensNew;\\n        accountTokens[liquidator] = vars.liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\n        emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\n        emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Internal function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint) {\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh\\n      * @dev Admin function to accrue interest and set a new admin fee\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setAdminFee(uint newAdminFeeMantissa) external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee change failed.\\n            return fail(Error(error), FailureInfo.SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setAdminFeeFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setAdminFeeFresh(newAdminFeeMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new admin fee for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new admin fee\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setAdminFeeFresh(uint newAdminFeeMantissa) internal returns (uint) {\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_ADMIN_FEE_FRESH_CHECK);\\n        }\\n\\n        // Sanitize newAdminFeeMantissa\\n        if (newAdminFeeMantissa == uint(-1)) newAdminFeeMantissa = adminFeeMantissa;\\n\\n        // Get latest Fuse fee\\n        uint newFuseFeeMantissa = getPendingFuseFeeFromAdmin();\\n\\n        // Check reserveFactorMantissa + newAdminFeeMantissa + newFuseFeeMantissa \\u2264 reserveFactorPlusFeesMaxMantissa\\n        if (add_(add_(reserveFactorMantissa, newAdminFeeMantissa), newFuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_ADMIN_FEE_BOUNDS_CHECK);\\n        }\\n\\n        // If setting admin fee\\n        if (adminFeeMantissa != newAdminFeeMantissa) {\\n            // Check caller is admin\\n            if (!hasAdminRights()) {\\n                return fail(Error.UNAUTHORIZED, FailureInfo.SET_ADMIN_FEE_ADMIN_CHECK);\\n            }\\n\\n            // Set admin fee\\n            uint oldAdminFeeMantissa = adminFeeMantissa;\\n            adminFeeMantissa = newAdminFeeMantissa;\\n\\n            // Emit event\\n            emit NewAdminFee(oldAdminFeeMantissa, newAdminFeeMantissa);\\n        }\\n\\n        // If setting Fuse fee\\n        if (fuseFeeMantissa != newFuseFeeMantissa) {\\n            // Set Fuse fee\\n            uint oldFuseFeeMantissa = fuseFeeMantissa;\\n            fuseFeeMantissa = newFuseFeeMantissa;\\n\\n            // Emit event\\n            emit NewFuseFee(oldFuseFeeMantissa, newFuseFeeMantissa);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) override external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (add_(add_(newReserveFactorMantissa, adminFeeMantissa), fuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) override external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(msg.sender, reduceAmount);\\n\\n        emit ReservesReduced(msg.sender, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces Fuse fees by transferring to Fuse\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawFuseFees(uint withdrawAmount) external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted Fuse fee withdrawal failed.\\n            return fail(Error(error), FailureInfo.WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _withdrawFuseFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _withdrawFuseFeesFresh(withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces Fuse fees by transferring to Fuse\\n     * @dev Requires fresh interest accrual\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawFuseFeesFresh(uint withdrawAmount) internal returns (uint) {\\n        // totalFuseFees - reduceAmount\\n        uint totalFuseFeesNew;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_FUSE_FEES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < withdrawAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check withdrawAmount \\u2264 fuseFees[n] (totalFuseFees)\\n        if (withdrawAmount > totalFuseFees) {\\n            return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_FUSE_FEES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // We checked withdrawAmount <= totalFuseFees above, so this should never revert.\\n        totalFuseFeesNew = sub_(totalFuseFees, withdrawAmount);\\n\\n        // Store fuseFees[n+1] = fuseFees[n] - withdrawAmount\\n        totalFuseFees = totalFuseFeesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(address(fuseAdmin), withdrawAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces admin fees by transferring to admin\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawAdminFees(uint withdrawAmount) external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee withdrawal failed.\\n            return fail(Error(error), FailureInfo.WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _withdrawAdminFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _withdrawAdminFeesFresh(withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces admin fees by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawAdminFeesFresh(uint withdrawAmount) internal returns (uint) {\\n        // totalAdminFees - reduceAmount\\n        uint totalAdminFeesNew;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_ADMIN_FEES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < withdrawAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check withdrawAmount \\u2264 adminFees[n] (totalAdminFees)\\n        if (withdrawAmount > totalAdminFees) {\\n            return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_ADMIN_FEES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // We checked withdrawAmount <= totalAdminFees above, so this should never revert.\\n        totalAdminFeesNew = sub_(totalAdminFees, withdrawAmount);\\n\\n        // Store adminFees[n+1] = adminFees[n] - withdrawAmount\\n        totalAdminFees = totalAdminFeesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(address(uint160(UnitrollerAdminStorage(address(comptroller)).admin())), withdrawAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) override public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        // Attempt to reset interest checkpoints on old IRM\\n        if (address(oldInterestRateModel) != address(0)) address(oldInterestRateModel).call(abi.encodeWithSignature(\\\"resetInterestCheckpoints()\\\"));\\n\\n        // Attempt to add first interest checkpoint on new IRM\\n        address(newInterestRateModel).call(abi.encodeWithSignature(\\\"checkpointInterest()\\\"));\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the cToken ERC20 name and symbol\\n     * @dev Admin function to update the cToken ERC20 name and symbol\\n     * @param _name the new ERC20 token name to use\\n     * @param _symbol the new ERC20 token symbol to use\\n     */\\n    function _setNameAndSymbol(string calldata _name, string calldata _symbol) external {\\n        // Check caller is admin\\n        require(hasAdminRights(), \\\"caller not admin\\\");\\n\\n        // Set ERC20 name and symbol\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() virtual internal view returns (uint) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) virtual internal returns (uint) {\\n      return 1;\\n    }\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) virtual internal {}\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant(bool localOnly) {\\n        _beforeNonReentrant(localOnly);\\n        _;\\n        _afterNonReentrant(localOnly);\\n    }\\n\\n    /**\\n     * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n     * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n     * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\\n     */\\n    function _beforeNonReentrant(bool localOnly) private {\\n        require(_notEntered, \\\"re-entered\\\");\\n        if (!localOnly) comptroller._beforeNonReentrant();\\n        _notEntered = false;\\n    }\\n\\n    /**\\n     * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n     * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n     * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\\n     */\\n    function _afterNonReentrant(bool localOnly) private {\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n        if (!localOnly) comptroller._afterNonReentrant();\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     * @param errorMessage The revert string to return on failure.\\n     */\\n    function _functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.call(data);\\n\\n        if (!success) {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n\\n        return returndata;\\n    }\\n}\\n\",\"keccak256\":\"0xd3d182f62b06cf2675ba023b644b285b5b6cf86ae023447b714b88b333ac410e\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenAdminStorage {\\n    /*\\n     * Administrator for Fuse\\n     */\\n    IFuseFeeDistributor internal constant fuseAdmin = IFuseFeeDistributor(0x374aDc9EC5a177694AC805cB57E5a2A61217C1AB);\\n\\n    /**\\n     * @dev LEGACY USE ONLY: Administrator for this contract\\n     */\\n    address payable internal __admin;\\n\\n    /**\\n     * @dev LEGACY USE ONLY: Whether or not the Fuse admin has admin rights\\n     */\\n    bool internal __fuseAdminHasRights;\\n\\n    /**\\n     * @dev LEGACY USE ONLY: Whether or not the admin has admin rights\\n     */\\n    bool internal __adminHasRights;\\n}\\n\\ncontract CTokenStorage is CTokenAdminStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /*\\n     * Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /*\\n     * Maximum fraction of interest that can be set aside for reserves + fees\\n     */\\n    uint internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\n\\n    /*\\n     * LEGACY USE ONLY: Pending administrator for this contract\\n     */\\n    address payable private __pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /*\\n     * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for admin fees\\n     */\\n    uint public adminFeeMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for Fuse fees\\n     */\\n    uint public fuseFeeMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total amount of admin fees of the underlying held in this market\\n     */\\n    uint public totalAdminFees;\\n\\n    /**\\n     * @notice Total amount of Fuse fees of the underlying held in this market\\n     */\\n    uint public totalFuseFees;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /*\\n     * Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /*\\n     * Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /*\\n     * Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /*\\n     * Share of seized collateral that is added to reserves\\n     */\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n    /*\\n     * Share of seized collateral taken as fees\\n     */\\n    uint public constant feeSeizeShareMantissa = 1e17; //10%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    function isCToken() external virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Indicator that this is or is not a CEther contract (for inspection)\\n     */\\n    function isCEther() external virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the admin fee is changed\\n     */\\n    event NewAdminFee(uint oldAdminFeeMantissa, uint newAdminFeeMantissa);\\n\\n    /**\\n     * @notice Event emitted when the Fuse fee is changed\\n     */\\n    event NewFuseFee(uint oldFuseFeeMantissa, uint newFuseFeeMantissa);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) virtual external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\\n    function approve(address spender, uint amount) virtual external returns (bool);\\n    function allowance(address owner, address spender) external virtual view returns (uint);\\n    function balanceOf(address owner) external virtual view returns (uint);\\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external virtual view returns (uint);\\n    function supplyRatePerBlock() external virtual view returns (uint);\\n    function totalBorrowsCurrent() virtual external returns (uint);\\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\\n    function borrowBalanceStored(address account) public virtual view returns (uint);\\n    function exchangeRateCurrent() virtual public returns (uint);\\n    function exchangeRateStored() public virtual view returns (uint);\\n    function getCash() external virtual view returns (uint);\\n    function accrueInterest() virtual public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) virtual external returns (uint);\\n    function redeem(uint redeemTokens) virtual external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\\n    function borrow(uint borrowAmount) virtual external returns (uint);\\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\\n\\n}\\n\\ncontract CEtherInterface is CErc20Storage {}\\n\",\"keccak256\":\"0x9532da67f8eed5039ead2e7f70d4173094fea41b257bb4d29a3ca795032d4196\",\"license\":\"UNLICENSED\"},\"contracts/compound/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x7f92bb18f0beaaf6764014dba17f69a027e098a6b91230e8ff8a1079be563cf1\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\n    function exitMarket(address cToken) virtual external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\n    function mintWithinLimits(address cToken, uint exchangeRateMantissa, uint accountTokens, uint mintAmount) virtual external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\n    function borrowWithinLimits(address cToken, uint accountBorrowsNew) virtual external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) virtual external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) virtual external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) virtual external view returns (uint, uint);\\n    \\n    /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n    function _beforeNonReentrant() virtual external;\\n    function _afterNonReentrant() virtual external;\\n}\\n\",\"keccak256\":\"0xfa87b693de4c8b39acaa20b64f4c3065ba5e932c85851f41b7012ff3179078e0\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /*\\n     * Administrator for Fuse\\n     */\\n    IFuseFeeDistributor internal constant fuseAdmin = IFuseFeeDistributor(0x374aDc9EC5a177694AC805cB57E5a2A61217C1AB);\\n\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Whether or not the Fuse admin has admin rights\\n     */\\n    bool public fuseAdminHasRights = true;\\n\\n    /**\\n     * @notice Whether or not the admin has admin rights\\n     */\\n    bool public adminHasRights = true;\\n\\n    /**\\n     * @notice Returns a boolean indicating if the sender has admin rights\\n     */\\n    function hasAdminRights() internal view returns (bool) {\\n        return (msg.sender == admin && adminHasRights) || (msg.sender == address(fuseAdmin) && fuseAdminHasRights);\\n    }\\n\\n    /**\\n    * @notice Active brains of Unitroller\\n    */\\n    address public comptrollerImplementation;\\n\\n    /**\\n    * @notice Pending brains of Unitroller\\n    */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /*\\n     * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint internal maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        // Whether or not this market is listed\\n        bool isListed;\\n\\n        // Multiplier representing the most one can borrow against their collateral in this market.\\n        // For instance, 0.9 to allow borrowing 90% of collateral value.\\n        // Must be between 0 and 1, and stored as a mantissa.\\n        uint collateralFactorMantissa;\\n\\n        // Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /**\\n     * @dev Maps borrowers to booleans indicating if they have entered any markets\\n     */\\n    mapping(address => bool) internal borrowers;\\n\\n    /// @notice A list of all borrowers who have entered markets\\n    address[] public allBorrowers;\\n\\n    // Indexes of borrower account addresses in the `allBorrowers` array\\n    mapping(address => uint256) internal borrowerIndexes;\\n\\n    /**\\n     * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\n     */\\n    mapping(address => bool) public suppliers;\\n\\n    /// @notice All cTokens addresses mapped by their underlying token addresses\\n    mapping(address => CToken) public cTokensByUnderlying;\\n\\n    /// @notice Whether or not the supplier whitelist is enforced\\n    bool public enforceWhitelist;\\n\\n    /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\n    mapping(address => bool) public whitelist;\\n\\n    /// @notice An array of all whitelisted accounts\\n    address[] public whitelistArray;\\n\\n    // Indexes of account addresses in the `whitelistArray` array\\n    mapping(address => uint256) internal whitelistIndexes;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    /**\\n     * @dev Whether or not the implementation should be auto-upgraded.\\n     */\\n    bool public autoImplementation;\\n\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint) public borrowCaps;\\n\\n    /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n    mapping(address => uint) public supplyCaps;\\n\\n    /// @notice RewardsDistributor contracts to notify of flywheel changes.\\n    address[] public rewardsDistributors;\\n\\n    /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\n    bool internal _notEntered;\\n\\n    /// @dev Whether or not _notEntered has been initialized\\n    bool internal _notEnteredInitialized;\\n}\\n\",\"keccak256\":\"0x2782ca5d6c7a868a4b367002ffdfc10a446df3bb974e569a179552c6567eb113\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return uint256 The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance uint256 The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success bool Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success bool Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success bool Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining uint256 The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x5160964e7fc89ad859b05b65f764730140230263b06d5bc70742c257a4e0f031\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance uint256 The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return success bool Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining uint256 The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xb304fd27d3edcdae50fdd48c155598d6982a5b12669032680478ab7f3a27abd1\",\"license\":\"UNLICENSED\"},\"contracts/compound/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        SUPPLIER_NOT_WHITELISTED,\\n        BORROW_BELOW_MIN,\\n        SUPPLY_ABOVE_MAX,\\n        NONZERO_TOTAL_SUPPLY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n        TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\\n        SET_WHITELIST_STATUS_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        UNSUPPORT_MARKET_OWNER_CHECK,\\n        UNSUPPORT_MARKET_DOES_NOT_EXIST,\\n        UNSUPPORT_MARKET_IN_USE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        UTILIZATION_ABOVE_MAX\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_FUSE_FEES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        NEW_UTILIZATION_RATE_ABOVE_MAX,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED,\\n        WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE,\\n        WITHDRAW_FUSE_FEES_FRESH_CHECK,\\n        WITHDRAW_FUSE_FEES_VALIDATION,\\n        WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\\n        WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\\n        WITHDRAW_ADMIN_FEES_FRESH_CHECK,\\n        WITHDRAW_ADMIN_FEES_VALIDATION,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\\n        SET_ADMIN_FEE_ADMIN_CHECK,\\n        SET_ADMIN_FEE_FRESH_CHECK,\\n        SET_ADMIN_FEE_BOUNDS_CHECK,\\n        SET_FUSE_FEE_ACCRUE_INTEREST_FAILED,\\n        SET_FUSE_FEE_FRESH_CHECK,\\n        SET_FUSE_FEE_BOUNDS_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint(err);\\n    }\\n}\",\"keccak256\":\"0x4012c0b4df34b01094dd9599548325a78df10ea4592839463ff83cf1053160b9\",\"license\":\"UNLICENSED\"},\"contracts/compound/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x40f0500a6ff92cf024a9fe8cb63b06790a5a515734f2169312af2f2ddbe7abe9\",\"license\":\"UNLICENSED\"},\"contracts/compound/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0x1bb824d87c2d4aeb83a76716373359b6b5ba1646e3350f51a811fa7ff74a57e8\",\"license\":\"UNLICENSED\"},\"contracts/compound/IFuseFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\ninterface IFuseFeeDistributor {\\n    function minBorrowEth() external view returns (uint256);\\n    function maxSupplyEth() external view returns (uint256);\\n    function maxUtilizationRate() external view returns (uint256);\\n    function interestFeeRate() external view returns (uint256);\\n    function comptrollerImplementationWhitelist(address oldImplementation, address newImplementation) external view returns (bool);\\n    function cErc20DelegateWhitelist(address oldImplementation, address newImplementation, bool allowResign) external view returns (bool);\\n    function cEtherDelegateWhitelist(address oldImplementation, address newImplementation, bool allowResign) external view returns (bool);\\n    function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\n    function latestCErc20Delegate(address oldImplementation) external view returns (address cErc20Delegate, bool allowResign, bytes memory becomeImplementationData);\\n    function latestCEtherDelegate(address oldImplementation) external view returns (address cEtherDelegate, bool allowResign, bytes memory becomeImplementationData);\\n    function deployCEther(bytes calldata constructorData) external returns (address);\\n    function deployCErc20(bytes calldata constructorData) external returns (address);\\n    fallback () external payable;\\n}\\n\",\"keccak256\":\"0xd5cb71921e3b74c6bc2a184520fe54218a532a7214ef5d9b26a972334fdfb2e0\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual public view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual public view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x298d553be71bc4d367d32fb5866f6c73f8f9d9aed0d1ee019a8c9075a716a382\",\"license\":\"UNLICENSED\"},\"contracts/compound/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) virtual external view returns (uint);\\n}\\n\",\"keccak256\":\"0x70e7121aeefdc1b956466dd3a0416d4bcbbcfd884a51ad3145541621f11619b4\",\"license\":\"UNLICENSED\"},\"contracts/compound/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\n/**\\n * @title Unitroller\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n    /**\\n      * @notice Emitted when pendingComptrollerImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Event emitted when the Fuse admin rights are changed\\n      */\\n    event FuseAdminRightsToggled(bool hasRights);\\n\\n    /**\\n      * @notice Event emitted when the admin rights are changed\\n      */\\n    event AdminRightsToggled(bool hasRights);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() {\\n        // Set admin to caller\\n        admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n        }\\n        if (!fuseAdmin.comptrollerImplementationWhitelist(comptrollerImplementation, newPendingImplementation)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK);\\n        }\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n        pendingComptrollerImplementation = newPendingImplementation;\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it's role as implementation\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n    */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = comptrollerImplementation;\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        comptrollerImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Toggles Fuse admin rights.\\n      * @param hasRights Boolean indicating if the Fuse admin is to have rights.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _toggleFuseAdminRights(bool hasRights) external returns (uint) {\\n        // Check caller = admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\n        }\\n\\n        // Check that rights have not already been set to the desired value\\n        if (fuseAdminHasRights == hasRights) return uint(Error.NO_ERROR);\\n\\n        // Set fuseAdminHasRights\\n        fuseAdminHasRights = hasRights;\\n\\n        // Emit FuseAdminRightsToggled()\\n        emit FuseAdminRightsToggled(fuseAdminHasRights);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Toggles admin rights.\\n      * @param hasRights Boolean indicating if the admin is to have rights.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _toggleAdminRights(bool hasRights) external returns (uint) {\\n        // Check caller = admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\n        }\\n\\n        // Check that rights have not already been set to the desired value\\n        if (adminHasRights == hasRights) return uint(Error.NO_ERROR);\\n\\n        // Set adminHasRights\\n        adminHasRights = hasRights;\\n\\n        // Emit AdminRightsToggled()\\n        emit AdminRightsToggled(hasRights);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    fallback () payable external {\\n        // Check for automatic implementation\\n        if (msg.sender != address(this)) {\\n            (bool callSuccess, bytes memory data) = address(this).staticcall(abi.encodeWithSignature(\\\"autoImplementation()\\\"));\\n            bool autoImplementation;\\n            if (callSuccess) (autoImplementation) = abi.decode(data, (bool));\\n\\n            if (autoImplementation) {\\n                address latestComptrollerImplementation = fuseAdmin.latestComptrollerImplementation(comptrollerImplementation);\\n\\n                if (comptrollerImplementation != latestComptrollerImplementation) {\\n                    address oldImplementation = comptrollerImplementation; // Save current value for inclusion in log\\n                    comptrollerImplementation = latestComptrollerImplementation;\\n                    emit NewImplementation(oldImplementation, comptrollerImplementation);\\n                }\\n            }\\n        }\\n\\n        // delegate all other functions to current implementation\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\n              default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62387b2e4c7056715a098e132b40e36501bfdd0eb4765da90ac83e44938dc844\",\"license\":\"UNLICENSED\"},\"contracts/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface ICToken {\\n    function admin() external view returns (address);\\n    function adminHasRights() external view returns (bool);\\n    function fuseAdminHasRights() external view returns (bool);\\n    function symbol() external view returns (string memory);\\n    function comptroller() external view returns (address);\\n    function adminFeeMantissa() external view returns (uint256);\\n    function fuseFeeMantissa() external view returns (uint256);\\n    function reserveFactorMantissa() external view returns (uint256);\\n    function totalReserves() external view returns (uint);\\n    function totalAdminFees() external view returns (uint);\\n    function totalFuseFees() external view returns (uint);\\n\\n    function isCToken() external view returns (bool);\\n    function isCEther() external view returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function getCash() external view returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0xb4424e22fcdb1f3c4748f7cdf88113cb9bf8bd69fcbfcfc48aa96a82759140e9\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./IUnitroller.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ninterface IComptroller {\\n    function admin() external view returns (address);\\n    function adminHasRights() external view returns (bool);\\n    function fuseAdminHasRights() external view returns (bool);\\n\\n    function oracle() external view returns (IPriceOracle);\\n    function closeFactorMantissa() external view returns (uint);\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    function markets(address cToken) external view returns (bool, uint);\\n\\n    function getAssetsIn(address account) external view returns (ICToken[] memory);\\n    function checkMembership(address account, ICToken cToken) external view returns (bool);\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n\\n    function _setPriceOracle(IPriceOracle newOracle) external returns (uint);\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint256);\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint);\\n    function _become(IUnitroller unitroller) external;\\n\\n    function borrowGuardianPaused(address cToken) external view returns (bool);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n    function getAllMarkets() external view returns (ICToken[] memory);\\n    function getAllBorrowers() external view returns (address[] memory);\\n    function suppliers(address account) external view returns (bool);\\n    function enforceWhitelist() external view returns (bool);\\n    function whitelist(address account) external view returns (bool);\\n\\n    function _setWhitelistEnforcement(bool enforce) external returns (uint);\\n    function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint);\\n\\n    function _toggleAutoImplementations(bool enabled) external returns (uint);\\n}\\n\",\"keccak256\":\"0x404df4222d84e72014bd40025d45ee20b72fd1e88678910d7f3733a3ada04231\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(ICToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xca54a109714442f65e5bcac19b1cb95eda8595305a65e601c9e846d0b4ccba70\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title RewardsDistributor\\n * @author Compound\\n */\\ninterface IRewardsDistributor {\\n    /// @dev The token to reward (i.e., COMP)\\n    function rewardToken() external view returns (address);\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    function compSupplySpeeds(address) external view returns (uint);\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    function compBorrowSpeeds(address) external view returns (uint);\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    function compAccrued(address) external view returns (uint);\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n     * @dev Called by the Comptroller\\n     * @param cToken The relevant market\\n     * @param supplier The minter/redeemer\\n     */\\n    function flywheelPreSupplierAction(address cToken, address supplier) external;\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n     * @dev Called by the Comptroller\\n     * @param cToken The relevant market\\n     * @param borrower The borrower\\n     */\\n    function flywheelPreBorrowerAction(address cToken, address borrower) external;\\n\\n    /**\\n     * @notice Returns an array of all markets.\\n     */\\n    function getAllMarkets() external view returns (ICToken[] memory);\\n}\\n\",\"keccak256\":\"0x8a94501e48bbf3a849726f46f02ebd4b5f20d46f9da1dbb0122b0ec2f7b73e3e\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IUnitroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ninterface IUnitroller {\\n    function _setPendingImplementation(address newPendingImplementation) external returns (uint);\\n    function _setPendingAdmin(address newPendingAdmin) external returns (uint);\\n}\\n\",\"keccak256\":\"0xe54a5240cdb581a8f19d9202668be82aa3b2f6b59641b49333846d4e25fad83f\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506139d5806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80635710c6d8116100ad578063a970e76c11610071578063a970e76c14610270578063ac4afa3814610283578063b86579d4146102a7578063d88ff1f4146102ba578063f2fde38b146102cf5761012c565b80635710c6d81461020c578063715018a61461022d5780638da5cb5b14610235578063a155497c1461024a578063a3ed91c61461025d5761012c565b8063218a3bbe116100f4578063218a3bbe146101a857806326bb81d7146101c957806343e20a1d146101d15780634a7462ee146101e45780634ae26ea1146102045761012c565b806304f03c6f1461013157806307421978146101465780630a83d1b0146101595780631e1c6a071461016c57806320c32bfe14610195575b600080fd5b61014461013f366004612495565b6102e2565b005b6101446101543660046123d6565b610357565b610144610167366004612415565b610396565b61017f61017a3660046123d6565b6104c0565b60405161018c9190612959565b60405180910390f35b6101446101a336600461268d565b6104d5565b6101bb6101b6366004612495565b610658565b60405161018c929190612902565b61017f610afb565b61017f6101df3660046123d6565b610b04565b6101f76101f23660046123d6565b610b19565b60405161018c91906128a2565b6101bb610b90565b61021f61021a36600461258f565b610ee0565b60405161018c929190612d53565b61014461147b565b61023d611527565b60405161018c9190612835565b610144610258366004612415565b611536565b6101bb61026b3660046123d6565b61161c565b61017f61027e3660046123d6565b6118a9565b61029661029136600461265d565b6118be565b60405161018c959493929190612964565b6101446102b53660046124cd565b611998565b6102c2611aab565b60405161018c91906128ef565b6101446102dd3660046123d6565b611bd5565b6102ea611cd8565b6001600160a01b03166102fb611527565b6001600160a01b031614610344576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b6068805460ff1916911515919091179055565b336000908152606a602090815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0392909216919091179055565b61039e611cd8565b6001600160a01b03166103af611527565b6001600160a01b0316146103f8576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b8161041e5760405162461bcd60e51b8152600401610415906129d9565b60405180910390fd5b60005b8281101561047f5781606b600086868581811061043a57fe5b905060200201602081019061044f91906123d6565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610421565b507f31b67e6853df85403a8c4f4f46dc53f48f700d6917c8e3ec8c77a0e6fd56793b8383836040516104b393929190612849565b60405180910390a1505050565b60676020526000908152604090205460ff1681565b6000606584815481106104e457fe5b600091825260209182902060026005909202010154604080516303e1469160e61b815290516001600160a01b039092169350839263f851a44092600480840193829003018186803b15801561053857600080fd5b505afa15801561054c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057091906123f9565b6001600160a01b0316336001600160a01b03161480156105fc5750806001600160a01b0316630a755ec26040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c457600080fd5b505afa1580156105d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fc91906124b1565b8061061f575061060a611527565b6001600160a01b0316336001600160a01b0316145b61062857600080fd5b82826065868154811061063757fe5b600091825260209091206106519360059092020191612255565b5050505050565b6060806000805b6065548110156107c65760006065828154811061067857fe5b60009182526020918290206002600590920201015460408051630b09572160e41b815290516001600160a01b039092169350839263b095721092600480840193829003018186803b1580156106cc57600080fd5b505afa9250505080156106fc575060408051601f3d908101601f191682019092526106f9918101906124b1565b60015b610705576107b6565b80156107125750506107be565b816001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561074b57600080fd5b505afa92505050801561077b575060408051601f3d908101601f19168201909252610778918101906123f9565b60015b610784576107b4565b6001600160a01b0381166000908152606b602052604090205460ff161515881515146107b2575050506107be565b505b505b506001909101905b60010161065f565b5060008167ffffffffffffffff811180156107e057600080fd5b5060405190808252806020026020018201604052801561080a578160200160208202803683370190505b50905060008267ffffffffffffffff8111801561082657600080fd5b5060405190808252806020026020018201604052801561086057816020015b61084d6122e1565b8152602001906001900390816108455790505b5090506000805b606554811015610aee5760006065828154811061088057fe5b60009182526020918290206002600590920201015460408051630b09572160e41b815290516001600160a01b039092169350839263b095721092600480840193829003018186803b1580156108d457600080fd5b505afa925050508015610904575060408051601f3d908101601f19168201909252610901918101906124b1565b60015b61090d576109be565b801561091a575050610ae6565b816001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561095357600080fd5b505afa925050508015610983575060408051601f3d908101601f19168201909252610980918101906123f9565b60015b61098c576109bc565b6001600160a01b0381166000908152606b602052604090205460ff1615158b1515146109ba57505050610ae6565b505b505b818584815181106109cb57fe5b602002602001018181525050606582815481106109e457fe5b600091825260209182902060408051600593909302909101805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a0830184815292939092849290918491840182828015610a875780601f10610a5c57610100808354040283529160200191610a87565b820191906000526020600020905b815481529060010190602001808311610a6a57829003601f168201915b505050918352505060018201546001600160a01b0390811660208301526002830154166040820152600382015460608201526004909101546080909101528451859085908110610ad357fe5b6020908102919091010152506001909101905b600101610867565b5091945092505050915091565b60685460ff1681565b606b6020526000908152604090205460ff1681565b6001600160a01b0381166000908152606a6020908152604091829020805483518184028101840190945280845260609392830182828015610b8357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b65575b505050505090505b919050565b6060806000805b606554811015610c555760658181548110610bae57fe5b60009182526020918290206002600590920201015460408051630b09572160e41b815290516001600160a01b039092169263b095721092600480840193829003018186803b158015610bff57600080fd5b505afa925050508015610c2f575060408051601f3d908101601f19168201909252610c2c918101906124b1565b60015b610c3857610c46565b8015610c445750610c4d565b505b6001909101905b600101610b97565b5060008167ffffffffffffffff81118015610c6f57600080fd5b50604051908082528060200260200182016040528015610c99578160200160208202803683370190505b50905060008267ffffffffffffffff81118015610cb557600080fd5b50604051908082528060200260200182016040528015610cef57816020015b610cdc6122e1565b815260200190600190039081610cd45790505b5090506000805b606554811015610ed45760658181548110610d0d57fe5b60009182526020918290206002600590920201015460408051630b09572160e41b815290516001600160a01b039092169263b095721092600480840193829003018186803b158015610d5e57600080fd5b505afa925050508015610d8e575060408051601f3d908101601f19168201909252610d8b918101906124b1565b60015b610d9757610da5565b8015610da35750610ecc565b505b80848381518110610db257fe5b60200260200101818152505060658181548110610dcb57fe5b600091825260209182902060408051600593909302909101805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a0830184815292939092849290918491840182828015610e6e5780601f10610e4357610100808354040283529160200191610e6e565b820191906000526020600020905b815481529060010190602001808311610e5157829003601f168201915b505050918352505060018201546001600160a01b0390811660208301526002830154166040820152600382015460608201526004909101546080909101528351849084908110610eba57fe5b60209081029190910101526001909101905b600101610cf6565b50919450925050509091565b6000806001600160a01b038716610f095760405162461bcd60e51b815260040161041590612a84565b6001600160a01b038316610f2f5760405162461bcd60e51b815260040161041590612bc9565b6000338943604051602001610f46939291906127da565b604051602081830303815290604052805190602001209050600060405180602001610f7090612322565b601f1982820381018352601f909101166040819052610f929190602001612819565b60405160208183030381529060405290506000610fb160008484611cdc565b60405163e992a04160e01b815290915081906001600160a01b0382169063e992a04190610fe2908e90600401612835565b602060405180830381600087803b158015610ffc57600080fd5b505af1158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190612675565b156110515760405162461bcd60e51b815260040161041590612b76565b604051630ea826e360e11b81528b906001600160a01b03821690631d504dc69061107f908590600401612835565b600060405180830381600087803b15801561109957600080fd5b505af11580156110ad573d6000803e3d6000fd5b505060405163317b0b7760e01b81528592506001600160a01b038316915063317b0b77906110df908e90600401612d4a565b602060405180830381600087803b1580156110f957600080fd5b505af115801561110d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111319190612675565b1561114e5760405162461bcd60e51b8152600401610415906129a4565b604051634fd42e1760e01b81526001600160a01b03821690634fd42e179061117a908d90600401612d4a565b602060405180830381600087803b15801561119457600080fd5b505af11580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190612675565b156111e95760405162461bcd60e51b815260040161041590612a06565b6040516355ee1fe160e01b81526001600160a01b038216906355ee1fe190611215908c90600401612835565b602060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112679190612675565b156112845760405162461bcd60e51b815260040161041590612a4f565b8b1561132657604051634a956fad60e11b81526001600160a01b0382169063952adf5a906112b790600190600401612959565b602060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113099190612675565b156113265760405162461bcd60e51b815260040161041590612c13565b604051636a9998b360e11b81526001600160a01b0382169063d53331669061135390600190600401612959565b602060405180830381600087803b15801561136d57600080fd5b505af1158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190612675565b156113c25760405162461bcd60e51b815260040161041590612ae1565b604051632dc7468360e21b81526001600160a01b0384169063b71d1a0c906113ee903390600401612835565b602060405180830381600087803b15801561140857600080fd5b505af115801561141c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114409190612675565b1561145d5760405162461bcd60e51b815260040161041590612b2c565b6114678e85611df5565b9e939d50929b505050505050505050505050565b611483611cd8565b6001600160a01b0316611494611527565b6001600160a01b0316146114dd576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b61153e611cd8565b6001600160a01b031661154f611527565b6001600160a01b031614611598576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b816115b55760405162461bcd60e51b815260040161041590612c61565b60005b828110156116165781606960008686858181106115d157fe5b90506020020160208101906115e691906123d6565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556001016115b8565b50505050565b6001600160a01b038116600090815260666020526040812054606091829167ffffffffffffffff8111801561165057600080fd5b5060405190808252806020026020018201604052801561167a578160200160208202803683370190505b506001600160a01b0385166000908152606660205260408120549192509067ffffffffffffffff811180156116ae57600080fd5b506040519080825280602002602001820160405280156116e857816020015b6116d56122e1565b8152602001906001900390816116cd5790505b50905060005b6001600160a01b03861660009081526066602052604090205481101561189e576001600160a01b038616600090815260666020526040902080548290811061173257fe5b906000526020600020015483828151811061174957fe5b602002602001018181525050606560666000886001600160a01b03166001600160a01b03168152602001908152602001600020828154811061178757fe5b90600052602060002001548154811061179c57fe5b600091825260209182902060408051600593909302909101805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a083018481529293909284929091849184018282801561183f5780601f106118145761010080835404028352916020019161183f565b820191906000526020600020905b81548152906001019060200180831161182257829003601f168201915b505050918352505060018201546001600160a01b039081166020830152600283015416604082015260038201546060820152600490910154608090910152825183908390811061188b57fe5b60209081029190910101526001016116ee565b509092509050915091565b60696020526000908152604090205460ff1681565b606581815481106118ce57600080fd5b60009182526020918290206005919091020180546040805160026001841615610100026000190190931692909204601f8101859004850283018501909152808252919350918391908301828280156119675780601f1061193c57610100808354040283529160200191611967565b820191906000526020600020905b81548152906001019060200180831161194a57829003601f168201915b5050505060018301546002840154600385015460049095015493946001600160a01b03928316949290911692509085565b600054610100900460ff16806119b157506119b1611ff3565b806119bf575060005460ff16155b6119fa5760405162461bcd60e51b815260040180806020018281038252602e815260200180613952602e913960400191505060405180910390fd5b600054610100900460ff16158015611a25576000805460ff1961ff0019909116610100171660011790555b611a2d612004565b6068805460ff191684151517905560005b8251811015611a9357600160696000858481518110611a5957fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101611a3e565b508015611aa6576000805461ff00191690555b505050565b60606065805480602002602001604051908101604052809291908181526020016000905b82821015611bcc5760008481526020908190206040805160058602909201805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a0830184815292939092849290918491840182828015611b785780601f10611b4d57610100808354040283529160200191611b78565b820191906000526020600020905b815481529060010190602001808311611b5b57829003601f168201915b50505091835250506001828101546001600160a01b03908116602080850191909152600285015490911660408401526003840154606084015260049093015460809092019190915291835292019101611acf565b50505050905090565b611bdd611cd8565b6001600160a01b0316611bee611527565b6001600160a01b031614611c37576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b6001600160a01b038116611c7c5760405162461bcd60e51b815260040180806020018281038252602681526020018061392c6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60008084471015611d34576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b8251611d87576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f590506001600160a01b038116611ded576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b6001600160a01b03811660009081526067602052604081205460ff1615611e2e5760405162461bcd60e51b815260040161041590612cc1565b60685460ff161580611e4f57503360009081526069602052604090205460ff165b611e6b5760405162461bcd60e51b815260040161041590612d06565b606483511115611e8d5760405162461bcd60e51b815260040161041590612c91565b6040805160a081018252848152336020808301919091526001600160a01b0385169282019290925243606082015242608082015260658054600181018255600091909152815180519293849360059093027f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c70192611f0e928492019061232f565b50602082810151600183810180546001600160a01b03199081166001600160a01b0394851617909155604080870151600287018054909316908516179091556060860151600386015560809095015160049094019390935533600090815260668352848120606580548254808801845592845285842060001991820193019290925592891682526067909352849020805460ff1916909317909255905491517f18075ab463b4dc5842f37ecd67abeb192eda5d073f2c08509e189ad173d5c02092611fdc9201908490612d6a565b60405180910390a150506065546000190192915050565b6000611ffe306120b6565b15905090565b600054610100900460ff168061201d575061201d611ff3565b8061202b575060005460ff16155b6120665760405162461bcd60e51b815260040180806020018281038252602e815260200180613952602e913960400191505060405180910390fd5b600054610100900460ff16158015612091576000805460ff1961ff0019909116610100171660011790555b6120996120bc565b6120a161215c565b80156120b3576000805461ff00191690555b50565b3b151590565b600054610100900460ff16806120d557506120d5611ff3565b806120e3575060005460ff16155b61211e5760405162461bcd60e51b815260040180806020018281038252602e815260200180613952602e913960400191505060405180910390fd5b600054610100900460ff161580156120a1576000805460ff1961ff00199091166101001716600117905580156120b3576000805461ff001916905550565b600054610100900460ff16806121755750612175611ff3565b80612183575060005460ff16155b6121be5760405162461bcd60e51b815260040180806020018281038252602e815260200180613952602e913960400191505060405180910390fd5b600054610100900460ff161580156121e9576000805460ff1961ff0019909116610100171660011790555b60006121f3611cd8565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156120b3576000805461ff001916905550565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261228b57600085556122d1565b82601f106122a45782800160ff198235161785556122d1565b828001600101855582156122d1579182015b828111156122d15782358255916020019190600101906122b6565b506122dd9291506123ab565b5090565b6040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b610b3580612df783390190565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261236557600085556122d1565b82601f1061237e57805160ff19168380011785556122d1565b828001600101855582156122d1579182015b828111156122d1578251825591602001919060010190612390565b5b808211156122dd57600081556001016123ac565b8035610b8b81612dd3565b8035610b8b81612de8565b6000602082840312156123e7578081fd5b81356123f281612dd3565b9392505050565b60006020828403121561240a578081fd5b81516123f281612dd3565b600080600060408486031215612429578182fd5b833567ffffffffffffffff80821115612440578384fd5b818601915086601f830112612453578384fd5b813581811115612461578485fd5b8760208083028501011115612474578485fd5b6020928301955093505084013561248a81612de8565b809150509250925092565b6000602082840312156124a6578081fd5b81356123f281612de8565b6000602082840312156124c2578081fd5b81516123f281612de8565b600080604083850312156124df578182fd5b82356124ea81612de8565b915060208381013567ffffffffffffffff80821115612507578384fd5b818601915086601f83011261251a578384fd5b81358181111561252657fe5b8381029150612536848301612d83565b8181528481019084860184860187018b1015612550578788fd5b8795505b8386101561257e578035945061256985612dd3565b84835260019590950194918601918601612554565b508096505050505050509250929050565b60008060008060008060c087890312156125a7578182fd5b863567ffffffffffffffff808211156125be578384fd5b818901915089601f8301126125d1578384fd5b81356020828211156125df57fe5b6125f1601f8301601f19168201612d83565b92508183528b81838601011115612606578586fd5b818185018285013785818385010152829950612623818c016123c0565b985050505050612635604088016123cb565b9350606087013592506080870135915061265160a088016123c0565b90509295509295509295565b60006020828403121561266e578081fd5b5035919050565b600060208284031215612686578081fd5b5051919050565b6000806000604084860312156126a1578283fd5b83359250602084013567ffffffffffffffff808211156126bf578384fd5b818601915086601f8301126126d2578384fd5b8135818111156126e0578485fd5b8760208285010111156126f1578485fd5b6020830194508093505050509250925092565b6000815180845260208085018081965082840281019150828601855b8581101561274a578284038952612738848351612783565b98850198935090840190600101612720565b5091979650505050505050565b6000815180845261276f816020860160208601612da7565b601f01601f19169290920160200192915050565b6000815160a0845261279860a0850182612757565b9050602083015160018060a01b038082166020870152806040860151166040870152505060608301516060850152608083015160808501528091505092915050565b60006bffffffffffffffffffffffff198560601b1682528351612804816014850160208801612da7565b60149201918201929092526034019392505050565b6000825161282b818460208701612da7565b9190910192915050565b6001600160a01b0391909116815260200190565b6040808252810183905260008460608301825b8681101561288c57823561286f81612dd3565b6001600160a01b031682526020928301929091019060010161285c565b5080925050508215156020830152949350505050565b6020808252825182820181905260009190848201906040850190845b818110156128e35783516001600160a01b0316835292840192918401916001016128be565b50909695505050505050565b6000602082526123f26020830184612704565b604080825283519082018190526000906020906060840190828701845b8281101561293b5781518452928401929084019060010161291f565b5050508381038285015261294f8186612704565b9695505050505050565b901515815260200190565b600060a0825261297760a0830188612757565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b6020808252818101527f4661696c656420746f2073657420706f6f6c20636c6f736520666163746f722e604082015260600190565b60208082526013908201527227379030b236b4b7399039bab8383634b2b21760691b604082015260600190565b60208082526029908201527f4661696c656420746f2073657420706f6f6c206c69717569646174696f6e20696040820152683731b2b73a34bb329760b91b606082015260800190565b6020808252818101527f4661696c656420746f2073657420706f6f6c207072696365206f7261636c652e604082015260600190565b60208082526039908201527f4e6f20436f6d7074726f6c6c657220696d706c656d656e746174696f6e20636f60408201527f6e74726163742061646472657373207370656369666965642e00000000000000606082015260800190565b6020808252602b908201527f4661696c656420746f20656e61626c6520706f6f6c206175746f20696d706c6560408201526a36b2b73a30ba34b7b7399760a91b606082015260800190565b6020808252602a908201527f4661696c656420746f207365742070656e64696e672061646d696e206f6e20556040820152693734ba3937b63632b91760b11b606082015260800190565b60208082526033908201527f4661696c656420746f207365742070656e64696e6720696d706c656d656e74616040820152723a34b7b71037b7102ab734ba3937b63632b91760691b606082015260800190565b6020808252602a908201527f4e6f2050726963654f7261636c6520636f6e747261637420616464726573732060408201526939b832b1b4b334b2b21760b11b606082015260800190565b6020808252602e908201527f4661696c656420746f20656e666f72636520737570706c6965722f626f72726f60408201526d3bb2b9103bb434ba32b634b9ba1760911b606082015260800190565b6020808252601690820152752737903232b83637bcb2b9399039bab8383634b2b21760511b604082015260600190565b6020808252601690820152752737903837b7b6103730b6b29039bab8383634b2b21760511b604082015260600190565b60208082526025908201527f506f6f6c20616c72656164792065786973747320696e207468652064697265636040820152643a37b93c9760d91b606082015260800190565b60208082526024908201527f53656e646572206973206e6f74206f6e206465706c6f7965722077686974656c60408201526334b9ba1760e11b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b600083825260406020830152611ded6040830184612783565b60405181810167ffffffffffffffff81118282101715612d9f57fe5b604052919050565b60005b83811015612dc2578181015183820152602001612daa565b838111156116165750506000910152565b6001600160a01b03811681146120b357600080fd5b80151581146120b357600080fdfe60806040526001805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b17905534801561003257600080fd5b50600080546001600160a01b03191633179055610ae1806100546000396000f3fe6080604052600436106100a75760003560e01c8063bb82aa5e11610064578063bb82aa5e14610436578063c1e803341461044b578063dcfbc0c714610460578063e992a04114610475578063e9c714f2146104a8578063f851a440146104bd576100a7565b80630225ab9d1461032a5780630a755ec21461036857806326782247146103915780632f1069ba146103c25780636f63af0b146103d7578063b71d1a0c14610403575b3330146102a75760408051600481526024810182526020810180516001600160e01b0316633757348b60e21b17815291518151600093849330939092909182918083835b6020831061010a5780518252601f1990920191602091820191016100eb565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461016a576040519150601f19603f3d011682016040523d82523d6000602084013e61016f565b606091505b5091509150600082156101965781806020019051602081101561019157600080fd5b505190505b80156102a3576002546040805163bbcdd6d360e01b81526001600160a01b0390921660048301525160009173374adc9ec5a177694ac805cb57e5a2a61217c1ab9163bbcdd6d391602480820192602092909190829003018186803b1580156101fd57600080fd5b505afa158015610211573d6000803e3d6000fd5b505050506040513d602081101561022757600080fd5b50516002549091506001600160a01b038083169116146102a157600280546001600160a01b038381166001600160a01b0319831617928390556040805192821680845293909116602083015280517fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a9281900390910190a1505b505b5050505b6002546040516000916001600160a01b031690829036908083838082843760405192019450600093509091505080830381855af49150503d806000811461030a576040519150601f19603f3d011682016040523d82523d6000602084013e61030f565b606091505b505090506040513d6000823e818015610326573d82f35b3d82fd5b34801561033657600080fd5b506103566004803603602081101561034d57600080fd5b503515156104d2565b60408051918252519081900360200190f35b34801561037457600080fd5b5061037d61056e565b604080519115158252519081900360200190f35b34801561039d57600080fd5b506103a661057e565b604080516001600160a01b039092168252519081900360200190f35b3480156103ce57600080fd5b5061037d61058d565b3480156103e357600080fd5b50610356600480360360208110156103fa57600080fd5b5035151561059d565b34801561040f57600080fd5b506103566004803603602081101561042657600080fd5b50356001600160a01b0316610639565b34801561044257600080fd5b506103a66106bc565b34801561045757600080fd5b506103566106cb565b34801561046c57600080fd5b506103a66107c6565b34801561048157600080fd5b506103566004803603602081101561049857600080fd5b50356001600160a01b03166107d5565b3480156104b457600080fd5b506103566108f5565b3480156104c957600080fd5b506103a66109db565b60006104dc6109ea565b6104f3576104ec60016005610a45565b9050610569565b60015460ff600160a81b90910416151582151514156105135760006104ec565b60018054831515600160a81b810260ff60a81b199092169190911790915560408051918252517f10f9a0a95673b0837d1dce21fd3bffcb6d760435e9b5300b75a271182f75f8229181900360200190a160005b90505b919050565b600154600160a81b900460ff1681565b6001546001600160a01b031681565b600154600160a01b900460ff1681565b60006105a76109ea565b6105b7576104ec60016005610a45565b60015460ff600160a01b90910416151582151514156105d75760006104ec565b60018054831515600160a01b90810260ff60a01b199092169190911791829055604080519190920460ff161515815290517fabb56a15fd39488c914b324690b88f30d7daec63d2131ca0ef47e5739068c86e9181900360200190a16000610566565b60006106436109ea565b610653576104ec60016010610a45565b600180546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a160005b9392505050565b6002546001600160a01b031681565b6003546000906001600160a01b0316331415806106f157506003546001600160a01b0316155b1561070857610701600180610a45565b90506107c3565b60028054600380546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a92908290030190a1600354604080516001600160a01b038085168252909216602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160005b925050505b90565b6003546001600160a01b031681565b60006107df6109ea565b6107ef576104ec60016012610a45565b60025460408051639d244f9f60e01b81526001600160a01b03928316600482015291841660248301525173374adc9ec5a177694ac805cb57e5a2a61217c1ab91639d244f9f916044808301926020929190829003018186803b15801561085457600080fd5b505afa158015610868573d6000803e3d6000fd5b505050506040513d602081101561087e57600080fd5b5051610890576104ec60016011610a45565b600380546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160006106b5565b6001546000906001600160a01b031633141580610910575033155b156109215761070160016000610a45565b60008054600180546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600154604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160006107be565b6000546001600160a01b031681565b600080546001600160a01b031633148015610a0e5750600154600160a81b900460ff165b80610a4057503373374adc9ec5a177694ac805cb57e5a2a61217c1ab148015610a405750600154600160a01b900460ff165b905090565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836015811115610a7457fe5b83601b811115610a8057fe5b604080519283526020830191909152600082820152519081900360600190a18260158111156106b557fefea264697066735822122032c738cd6a6a8985db281fab0ad2d91830ffe18ba68488476a965c780e5f067c64736f6c634300070600334f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220351d92821b2789336bf269a2727dd889d8c45a1769b75913d3703d0b9a1d1be964736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80635710c6d8116100ad578063a970e76c11610071578063a970e76c14610270578063ac4afa3814610283578063b86579d4146102a7578063d88ff1f4146102ba578063f2fde38b146102cf5761012c565b80635710c6d81461020c578063715018a61461022d5780638da5cb5b14610235578063a155497c1461024a578063a3ed91c61461025d5761012c565b8063218a3bbe116100f4578063218a3bbe146101a857806326bb81d7146101c957806343e20a1d146101d15780634a7462ee146101e45780634ae26ea1146102045761012c565b806304f03c6f1461013157806307421978146101465780630a83d1b0146101595780631e1c6a071461016c57806320c32bfe14610195575b600080fd5b61014461013f366004612495565b6102e2565b005b6101446101543660046123d6565b610357565b610144610167366004612415565b610396565b61017f61017a3660046123d6565b6104c0565b60405161018c9190612959565b60405180910390f35b6101446101a336600461268d565b6104d5565b6101bb6101b6366004612495565b610658565b60405161018c929190612902565b61017f610afb565b61017f6101df3660046123d6565b610b04565b6101f76101f23660046123d6565b610b19565b60405161018c91906128a2565b6101bb610b90565b61021f61021a36600461258f565b610ee0565b60405161018c929190612d53565b61014461147b565b61023d611527565b60405161018c9190612835565b610144610258366004612415565b611536565b6101bb61026b3660046123d6565b61161c565b61017f61027e3660046123d6565b6118a9565b61029661029136600461265d565b6118be565b60405161018c959493929190612964565b6101446102b53660046124cd565b611998565b6102c2611aab565b60405161018c91906128ef565b6101446102dd3660046123d6565b611bd5565b6102ea611cd8565b6001600160a01b03166102fb611527565b6001600160a01b031614610344576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b6068805460ff1916911515919091179055565b336000908152606a602090815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0392909216919091179055565b61039e611cd8565b6001600160a01b03166103af611527565b6001600160a01b0316146103f8576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b8161041e5760405162461bcd60e51b8152600401610415906129d9565b60405180910390fd5b60005b8281101561047f5781606b600086868581811061043a57fe5b905060200201602081019061044f91906123d6565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610421565b507f31b67e6853df85403a8c4f4f46dc53f48f700d6917c8e3ec8c77a0e6fd56793b8383836040516104b393929190612849565b60405180910390a1505050565b60676020526000908152604090205460ff1681565b6000606584815481106104e457fe5b600091825260209182902060026005909202010154604080516303e1469160e61b815290516001600160a01b039092169350839263f851a44092600480840193829003018186803b15801561053857600080fd5b505afa15801561054c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057091906123f9565b6001600160a01b0316336001600160a01b03161480156105fc5750806001600160a01b0316630a755ec26040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c457600080fd5b505afa1580156105d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fc91906124b1565b8061061f575061060a611527565b6001600160a01b0316336001600160a01b0316145b61062857600080fd5b82826065868154811061063757fe5b600091825260209091206106519360059092020191612255565b5050505050565b6060806000805b6065548110156107c65760006065828154811061067857fe5b60009182526020918290206002600590920201015460408051630b09572160e41b815290516001600160a01b039092169350839263b095721092600480840193829003018186803b1580156106cc57600080fd5b505afa9250505080156106fc575060408051601f3d908101601f191682019092526106f9918101906124b1565b60015b610705576107b6565b80156107125750506107be565b816001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561074b57600080fd5b505afa92505050801561077b575060408051601f3d908101601f19168201909252610778918101906123f9565b60015b610784576107b4565b6001600160a01b0381166000908152606b602052604090205460ff161515881515146107b2575050506107be565b505b505b506001909101905b60010161065f565b5060008167ffffffffffffffff811180156107e057600080fd5b5060405190808252806020026020018201604052801561080a578160200160208202803683370190505b50905060008267ffffffffffffffff8111801561082657600080fd5b5060405190808252806020026020018201604052801561086057816020015b61084d6122e1565b8152602001906001900390816108455790505b5090506000805b606554811015610aee5760006065828154811061088057fe5b60009182526020918290206002600590920201015460408051630b09572160e41b815290516001600160a01b039092169350839263b095721092600480840193829003018186803b1580156108d457600080fd5b505afa925050508015610904575060408051601f3d908101601f19168201909252610901918101906124b1565b60015b61090d576109be565b801561091a575050610ae6565b816001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561095357600080fd5b505afa925050508015610983575060408051601f3d908101601f19168201909252610980918101906123f9565b60015b61098c576109bc565b6001600160a01b0381166000908152606b602052604090205460ff1615158b1515146109ba57505050610ae6565b505b505b818584815181106109cb57fe5b602002602001018181525050606582815481106109e457fe5b600091825260209182902060408051600593909302909101805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a0830184815292939092849290918491840182828015610a875780601f10610a5c57610100808354040283529160200191610a87565b820191906000526020600020905b815481529060010190602001808311610a6a57829003601f168201915b505050918352505060018201546001600160a01b0390811660208301526002830154166040820152600382015460608201526004909101546080909101528451859085908110610ad357fe5b6020908102919091010152506001909101905b600101610867565b5091945092505050915091565b60685460ff1681565b606b6020526000908152604090205460ff1681565b6001600160a01b0381166000908152606a6020908152604091829020805483518184028101840190945280845260609392830182828015610b8357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b65575b505050505090505b919050565b6060806000805b606554811015610c555760658181548110610bae57fe5b60009182526020918290206002600590920201015460408051630b09572160e41b815290516001600160a01b039092169263b095721092600480840193829003018186803b158015610bff57600080fd5b505afa925050508015610c2f575060408051601f3d908101601f19168201909252610c2c918101906124b1565b60015b610c3857610c46565b8015610c445750610c4d565b505b6001909101905b600101610b97565b5060008167ffffffffffffffff81118015610c6f57600080fd5b50604051908082528060200260200182016040528015610c99578160200160208202803683370190505b50905060008267ffffffffffffffff81118015610cb557600080fd5b50604051908082528060200260200182016040528015610cef57816020015b610cdc6122e1565b815260200190600190039081610cd45790505b5090506000805b606554811015610ed45760658181548110610d0d57fe5b60009182526020918290206002600590920201015460408051630b09572160e41b815290516001600160a01b039092169263b095721092600480840193829003018186803b158015610d5e57600080fd5b505afa925050508015610d8e575060408051601f3d908101601f19168201909252610d8b918101906124b1565b60015b610d9757610da5565b8015610da35750610ecc565b505b80848381518110610db257fe5b60200260200101818152505060658181548110610dcb57fe5b600091825260209182902060408051600593909302909101805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a0830184815292939092849290918491840182828015610e6e5780601f10610e4357610100808354040283529160200191610e6e565b820191906000526020600020905b815481529060010190602001808311610e5157829003601f168201915b505050918352505060018201546001600160a01b0390811660208301526002830154166040820152600382015460608201526004909101546080909101528351849084908110610eba57fe5b60209081029190910101526001909101905b600101610cf6565b50919450925050509091565b6000806001600160a01b038716610f095760405162461bcd60e51b815260040161041590612a84565b6001600160a01b038316610f2f5760405162461bcd60e51b815260040161041590612bc9565b6000338943604051602001610f46939291906127da565b604051602081830303815290604052805190602001209050600060405180602001610f7090612322565b601f1982820381018352601f909101166040819052610f929190602001612819565b60405160208183030381529060405290506000610fb160008484611cdc565b60405163e992a04160e01b815290915081906001600160a01b0382169063e992a04190610fe2908e90600401612835565b602060405180830381600087803b158015610ffc57600080fd5b505af1158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190612675565b156110515760405162461bcd60e51b815260040161041590612b76565b604051630ea826e360e11b81528b906001600160a01b03821690631d504dc69061107f908590600401612835565b600060405180830381600087803b15801561109957600080fd5b505af11580156110ad573d6000803e3d6000fd5b505060405163317b0b7760e01b81528592506001600160a01b038316915063317b0b77906110df908e90600401612d4a565b602060405180830381600087803b1580156110f957600080fd5b505af115801561110d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111319190612675565b1561114e5760405162461bcd60e51b8152600401610415906129a4565b604051634fd42e1760e01b81526001600160a01b03821690634fd42e179061117a908d90600401612d4a565b602060405180830381600087803b15801561119457600080fd5b505af11580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190612675565b156111e95760405162461bcd60e51b815260040161041590612a06565b6040516355ee1fe160e01b81526001600160a01b038216906355ee1fe190611215908c90600401612835565b602060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112679190612675565b156112845760405162461bcd60e51b815260040161041590612a4f565b8b1561132657604051634a956fad60e11b81526001600160a01b0382169063952adf5a906112b790600190600401612959565b602060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113099190612675565b156113265760405162461bcd60e51b815260040161041590612c13565b604051636a9998b360e11b81526001600160a01b0382169063d53331669061135390600190600401612959565b602060405180830381600087803b15801561136d57600080fd5b505af1158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190612675565b156113c25760405162461bcd60e51b815260040161041590612ae1565b604051632dc7468360e21b81526001600160a01b0384169063b71d1a0c906113ee903390600401612835565b602060405180830381600087803b15801561140857600080fd5b505af115801561141c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114409190612675565b1561145d5760405162461bcd60e51b815260040161041590612b2c565b6114678e85611df5565b9e939d50929b505050505050505050505050565b611483611cd8565b6001600160a01b0316611494611527565b6001600160a01b0316146114dd576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b61153e611cd8565b6001600160a01b031661154f611527565b6001600160a01b031614611598576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b816115b55760405162461bcd60e51b815260040161041590612c61565b60005b828110156116165781606960008686858181106115d157fe5b90506020020160208101906115e691906123d6565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556001016115b8565b50505050565b6001600160a01b038116600090815260666020526040812054606091829167ffffffffffffffff8111801561165057600080fd5b5060405190808252806020026020018201604052801561167a578160200160208202803683370190505b506001600160a01b0385166000908152606660205260408120549192509067ffffffffffffffff811180156116ae57600080fd5b506040519080825280602002602001820160405280156116e857816020015b6116d56122e1565b8152602001906001900390816116cd5790505b50905060005b6001600160a01b03861660009081526066602052604090205481101561189e576001600160a01b038616600090815260666020526040902080548290811061173257fe5b906000526020600020015483828151811061174957fe5b602002602001018181525050606560666000886001600160a01b03166001600160a01b03168152602001908152602001600020828154811061178757fe5b90600052602060002001548154811061179c57fe5b600091825260209182902060408051600593909302909101805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a083018481529293909284929091849184018282801561183f5780601f106118145761010080835404028352916020019161183f565b820191906000526020600020905b81548152906001019060200180831161182257829003601f168201915b505050918352505060018201546001600160a01b039081166020830152600283015416604082015260038201546060820152600490910154608090910152825183908390811061188b57fe5b60209081029190910101526001016116ee565b509092509050915091565b60696020526000908152604090205460ff1681565b606581815481106118ce57600080fd5b60009182526020918290206005919091020180546040805160026001841615610100026000190190931692909204601f8101859004850283018501909152808252919350918391908301828280156119675780601f1061193c57610100808354040283529160200191611967565b820191906000526020600020905b81548152906001019060200180831161194a57829003601f168201915b5050505060018301546002840154600385015460049095015493946001600160a01b03928316949290911692509085565b600054610100900460ff16806119b157506119b1611ff3565b806119bf575060005460ff16155b6119fa5760405162461bcd60e51b815260040180806020018281038252602e815260200180613952602e913960400191505060405180910390fd5b600054610100900460ff16158015611a25576000805460ff1961ff0019909116610100171660011790555b611a2d612004565b6068805460ff191684151517905560005b8251811015611a9357600160696000858481518110611a5957fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101611a3e565b508015611aa6576000805461ff00191690555b505050565b60606065805480602002602001604051908101604052809291908181526020016000905b82821015611bcc5760008481526020908190206040805160058602909201805460026001821615610100026000190190911604601f8101859004909402830160c090810190925260a0830184815292939092849290918491840182828015611b785780601f10611b4d57610100808354040283529160200191611b78565b820191906000526020600020905b815481529060010190602001808311611b5b57829003601f168201915b50505091835250506001828101546001600160a01b03908116602080850191909152600285015490911660408401526003840154606084015260049093015460809092019190915291835292019101611acf565b50505050905090565b611bdd611cd8565b6001600160a01b0316611bee611527565b6001600160a01b031614611c37576040805162461bcd60e51b81526020600482018190526024820152600080516020613980833981519152604482015290519081900360640190fd5b6001600160a01b038116611c7c5760405162461bcd60e51b815260040180806020018281038252602681526020018061392c6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60008084471015611d34576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b8251611d87576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f590506001600160a01b038116611ded576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b6001600160a01b03811660009081526067602052604081205460ff1615611e2e5760405162461bcd60e51b815260040161041590612cc1565b60685460ff161580611e4f57503360009081526069602052604090205460ff165b611e6b5760405162461bcd60e51b815260040161041590612d06565b606483511115611e8d5760405162461bcd60e51b815260040161041590612c91565b6040805160a081018252848152336020808301919091526001600160a01b0385169282019290925243606082015242608082015260658054600181018255600091909152815180519293849360059093027f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c70192611f0e928492019061232f565b50602082810151600183810180546001600160a01b03199081166001600160a01b0394851617909155604080870151600287018054909316908516179091556060860151600386015560809095015160049094019390935533600090815260668352848120606580548254808801845592845285842060001991820193019290925592891682526067909352849020805460ff1916909317909255905491517f18075ab463b4dc5842f37ecd67abeb192eda5d073f2c08509e189ad173d5c02092611fdc9201908490612d6a565b60405180910390a150506065546000190192915050565b6000611ffe306120b6565b15905090565b600054610100900460ff168061201d575061201d611ff3565b8061202b575060005460ff16155b6120665760405162461bcd60e51b815260040180806020018281038252602e815260200180613952602e913960400191505060405180910390fd5b600054610100900460ff16158015612091576000805460ff1961ff0019909116610100171660011790555b6120996120bc565b6120a161215c565b80156120b3576000805461ff00191690555b50565b3b151590565b600054610100900460ff16806120d557506120d5611ff3565b806120e3575060005460ff16155b61211e5760405162461bcd60e51b815260040180806020018281038252602e815260200180613952602e913960400191505060405180910390fd5b600054610100900460ff161580156120a1576000805460ff1961ff00199091166101001716600117905580156120b3576000805461ff001916905550565b600054610100900460ff16806121755750612175611ff3565b80612183575060005460ff16155b6121be5760405162461bcd60e51b815260040180806020018281038252602e815260200180613952602e913960400191505060405180910390fd5b600054610100900460ff161580156121e9576000805460ff1961ff0019909116610100171660011790555b60006121f3611cd8565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156120b3576000805461ff001916905550565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261228b57600085556122d1565b82601f106122a45782800160ff198235161785556122d1565b828001600101855582156122d1579182015b828111156122d15782358255916020019190600101906122b6565b506122dd9291506123ab565b5090565b6040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b610b3580612df783390190565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261236557600085556122d1565b82601f1061237e57805160ff19168380011785556122d1565b828001600101855582156122d1579182015b828111156122d1578251825591602001919060010190612390565b5b808211156122dd57600081556001016123ac565b8035610b8b81612dd3565b8035610b8b81612de8565b6000602082840312156123e7578081fd5b81356123f281612dd3565b9392505050565b60006020828403121561240a578081fd5b81516123f281612dd3565b600080600060408486031215612429578182fd5b833567ffffffffffffffff80821115612440578384fd5b818601915086601f830112612453578384fd5b813581811115612461578485fd5b8760208083028501011115612474578485fd5b6020928301955093505084013561248a81612de8565b809150509250925092565b6000602082840312156124a6578081fd5b81356123f281612de8565b6000602082840312156124c2578081fd5b81516123f281612de8565b600080604083850312156124df578182fd5b82356124ea81612de8565b915060208381013567ffffffffffffffff80821115612507578384fd5b818601915086601f83011261251a578384fd5b81358181111561252657fe5b8381029150612536848301612d83565b8181528481019084860184860187018b1015612550578788fd5b8795505b8386101561257e578035945061256985612dd3565b84835260019590950194918601918601612554565b508096505050505050509250929050565b60008060008060008060c087890312156125a7578182fd5b863567ffffffffffffffff808211156125be578384fd5b818901915089601f8301126125d1578384fd5b81356020828211156125df57fe5b6125f1601f8301601f19168201612d83565b92508183528b81838601011115612606578586fd5b818185018285013785818385010152829950612623818c016123c0565b985050505050612635604088016123cb565b9350606087013592506080870135915061265160a088016123c0565b90509295509295509295565b60006020828403121561266e578081fd5b5035919050565b600060208284031215612686578081fd5b5051919050565b6000806000604084860312156126a1578283fd5b83359250602084013567ffffffffffffffff808211156126bf578384fd5b818601915086601f8301126126d2578384fd5b8135818111156126e0578485fd5b8760208285010111156126f1578485fd5b6020830194508093505050509250925092565b6000815180845260208085018081965082840281019150828601855b8581101561274a578284038952612738848351612783565b98850198935090840190600101612720565b5091979650505050505050565b6000815180845261276f816020860160208601612da7565b601f01601f19169290920160200192915050565b6000815160a0845261279860a0850182612757565b9050602083015160018060a01b038082166020870152806040860151166040870152505060608301516060850152608083015160808501528091505092915050565b60006bffffffffffffffffffffffff198560601b1682528351612804816014850160208801612da7565b60149201918201929092526034019392505050565b6000825161282b818460208701612da7565b9190910192915050565b6001600160a01b0391909116815260200190565b6040808252810183905260008460608301825b8681101561288c57823561286f81612dd3565b6001600160a01b031682526020928301929091019060010161285c565b5080925050508215156020830152949350505050565b6020808252825182820181905260009190848201906040850190845b818110156128e35783516001600160a01b0316835292840192918401916001016128be565b50909695505050505050565b6000602082526123f26020830184612704565b604080825283519082018190526000906020906060840190828701845b8281101561293b5781518452928401929084019060010161291f565b5050508381038285015261294f8186612704565b9695505050505050565b901515815260200190565b600060a0825261297760a0830188612757565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b6020808252818101527f4661696c656420746f2073657420706f6f6c20636c6f736520666163746f722e604082015260600190565b60208082526013908201527227379030b236b4b7399039bab8383634b2b21760691b604082015260600190565b60208082526029908201527f4661696c656420746f2073657420706f6f6c206c69717569646174696f6e20696040820152683731b2b73a34bb329760b91b606082015260800190565b6020808252818101527f4661696c656420746f2073657420706f6f6c207072696365206f7261636c652e604082015260600190565b60208082526039908201527f4e6f20436f6d7074726f6c6c657220696d706c656d656e746174696f6e20636f60408201527f6e74726163742061646472657373207370656369666965642e00000000000000606082015260800190565b6020808252602b908201527f4661696c656420746f20656e61626c6520706f6f6c206175746f20696d706c6560408201526a36b2b73a30ba34b7b7399760a91b606082015260800190565b6020808252602a908201527f4661696c656420746f207365742070656e64696e672061646d696e206f6e20556040820152693734ba3937b63632b91760b11b606082015260800190565b60208082526033908201527f4661696c656420746f207365742070656e64696e6720696d706c656d656e74616040820152723a34b7b71037b7102ab734ba3937b63632b91760691b606082015260800190565b6020808252602a908201527f4e6f2050726963654f7261636c6520636f6e747261637420616464726573732060408201526939b832b1b4b334b2b21760b11b606082015260800190565b6020808252602e908201527f4661696c656420746f20656e666f72636520737570706c6965722f626f72726f60408201526d3bb2b9103bb434ba32b634b9ba1760911b606082015260800190565b6020808252601690820152752737903232b83637bcb2b9399039bab8383634b2b21760511b604082015260600190565b6020808252601690820152752737903837b7b6103730b6b29039bab8383634b2b21760511b604082015260600190565b60208082526025908201527f506f6f6c20616c72656164792065786973747320696e207468652064697265636040820152643a37b93c9760d91b606082015260800190565b60208082526024908201527f53656e646572206973206e6f74206f6e206465706c6f7965722077686974656c60408201526334b9ba1760e11b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b600083825260406020830152611ded6040830184612783565b60405181810167ffffffffffffffff81118282101715612d9f57fe5b604052919050565b60005b83811015612dc2578181015183820152602001612daa565b838111156116165750506000910152565b6001600160a01b03811681146120b357600080fd5b80151581146120b357600080fdfe60806040526001805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b17905534801561003257600080fd5b50600080546001600160a01b03191633179055610ae1806100546000396000f3fe6080604052600436106100a75760003560e01c8063bb82aa5e11610064578063bb82aa5e14610436578063c1e803341461044b578063dcfbc0c714610460578063e992a04114610475578063e9c714f2146104a8578063f851a440146104bd576100a7565b80630225ab9d1461032a5780630a755ec21461036857806326782247146103915780632f1069ba146103c25780636f63af0b146103d7578063b71d1a0c14610403575b3330146102a75760408051600481526024810182526020810180516001600160e01b0316633757348b60e21b17815291518151600093849330939092909182918083835b6020831061010a5780518252601f1990920191602091820191016100eb565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461016a576040519150601f19603f3d011682016040523d82523d6000602084013e61016f565b606091505b5091509150600082156101965781806020019051602081101561019157600080fd5b505190505b80156102a3576002546040805163bbcdd6d360e01b81526001600160a01b0390921660048301525160009173374adc9ec5a177694ac805cb57e5a2a61217c1ab9163bbcdd6d391602480820192602092909190829003018186803b1580156101fd57600080fd5b505afa158015610211573d6000803e3d6000fd5b505050506040513d602081101561022757600080fd5b50516002549091506001600160a01b038083169116146102a157600280546001600160a01b038381166001600160a01b0319831617928390556040805192821680845293909116602083015280517fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a9281900390910190a1505b505b5050505b6002546040516000916001600160a01b031690829036908083838082843760405192019450600093509091505080830381855af49150503d806000811461030a576040519150601f19603f3d011682016040523d82523d6000602084013e61030f565b606091505b505090506040513d6000823e818015610326573d82f35b3d82fd5b34801561033657600080fd5b506103566004803603602081101561034d57600080fd5b503515156104d2565b60408051918252519081900360200190f35b34801561037457600080fd5b5061037d61056e565b604080519115158252519081900360200190f35b34801561039d57600080fd5b506103a661057e565b604080516001600160a01b039092168252519081900360200190f35b3480156103ce57600080fd5b5061037d61058d565b3480156103e357600080fd5b50610356600480360360208110156103fa57600080fd5b5035151561059d565b34801561040f57600080fd5b506103566004803603602081101561042657600080fd5b50356001600160a01b0316610639565b34801561044257600080fd5b506103a66106bc565b34801561045757600080fd5b506103566106cb565b34801561046c57600080fd5b506103a66107c6565b34801561048157600080fd5b506103566004803603602081101561049857600080fd5b50356001600160a01b03166107d5565b3480156104b457600080fd5b506103566108f5565b3480156104c957600080fd5b506103a66109db565b60006104dc6109ea565b6104f3576104ec60016005610a45565b9050610569565b60015460ff600160a81b90910416151582151514156105135760006104ec565b60018054831515600160a81b810260ff60a81b199092169190911790915560408051918252517f10f9a0a95673b0837d1dce21fd3bffcb6d760435e9b5300b75a271182f75f8229181900360200190a160005b90505b919050565b600154600160a81b900460ff1681565b6001546001600160a01b031681565b600154600160a01b900460ff1681565b60006105a76109ea565b6105b7576104ec60016005610a45565b60015460ff600160a01b90910416151582151514156105d75760006104ec565b60018054831515600160a01b90810260ff60a01b199092169190911791829055604080519190920460ff161515815290517fabb56a15fd39488c914b324690b88f30d7daec63d2131ca0ef47e5739068c86e9181900360200190a16000610566565b60006106436109ea565b610653576104ec60016010610a45565b600180546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a160005b9392505050565b6002546001600160a01b031681565b6003546000906001600160a01b0316331415806106f157506003546001600160a01b0316155b1561070857610701600180610a45565b90506107c3565b60028054600380546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a92908290030190a1600354604080516001600160a01b038085168252909216602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160005b925050505b90565b6003546001600160a01b031681565b60006107df6109ea565b6107ef576104ec60016012610a45565b60025460408051639d244f9f60e01b81526001600160a01b03928316600482015291841660248301525173374adc9ec5a177694ac805cb57e5a2a61217c1ab91639d244f9f916044808301926020929190829003018186803b15801561085457600080fd5b505afa158015610868573d6000803e3d6000fd5b505050506040513d602081101561087e57600080fd5b5051610890576104ec60016011610a45565b600380546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160006106b5565b6001546000906001600160a01b031633141580610910575033155b156109215761070160016000610a45565b60008054600180546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600154604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160006107be565b6000546001600160a01b031681565b600080546001600160a01b031633148015610a0e5750600154600160a81b900460ff165b80610a4057503373374adc9ec5a177694ac805cb57e5a2a61217c1ab148015610a405750600154600160a01b900460ff165b905090565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836015811115610a7457fe5b83601b811115610a8057fe5b604080519283526020830191909152600082820152519081900360600190a18260158111156106b557fefea264697066735822122032c738cd6a6a8985db281fab0ad2d91830ffe18ba68488476a965c780e5f067c64736f6c634300070600334f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220351d92821b2789336bf269a2727dd889d8c45a1769b75913d3703d0b9a1d1be964736f6c63430007060033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "events": {
      "AdminWhitelistUpdated(address[],bool)": {
        "details": "Event emitted when the admin whitelist is updated."
      },
      "PoolRegistered(uint256,(string,address,address,uint256,uint256))": {
        "details": "Emitted when a new Fuse pool is added to the directory."
      }
    },
    "kind": "dev",
    "methods": {
      "_editAdminWhitelist(address[],bool)": {
        "details": "Adds/removes Ethereum accounts to the admin whitelist.",
        "params": {
          "admins": "Array of Ethereum accounts to be whitelisted.",
          "status": "Whether to add or remove the accounts."
        }
      },
      "_editDeployerWhitelist(address[],bool)": {
        "details": "Adds/removes Ethereum accounts to the deployer whitelist.",
        "params": {
          "deployers": "Array of Ethereum accounts to be whitelisted.",
          "status": "Whether to add or remove the accounts."
        }
      },
      "_setDeployerWhitelistEnforcement(bool)": {
        "details": "Controls if the deployer whitelist is to be enforced.",
        "params": {
          "enforce": "Boolean indicating if the deployer whitelist is to be enforced."
        }
      },
      "deployPool(string,address,bool,uint256,uint256,address)": {
        "details": "Deploys a new Fuse pool and adds to the directory.",
        "params": {
          "closeFactor": "The pool's close factor (scaled by 1e18).",
          "enforceWhitelist": "Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.",
          "implementation": "The Comptroller implementation contract address.",
          "liquidationIncentive": "The pool's liquidation incentive (scaled by 1e18).",
          "name": "The name of the pool.",
          "priceOracle": "The pool's PriceOracle contract address."
        },
        "returns": {
          "_0": "The index of the registered Fuse pool and the Unitroller proxy address."
        }
      },
      "getAllPools()": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive."
      },
      "getPublicPools()": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive."
      },
      "getPublicPoolsByVerification(bool)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive."
      },
      "initialize(bool,address[])": {
        "details": "Initializes a deployer whitelist if desired.",
        "params": {
          "_deployerWhitelist": "Array of Ethereum accounts to be whitelisted.",
          "_enforceDeployerWhitelist": "Boolean indicating if the deployer whitelist is to be enforced."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_bookmarks": {
        "details": "Maps Ethereum accounts to arrays of Fuse pool Comptroller proxy contract addresses."
      },
      "_poolsByAccount": {
        "details": "Maps Ethereum accounts to arrays of Fuse pool indexes."
      },
      "adminWhitelist": {
        "details": "Maps Ethereum accounts to booleans indicating if they are a whitelisted admin."
      },
      "deployerWhitelist": {
        "details": "Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools."
      },
      "enforceDeployerWhitelist": {
        "details": "Booleans indicating if the deployer whitelist is enforced."
      },
      "poolExists": {
        "details": "Maps Fuse pool Comptroller addresses to bools indicating if they have been registered via the directory."
      },
      "pools": {
        "details": "Array of Fuse interest rate pools."
      }
    },
    "title": "FusePoolDirectory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bookmarkPool(address)": {
        "notice": "Bookmarks a Fuse pool Unitroller (Comptroller proxy) contract addresses."
      },
      "getAllPools()": {
        "notice": "Returns arrays of all Fuse pools' data."
      },
      "getBookmarks(address)": {
        "notice": "Returns arrays of Fuse pool Unitroller (Comptroller proxy) contract addresses bookmarked by `account`."
      },
      "getPoolsByAccount(address)": {
        "notice": "Returns arrays of Fuse pool indexes and data created by `account`."
      },
      "getPublicPools()": {
        "notice": "Returns arrays of all public Fuse pool indexes and data."
      },
      "getPublicPoolsByVerification(bool)": {
        "notice": "Returns arrays of all public Fuse pool indexes and data with whitelisted admins."
      },
      "setPoolName(uint256,string)": {
        "notice": "Modify existing Fuse pool name."
      }
    },
    "notice": "FusePoolDirectory is a directory for Fuse interest rate pools.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 572,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 575,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1740,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2865,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "pools",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_struct(FusePool)2861_storage)dyn_storage"
      },
      {
        "astId": 2871,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "_poolsByAccount",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2876,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "poolExists",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2886,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "enforceDeployerWhitelist",
        "offset": 0,
        "slot": "104",
        "type": "t_bool"
      },
      {
        "astId": 2891,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "deployerWhitelist",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3438,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "_bookmarks",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3516,
        "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
        "label": "adminWhitelist",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(FusePool)2861_storage)dyn_storage": {
        "base": "t_struct(FusePool)2861_storage",
        "encoding": "dynamic_array",
        "label": "struct FusePoolDirectory.FusePool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FusePool)2861_storage": {
        "encoding": "inplace",
        "label": "struct FusePoolDirectory.FusePool",
        "members": [
          {
            "astId": 2852,
            "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2854,
            "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2856,
            "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
            "label": "comptroller",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2858,
            "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
            "label": "blockPosted",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2860,
            "contract": "contracts/FusePoolDirectory.sol:FusePoolDirectory",
            "label": "timestampPosted",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}