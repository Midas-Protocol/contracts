{
  "address": "0x88f0be4D7e71D25D805476e6214EAdF8B1D68a6c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract FusePoolDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract ICToken",
          "name": "cTokenModify",
          "type": "address"
        }
      ],
      "name": "getMaxBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract ICToken",
          "name": "cTokenModify",
          "type": "address"
        }
      ],
      "name": "getMaxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IComptroller",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "getPoolOwnership",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "adminHasRights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "fuseAdminHasRights",
              "type": "bool"
            }
          ],
          "internalType": "struct FusePoolLensSecondary.CTokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IComptroller",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "getRewardSpeedsByPool",
      "outputs": [
        {
          "internalType": "contract ICToken[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "contract IRewardsDistributor[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IComptroller[]",
          "name": "comptrollers",
          "type": "address[]"
        }
      ],
      "name": "getRewardSpeedsByPools",
      "outputs": [
        {
          "internalType": "contract ICToken[][]",
          "name": "",
          "type": "address[][]"
        },
        {
          "internalType": "contract IRewardsDistributor[][]",
          "name": "",
          "type": "address[][]"
        },
        {
          "internalType": "address[][]",
          "name": "",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[][][]",
          "name": "",
          "type": "uint256[][][]"
        },
        {
          "internalType": "uint256[][][]",
          "name": "",
          "type": "uint256[][][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        }
      ],
      "name": "getRewardsDistributorsBySupplier",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IComptroller[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "contract IRewardsDistributor[][]",
          "name": "",
          "type": "address[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract IRewardsDistributor[]",
          "name": "distributors",
          "type": "address[]"
        }
      ],
      "name": "getUnclaimedRewardsByDistributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "contract ICToken[][]",
          "name": "",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[2][][]",
          "name": "",
          "type": "uint256[2][][]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FusePoolDirectory",
          "name": "_directory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialLogic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    }
  ],
  "transactionHash": "0xf2d5545790ceeaf56c6307fbfa5594912a8801524f09121c26ff5b1f66c97c71",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 6,
    "gasUsed": "2652913",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa2e61a81a6a356c8eebc6108dea07c9824087e85f458b42a5a46d1922b4320f2",
    "transactionHash": "0xf2d5545790ceeaf56c6307fbfa5594912a8801524f09121c26ff5b1f66c97c71",
    "logs": [],
    "blockNumber": 17416648,
    "cumulativeGasUsed": "3071045",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "614790565b8c7986374ea2a0c06a77bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract FusePoolDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"cTokenModify\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"cTokenModify\",\"type\":\"address\"}],\"name\":\"getMaxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getPoolOwnership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"adminHasRights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fuseAdminHasRights\",\"type\":\"bool\"}],\"internalType\":\"struct FusePoolLensSecondary.CTokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getRewardSpeedsByPool\",\"outputs\":[{\"internalType\":\"contract ICToken[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"contract IRewardsDistributor[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller[]\",\"name\":\"comptrollers\",\"type\":\"address[]\"}],\"name\":\"getRewardSpeedsByPools\",\"outputs\":[{\"internalType\":\"contract ICToken[][]\",\"name\":\"\",\"type\":\"address[][]\"},{\"internalType\":\"contract IRewardsDistributor[][]\",\"name\":\"\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][][]\",\"name\":\"\",\"type\":\"uint256[][][]\"},{\"internalType\":\"uint256[][][]\",\"name\":\"\",\"type\":\"uint256[][][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"getRewardsDistributorsBySupplier\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IComptroller[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"contract IRewardsDistributor[][]\",\"name\":\"\",\"type\":\"address[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsDistributor[]\",\"name\":\"distributors\",\"type\":\"address[]\"}],\"name\":\"getUnclaimedRewardsByDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"contract ICToken[][]\",\"name\":\"\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FusePoolDirectory\",\"name\":\"_directory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"kind\":\"dev\",\"methods\":{\"getMaxBorrow(address,address)\":{\"params\":{\"account\":\"The account to determine liquidity for.\",\"cTokenModify\":\"The market to hypothetically borrow in.\"},\"returns\":{\"_0\":\"Maximum borrow amount.\"}},\"getMaxRedeem(address,address)\":{\"params\":{\"account\":\"The account to determine liquidity for.\",\"cTokenModify\":\"The market to hypothetically redeem in.\"},\"returns\":{\"_0\":\"Maximum redeem amount.\"}},\"getPoolOwnership(address)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\"},\"getRewardSpeedsByPool(address)\":{\"params\":{\"comptroller\":\"The Fuse pool Comptroller to check.\"}},\"getRewardSpeedsByPools(address[])\":{\"params\":{\"comptrollers\":\"The Fuse pool Comptrollers to check.\"}},\"getRewardsDistributorsBySupplier(address)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive.\"},\"getUnclaimedRewardsByDistributors(address,address[])\":{\"params\":{\"distributors\":\"The `RewardsDistributor` contracts to check.\",\"holder\":\"The address to check.\"},\"returns\":{\"_0\":\"For each of `distributors`: total quantity of unclaimed rewards, array of cTokens, array of unaccrued (unclaimed) supply-side and borrow-side rewards per cToken, and quantity of funds available in the distributor.\"}}},\"title\":\"FusePoolLensSecondary\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"directory()\":{\"notice\":\"`FusePoolDirectory` contract object.\"},\"getMaxBorrow(address,address)\":{\"notice\":\"Determine the maximum borrow amount of a cToken.\"},\"getMaxRedeem(address,address)\":{\"notice\":\"Determine the maximum redeem amount of a cToken.\"},\"getPoolOwnership(address)\":{\"notice\":\"Returns the admin, admin rights, Fuse admin (constant), Fuse admin rights, and an array of cTokens with differing properties.\"},\"getRewardSpeedsByPool(address)\":{\"notice\":\"Returns an array of all markets, an array of all `RewardsDistributor` contracts, an array of reward token addresses for each `RewardsDistributor`, an array of supply speeds for each distributor for each, and their borrow speeds.\"},\"getRewardSpeedsByPools(address[])\":{\"notice\":\"For each `Comptroller`, returns an array of all markets, an array of all `RewardsDistributor` contracts, an array of reward token addresses for each `RewardsDistributor`, an array of supply speeds for each distributor for each, and their borrow speeds.\"},\"getRewardsDistributorsBySupplier(address)\":{\"notice\":\"Returns arrays of indexes, `Comptroller` proxy contracts, and `RewardsDistributor` contracts for Fuse pools supplied to by `account`.\"},\"getUnclaimedRewardsByDistributors(address,address[])\":{\"notice\":\"Returns all unclaimed rewards accrued by the `holder` on `distributors`.\"},\"initialize(address)\":{\"notice\":\"Constructor to set the `FusePoolDirectory` contract object.\"}},\"notice\":\"FusePoolLensSecondary returns data on Fuse interest rate pools in mass for viewing by dApps, bots, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FusePoolLensSecondary.sol\":\"FusePoolLensSecondary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2Upgradeable {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xbdec72f55ce6d1f234cde556b3e38fc0f739f46e9288cc4ae32b9334365889db\",\"license\":\"MIT\"},\"contracts/FusePoolDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\\\";\\n\\nimport \\\"./external/compound/IComptroller.sol\\\";\\nimport \\\"./external/compound/IUnitroller.sol\\\";\\nimport \\\"./external/compound/IPriceOracle.sol\\\";\\nimport \\\"./compound/Unitroller.sol\\\";\\n\\n/**\\n * @title FusePoolDirectory\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice FusePoolDirectory is a directory for Fuse interest rate pools.\\n */\\ncontract FusePoolDirectory is OwnableUpgradeable {\\n  /**\\n   * @dev Initializes a deployer whitelist if desired.\\n   * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\\n   * @param _deployerWhitelist Array of Ethereum accounts to be whitelisted.\\n   */\\n  function initialize(bool _enforceDeployerWhitelist, address[] memory _deployerWhitelist) public initializer {\\n    __Ownable_init();\\n    enforceDeployerWhitelist = _enforceDeployerWhitelist;\\n    for (uint256 i = 0; i < _deployerWhitelist.length; i++) deployerWhitelist[_deployerWhitelist[i]] = true;\\n  }\\n\\n  /**\\n   * @dev Struct for a Fuse interest rate pool.\\n   */\\n  struct FusePool {\\n    string name;\\n    address creator;\\n    address comptroller;\\n    uint256 blockPosted;\\n    uint256 timestampPosted;\\n  }\\n\\n  /**\\n   * @dev Array of Fuse interest rate pools.\\n   */\\n  FusePool[] public pools;\\n\\n  /**\\n   * @dev Maps Ethereum accounts to arrays of Fuse pool indexes.\\n   */\\n  mapping(address => uint256[]) private _poolsByAccount;\\n\\n  /**\\n   * @dev Maps Fuse pool Comptroller addresses to bools indicating if they have been registered via the directory.\\n   */\\n  mapping(address => bool) public poolExists;\\n\\n  /**\\n   * @dev Emitted when a new Fuse pool is added to the directory.\\n   */\\n  event PoolRegistered(uint256 index, FusePool pool);\\n\\n  /**\\n   * @dev Booleans indicating if the deployer whitelist is enforced.\\n   */\\n  bool public enforceDeployerWhitelist;\\n\\n  /**\\n   * @dev Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\\n   */\\n  mapping(address => bool) public deployerWhitelist;\\n\\n  /**\\n   * @dev Controls if the deployer whitelist is to be enforced.\\n   * @param enforce Boolean indicating if the deployer whitelist is to be enforced.\\n   */\\n  function _setDeployerWhitelistEnforcement(bool enforce) external onlyOwner {\\n    enforceDeployerWhitelist = enforce;\\n  }\\n\\n  /**\\n   * @dev Adds/removes Ethereum accounts to the deployer whitelist.\\n   * @param deployers Array of Ethereum accounts to be whitelisted.\\n   * @param status Whether to add or remove the accounts.\\n   */\\n  function _editDeployerWhitelist(address[] calldata deployers, bool status) external onlyOwner {\\n    require(deployers.length > 0, \\\"No deployers supplied.\\\");\\n    for (uint256 i = 0; i < deployers.length; i++) deployerWhitelist[deployers[i]] = status;\\n  }\\n\\n  /**\\n   * @dev Adds a new Fuse pool to the directory (without checking msg.sender).\\n   * @param name The name of the pool.\\n   * @param comptroller The pool's Comptroller proxy contract address.\\n   * @return The index of the registered Fuse pool.\\n   */\\n  function _registerPool(string memory name, address comptroller) internal returns (uint256) {\\n    require(!poolExists[comptroller], \\\"Pool already exists in the directory.\\\");\\n    require(!enforceDeployerWhitelist || deployerWhitelist[msg.sender], \\\"Sender is not on deployer whitelist.\\\");\\n    require(bytes(name).length <= 100, \\\"No pool name supplied.\\\");\\n    FusePool memory pool = FusePool(name, msg.sender, comptroller, block.number, block.timestamp);\\n    pools.push(pool);\\n    _poolsByAccount[msg.sender].push(pools.length - 1);\\n    poolExists[comptroller] = true;\\n    emit PoolRegistered(pools.length - 1, pool);\\n    return pools.length - 1;\\n  }\\n\\n  /**\\n   * @dev Deploys a new Fuse pool and adds to the directory.\\n   * @param name The name of the pool.\\n   * @param implementation The Comptroller implementation contract address.\\n   * @param constructorData The FuseFeeDistributor contract address.\\n   * @param enforceWhitelist Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\\n   * @param closeFactor The pool's close factor (scaled by 1e18).\\n   * @param liquidationIncentive The pool's liquidation incentive (scaled by 1e18).\\n   * @param priceOracle The pool's PriceOracle contract address.\\n   * @return The index of the registered Fuse pool and the Unitroller proxy address.\\n   */\\n  function deployPool(\\n    string memory name,\\n    address implementation,\\n    bytes calldata constructorData,\\n    bool enforceWhitelist,\\n    uint256 closeFactor,\\n    uint256 liquidationIncentive,\\n    address priceOracle\\n  ) external returns (uint256, address) {\\n    // Input validation\\n    require(implementation != address(0), \\\"No Comptroller implementation contract address specified.\\\");\\n    require(priceOracle != address(0), \\\"No PriceOracle contract address specified.\\\");\\n\\n    // Deploy CEtherDelegator using msg.sender, underlying, and block.number as a salt\\n    //        bytes32 salt = keccak256(abi.encodePacked(msg.sender, address(0), block.number));\\n    //\\n\\n    //        address proxy = Create2Upgradeable.deploy(0, salt, cEtherDelegatorCreationCode);\\n\\n    // Deploy Unitroller using msg.sender, name, and block.number as a salt\\n    bytes memory unitrollerCreationCode = abi.encodePacked(type(Unitroller).creationCode, constructorData);\\n    address proxy = Create2Upgradeable.deploy(\\n      0,\\n      keccak256(abi.encodePacked(msg.sender, name, block.number)),\\n      unitrollerCreationCode\\n    );\\n\\n    // Setup Unitroller\\n    IUnitroller unitroller = IUnitroller(proxy);\\n    require(\\n      unitroller._setPendingImplementation(implementation) == 0,\\n      \\\"Failed to set pending implementation on Unitroller.\\\"\\n    ); // Checks Comptroller implementation whitelist\\n    IComptroller comptrollerImplementation = IComptroller(implementation);\\n    comptrollerImplementation._become(unitroller);\\n    IComptroller comptrollerProxy = IComptroller(proxy);\\n\\n    // Set pool parameters\\n    require(comptrollerProxy._setCloseFactor(closeFactor) == 0, \\\"Failed to set pool close factor.\\\");\\n    require(\\n      comptrollerProxy._setLiquidationIncentive(liquidationIncentive) == 0,\\n      \\\"Failed to set pool liquidation incentive.\\\"\\n    );\\n    require(comptrollerProxy._setPriceOracle(IPriceOracle(priceOracle)) == 0, \\\"Failed to set pool price oracle.\\\");\\n\\n    // Whitelist\\n    if (enforceWhitelist)\\n      require(comptrollerProxy._setWhitelistEnforcement(true) == 0, \\\"Failed to enforce supplier/borrower whitelist.\\\");\\n\\n    // Enable auto-implementation\\n    require(comptrollerProxy._toggleAutoImplementations(true) == 0, \\\"Failed to enable pool auto implementations.\\\");\\n\\n    // Make msg.sender the admin\\n    require(unitroller._setPendingAdmin(msg.sender) == 0, \\\"Failed to set pending admin on Unitroller.\\\");\\n\\n    // Register the pool with this FusePoolDirectory\\n    return (_registerPool(name, proxy), proxy);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all Fuse pools' data.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getAllPools() external view returns (FusePool[] memory) {\\n    return pools;\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all public Fuse pool indexes and data.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getPublicPools() external view returns (uint256[] memory, FusePool[] memory) {\\n    uint256 arrayLength = 0;\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      try IComptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n        if (enforceWhitelist) continue;\\n      } catch {}\\n\\n      arrayLength++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](arrayLength);\\n    FusePool[] memory publicPools = new FusePool[](arrayLength);\\n    uint256 index = 0;\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      try IComptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n        if (enforceWhitelist) continue;\\n      } catch {}\\n\\n      indexes[index] = i;\\n      publicPools[index] = pools[i];\\n      index++;\\n    }\\n\\n    return (indexes, publicPools);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of Fuse pool indexes and data created by `account`.\\n   */\\n  function getPoolsByAccount(address account) external view returns (uint256[] memory, FusePool[] memory) {\\n    uint256[] memory indexes = new uint256[](_poolsByAccount[account].length);\\n    FusePool[] memory accountPools = new FusePool[](_poolsByAccount[account].length);\\n\\n    for (uint256 i = 0; i < _poolsByAccount[account].length; i++) {\\n      indexes[i] = _poolsByAccount[account][i];\\n      accountPools[i] = pools[_poolsByAccount[account][i]];\\n    }\\n\\n    return (indexes, accountPools);\\n  }\\n\\n  /**\\n   * @dev Maps Ethereum accounts to arrays of Fuse pool Comptroller proxy contract addresses.\\n   */\\n  mapping(address => address[]) private _bookmarks;\\n\\n  /**\\n   * @notice Returns arrays of Fuse pool Unitroller (Comptroller proxy) contract addresses bookmarked by `account`.\\n   */\\n  function getBookmarks(address account) external view returns (address[] memory) {\\n    return _bookmarks[account];\\n  }\\n\\n  /**\\n   * @notice Bookmarks a Fuse pool Unitroller (Comptroller proxy) contract addresses.\\n   */\\n  function bookmarkPool(address comptroller) external {\\n    _bookmarks[msg.sender].push(comptroller);\\n  }\\n\\n  /**\\n   * @notice Modify existing Fuse pool name.\\n   */\\n  function setPoolName(uint256 index, string calldata name) external {\\n    IComptroller _comptroller = IComptroller(pools[index].comptroller);\\n    require((msg.sender == _comptroller.admin() && _comptroller.adminHasRights()) || msg.sender == owner());\\n    pools[index].name = name;\\n  }\\n\\n  /**\\n   * @dev Maps Ethereum accounts to booleans indicating if they are a whitelisted admin.\\n   */\\n  mapping(address => bool) public adminWhitelist;\\n\\n  /**\\n   * @dev Event emitted when the admin whitelist is updated.\\n   */\\n  event AdminWhitelistUpdated(address[] admins, bool status);\\n\\n  /**\\n   * @dev Adds/removes Ethereum accounts to the admin whitelist.\\n   * @param admins Array of Ethereum accounts to be whitelisted.\\n   * @param status Whether to add or remove the accounts.\\n   */\\n  function _editAdminWhitelist(address[] calldata admins, bool status) external onlyOwner {\\n    require(admins.length > 0, \\\"No admins supplied.\\\");\\n    for (uint256 i = 0; i < admins.length; i++) adminWhitelist[admins[i]] = status;\\n    emit AdminWhitelistUpdated(admins, status);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all public Fuse pool indexes and data with whitelisted admins.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getPublicPoolsByVerification(bool whitelistedAdmin)\\n    external\\n    view\\n    returns (uint256[] memory, FusePool[] memory)\\n  {\\n    uint256 arrayLength = 0;\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\n        if (enforceWhitelist) continue;\\n\\n        try comptroller.admin() returns (address admin) {\\n          if (whitelistedAdmin != adminWhitelist[admin]) continue;\\n        } catch {}\\n      } catch {}\\n\\n      arrayLength++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](arrayLength);\\n    FusePool[] memory publicPools = new FusePool[](arrayLength);\\n    uint256 index = 0;\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\n        if (enforceWhitelist) continue;\\n\\n        try comptroller.admin() returns (address admin) {\\n          if (whitelistedAdmin != adminWhitelist[admin]) continue;\\n        } catch {}\\n      } catch {}\\n\\n      indexes[index] = i;\\n      publicPools[index] = pools[i];\\n      index++;\\n    }\\n\\n    return (indexes, publicPools);\\n  }\\n}\\n\",\"keccak256\":\"0xa2d76fb5e9744e39591547dc8d825fcac7bb4d99b69fe75e72728760b6cdcdaf\",\"license\":\"UNLICENSED\"},\"contracts/FusePoolLensSecondary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"./external/compound/IComptroller.sol\\\";\\nimport \\\"./external/compound/IPriceOracle.sol\\\";\\nimport \\\"./external/compound/ICToken.sol\\\";\\nimport \\\"./external/compound/IRewardsDistributor.sol\\\";\\n\\nimport \\\"./external/uniswap/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./FusePoolDirectory.sol\\\";\\nimport \\\"./oracles/MasterPriceOracle.sol\\\";\\n\\n/**\\n * @title FusePoolLensSecondary\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice FusePoolLensSecondary returns data on Fuse interest rate pools in mass for viewing by dApps, bots, etc.\\n */\\ncontract FusePoolLensSecondary is Initializable {\\n  /**\\n   * @notice Constructor to set the `FusePoolDirectory` contract object.\\n   */\\n  function initialize(FusePoolDirectory _directory) public initializer {\\n    require(address(_directory) != address(0), \\\"FusePoolDirectory instance cannot be the zero address.\\\");\\n    directory = _directory;\\n  }\\n\\n  /**\\n   * @notice `FusePoolDirectory` contract object.\\n   */\\n  FusePoolDirectory public directory;\\n\\n  /**\\n   * @notice Struct for ownership over a CToken.\\n   */\\n  struct CTokenOwnership {\\n    address cToken;\\n    address admin;\\n    bool adminHasRights;\\n    bool fuseAdminHasRights;\\n  }\\n\\n  /**\\n   * @notice Returns the admin, admin rights, Fuse admin (constant), Fuse admin rights, and an array of cTokens with differing properties.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n   */\\n  function getPoolOwnership(IComptroller comptroller)\\n    external\\n    view\\n    returns (\\n      address,\\n      bool,\\n      bool,\\n      CTokenOwnership[] memory\\n    )\\n  {\\n    // Get pool ownership\\n    address comptrollerAdmin = comptroller.admin();\\n    bool comptrollerAdminHasRights = comptroller.adminHasRights();\\n    bool comptrollerFuseAdminHasRights = comptroller.fuseAdminHasRights();\\n\\n    // Get cToken ownership\\n    ICToken[] memory cTokens = comptroller.getAllMarkets();\\n    uint256 arrayLength = 0;\\n\\n    for (uint256 i = 0; i < cTokens.length; i++) {\\n      ICToken cToken = cTokens[i];\\n      (bool isListed, ) = comptroller.markets(address(cToken));\\n      if (!isListed) continue;\\n\\n      address cTokenAdmin;\\n      try cToken.admin() returns (address _cTokenAdmin) {\\n        cTokenAdmin = _cTokenAdmin;\\n      } catch {\\n        continue;\\n      }\\n      bool cTokenAdminHasRights = cToken.adminHasRights();\\n      bool cTokenFuseAdminHasRights = cToken.fuseAdminHasRights();\\n\\n      // If outlier, push to array\\n      if (\\n        cTokenAdmin != comptrollerAdmin ||\\n        cTokenAdminHasRights != comptrollerAdminHasRights ||\\n        cTokenFuseAdminHasRights != comptrollerFuseAdminHasRights\\n      ) arrayLength++;\\n    }\\n\\n    CTokenOwnership[] memory outliers = new CTokenOwnership[](arrayLength);\\n    uint256 arrayIndex = 0;\\n\\n    for (uint256 i = 0; i < cTokens.length; i++) {\\n      ICToken cToken = cTokens[i];\\n      (bool isListed, ) = comptroller.markets(address(cToken));\\n      if (!isListed) continue;\\n\\n      address cTokenAdmin;\\n      try cToken.admin() returns (address _cTokenAdmin) {\\n        cTokenAdmin = _cTokenAdmin;\\n      } catch {\\n        continue;\\n      }\\n      bool cTokenAdminHasRights = cToken.adminHasRights();\\n      bool cTokenFuseAdminHasRights = cToken.fuseAdminHasRights();\\n\\n      // If outlier, push to array and increment array index\\n      if (\\n        cTokenAdmin != comptrollerAdmin ||\\n        cTokenAdminHasRights != comptrollerAdminHasRights ||\\n        cTokenFuseAdminHasRights != comptrollerFuseAdminHasRights\\n      ) {\\n        outliers[arrayIndex] = CTokenOwnership(\\n          address(cToken),\\n          cTokenAdmin,\\n          cTokenAdminHasRights,\\n          cTokenFuseAdminHasRights\\n        );\\n        arrayIndex++;\\n      }\\n    }\\n\\n    return (comptrollerAdmin, comptrollerAdminHasRights, comptrollerFuseAdminHasRights, outliers);\\n  }\\n\\n  /**\\n   * @notice Determine the maximum redeem amount of a cToken.\\n   * @param cTokenModify The market to hypothetically redeem in.\\n   * @param account The account to determine liquidity for.\\n   * @return Maximum redeem amount.\\n   */\\n  function getMaxRedeem(address account, ICToken cTokenModify) external returns (uint256) {\\n    return getMaxRedeemOrBorrow(account, cTokenModify, false);\\n  }\\n\\n  /**\\n   * @notice Determine the maximum borrow amount of a cToken.\\n   * @param cTokenModify The market to hypothetically borrow in.\\n   * @param account The account to determine liquidity for.\\n   * @return Maximum borrow amount.\\n   */\\n  function getMaxBorrow(address account, ICToken cTokenModify) external returns (uint256) {\\n    return getMaxRedeemOrBorrow(account, cTokenModify, true);\\n  }\\n\\n  /**\\n   * @dev Internal function to determine the maximum borrow/redeem amount of a cToken.\\n   * @param cTokenModify The market to hypothetically borrow/redeem in.\\n   * @param account The account to determine liquidity for.\\n   * @return Maximum borrow/redeem amount.\\n   */\\n  function getMaxRedeemOrBorrow(\\n    address account,\\n    ICToken cTokenModify,\\n    bool isBorrow\\n  ) internal returns (uint256) {\\n    // Accrue interest\\n    uint256 balanceOfUnderlying = cTokenModify.balanceOfUnderlying(account);\\n\\n    // Get account liquidity\\n    IComptroller comptroller = IComptroller(cTokenModify.comptroller());\\n    (uint256 err, uint256 liquidity, uint256 shortfall) = comptroller.getAccountLiquidity(account);\\n    require(err == 0, \\\"Comptroller error when calculating account liquidity.\\\");\\n    if (shortfall > 0) return 0; // Shortfall, so no more borrow/redeem\\n\\n    // Get max borrow/redeem\\n    uint256 maxBorrowOrRedeemAmount;\\n\\n    if (!isBorrow && !comptroller.checkMembership(msg.sender, cTokenModify)) {\\n      // Max redeem = balance of underlying if not used as collateral\\n      maxBorrowOrRedeemAmount = balanceOfUnderlying;\\n    } else {\\n      // Avoid \\\"stack too deep\\\" error by separating this logic\\n      maxBorrowOrRedeemAmount = _getMaxRedeemOrBorrow(liquidity, cTokenModify, isBorrow);\\n\\n      // Redeem only: max out at underlying balance\\n      if (!isBorrow && balanceOfUnderlying < maxBorrowOrRedeemAmount) maxBorrowOrRedeemAmount = balanceOfUnderlying;\\n    }\\n\\n    // Get max borrow or redeem considering cToken liquidity\\n    uint256 cTokenLiquidity = cTokenModify.getCash();\\n\\n    // Return the minimum of the two maximums\\n    return maxBorrowOrRedeemAmount <= cTokenLiquidity ? maxBorrowOrRedeemAmount : cTokenLiquidity;\\n  }\\n\\n  /**\\n   * @dev Portion of the logic in `getMaxRedeemOrBorrow` above separated to avoid \\\"stack too deep\\\" errors.\\n   */\\n  function _getMaxRedeemOrBorrow(\\n    uint256 liquidity,\\n    ICToken cTokenModify,\\n    bool isBorrow\\n  ) internal view returns (uint256) {\\n    if (liquidity <= 0) return 0; // No available account liquidity, so no more borrow/redeem\\n\\n    // Get the normalized price of the asset\\n    IComptroller comptroller = IComptroller(cTokenModify.comptroller());\\n    uint256 conversionFactor = comptroller.oracle().getUnderlyingPrice(cTokenModify);\\n    require(conversionFactor > 0, \\\"Oracle price error.\\\");\\n\\n    // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n    if (!isBorrow) {\\n      (, uint256 collateralFactorMantissa) = comptroller.markets(address(cTokenModify));\\n      conversionFactor = (collateralFactorMantissa * conversionFactor) / 1e18;\\n    }\\n\\n    // Get max borrow or redeem considering excess account liquidity\\n    return (liquidity * 1e18) / conversionFactor;\\n  }\\n\\n  /**\\n   * @notice Returns an array of all markets, an array of all `RewardsDistributor` contracts, an array of reward token addresses for each `RewardsDistributor`, an array of supply speeds for each distributor for each, and their borrow speeds.\\n   * @param comptroller The Fuse pool Comptroller to check.\\n   */\\n  function getRewardSpeedsByPool(IComptroller comptroller)\\n    public\\n    view\\n    returns (\\n      ICToken[] memory,\\n      IRewardsDistributor[] memory,\\n      address[] memory,\\n      uint256[][] memory,\\n      uint256[][] memory\\n    )\\n  {\\n    ICToken[] memory allMarkets = comptroller.getAllMarkets();\\n    IRewardsDistributor[] memory distributors;\\n\\n    try comptroller.getRewardsDistributors() returns (IRewardsDistributor[] memory _distributors) {\\n      distributors = _distributors;\\n    } catch {\\n      distributors = new IRewardsDistributor[](0);\\n    }\\n\\n    address[] memory rewardTokens = new address[](distributors.length);\\n    uint256[][] memory supplySpeeds = new uint256[][](allMarkets.length);\\n    uint256[][] memory borrowSpeeds = new uint256[][](allMarkets.length);\\n\\n    // Get reward tokens for each distributor\\n    for (uint256 i = 0; i < distributors.length; i++) rewardTokens[i] = distributors[i].rewardToken();\\n\\n    // Get reward speeds for each market for each distributor\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      address cToken = address(allMarkets[i]);\\n      supplySpeeds[i] = new uint256[](distributors.length);\\n      borrowSpeeds[i] = new uint256[](distributors.length);\\n\\n      for (uint256 j = 0; j < distributors.length; j++) {\\n        IRewardsDistributor distributor = distributors[j];\\n        supplySpeeds[i][j] = distributor.compSupplySpeeds(cToken);\\n        borrowSpeeds[i][j] = distributor.compBorrowSpeeds(cToken);\\n      }\\n    }\\n\\n    return (allMarkets, distributors, rewardTokens, supplySpeeds, borrowSpeeds);\\n  }\\n\\n  /**\\n   * @notice For each `Comptroller`, returns an array of all markets, an array of all `RewardsDistributor` contracts, an array of reward token addresses for each `RewardsDistributor`, an array of supply speeds for each distributor for each, and their borrow speeds.\\n   * @param comptrollers The Fuse pool Comptrollers to check.\\n   */\\n  function getRewardSpeedsByPools(IComptroller[] memory comptrollers)\\n    external\\n    view\\n    returns (\\n      ICToken[][] memory,\\n      IRewardsDistributor[][] memory,\\n      address[][] memory,\\n      uint256[][][] memory,\\n      uint256[][][] memory\\n    )\\n  {\\n    ICToken[][] memory allMarkets = new ICToken[][](comptrollers.length);\\n    IRewardsDistributor[][] memory distributors = new IRewardsDistributor[][](comptrollers.length);\\n    address[][] memory rewardTokens = new address[][](comptrollers.length);\\n    uint256[][][] memory supplySpeeds = new uint256[][][](comptrollers.length);\\n    uint256[][][] memory borrowSpeeds = new uint256[][][](comptrollers.length);\\n    for (uint256 i = 0; i < comptrollers.length; i++)\\n      (allMarkets[i], distributors[i], rewardTokens[i], supplySpeeds[i], borrowSpeeds[i]) = getRewardSpeedsByPool(\\n        comptrollers[i]\\n      );\\n    return (allMarkets, distributors, rewardTokens, supplySpeeds, borrowSpeeds);\\n  }\\n\\n  /**\\n   * @notice Returns unaccrued rewards by `holder` from `cToken` on `distributor`.\\n   * @param holder The address to check.\\n   * @param distributor The RewardsDistributor to check.\\n   * @param cToken The CToken to check.\\n   * @return Unaccrued (unclaimed) supply-side rewards and unaccrued (unclaimed) borrow-side rewards.\\n   */\\n  function getUnaccruedRewards(\\n    address holder,\\n    IRewardsDistributor distributor,\\n    ICToken cToken\\n  ) internal returns (uint256, uint256) {\\n    // Get unaccrued supply rewards\\n    uint256 compAccruedPrior = distributor.compAccrued(holder);\\n    distributor.flywheelPreSupplierAction(address(cToken), holder);\\n    uint256 supplyRewardsUnaccrued = distributor.compAccrued(holder) - compAccruedPrior;\\n\\n    // Get unaccrued borrow rewards\\n    compAccruedPrior = distributor.compAccrued(holder);\\n    distributor.flywheelPreBorrowerAction(address(cToken), holder);\\n    uint256 borrowRewardsUnaccrued = distributor.compAccrued(holder) - compAccruedPrior;\\n\\n    // Return both\\n    return (supplyRewardsUnaccrued, borrowRewardsUnaccrued);\\n  }\\n\\n  /**\\n   * @notice Returns all unclaimed rewards accrued by the `holder` on `distributors`.\\n   * @param holder The address to check.\\n   * @param distributors The `RewardsDistributor` contracts to check.\\n   * @return For each of `distributors`: total quantity of unclaimed rewards, array of cTokens, array of unaccrued (unclaimed) supply-side and borrow-side rewards per cToken, and quantity of funds available in the distributor.\\n   */\\n  function getUnclaimedRewardsByDistributors(address holder, IRewardsDistributor[] memory distributors)\\n    external\\n    returns (\\n      address[] memory,\\n      uint256[] memory,\\n      ICToken[][] memory,\\n      uint256[2][][] memory,\\n      uint256[] memory\\n    )\\n  {\\n    address[] memory rewardTokens = new address[](distributors.length);\\n    uint256[] memory compUnclaimedTotal = new uint256[](distributors.length);\\n    ICToken[][] memory allMarkets = new ICToken[][](distributors.length);\\n    uint256[2][][] memory rewardsUnaccrued = new uint256[2][][](distributors.length);\\n    uint256[] memory distributorFunds = new uint256[](distributors.length);\\n\\n    for (uint256 i = 0; i < distributors.length; i++) {\\n      IRewardsDistributor distributor = distributors[i];\\n      rewardTokens[i] = distributor.rewardToken();\\n      allMarkets[i] = distributor.getAllMarkets();\\n      rewardsUnaccrued[i] = new uint256[2][](allMarkets[i].length);\\n      for (uint256 j = 0; j < allMarkets[i].length; j++)\\n        (rewardsUnaccrued[i][j][0], rewardsUnaccrued[i][j][1]) = getUnaccruedRewards(\\n          holder,\\n          distributor,\\n          allMarkets[i][j]\\n        );\\n      compUnclaimedTotal[i] = distributor.compAccrued(holder);\\n      distributorFunds[i] = IERC20Upgradeable(rewardTokens[i]).balanceOf(address(distributor));\\n    }\\n\\n    return (rewardTokens, compUnclaimedTotal, allMarkets, rewardsUnaccrued, distributorFunds);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of indexes, `Comptroller` proxy contracts, and `RewardsDistributor` contracts for Fuse pools supplied to by `account`.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getRewardsDistributorsBySupplier(address supplier)\\n    external\\n    view\\n    returns (\\n      uint256[] memory,\\n      IComptroller[] memory,\\n      IRewardsDistributor[][] memory\\n    )\\n  {\\n    // Get array length\\n    FusePoolDirectory.FusePool[] memory pools = directory.getAllPools();\\n    uint256 arrayLength = 0;\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      try IComptroller(pools[i].comptroller).suppliers(supplier) returns (bool isSupplier) {\\n        if (isSupplier) arrayLength++;\\n      } catch {}\\n    }\\n\\n    // Build array\\n    uint256[] memory indexes = new uint256[](arrayLength);\\n    IComptroller[] memory comptrollers = new IComptroller[](arrayLength);\\n    IRewardsDistributor[][] memory distributors = new IRewardsDistributor[][](arrayLength);\\n    uint256 index = 0;\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n      try comptroller.suppliers(supplier) returns (bool isSupplier) {\\n        if (isSupplier) {\\n          indexes[index] = i;\\n          comptrollers[index] = comptroller;\\n\\n          try comptroller.getRewardsDistributors() returns (IRewardsDistributor[] memory _distributors) {\\n            distributors[index] = _distributors;\\n          } catch {}\\n\\n          index++;\\n        }\\n      } catch {}\\n    }\\n\\n    // Return distributors\\n    return (indexes, comptrollers, distributors);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb9438cba3d4419c6eda261e5fb606b98c18c66b8ae797e5b2b2e5f77a54af3\",\"license\":\"UNLICENSED\"},\"contracts/compound/CErc20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ninterface CompLike {\\n  function delegate(address delegatee) external;\\n}\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @dev This contract should not to be deployed on its own; instead, deploy `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).\\n * @author Compound\\n */\\ncontract CErc20 is CToken, CErc20Interface {\\n  /**\\n   * @notice Initialize the new money market\\n   * @param underlying_ The address of the underlying asset\\n   * @param comptroller_ The address of the Comptroller\\n   * @param fuseAdmin_ The FuseFeeDistributor contract address.\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param name_ ERC-20 name of this token\\n   * @param symbol_ ERC-20 symbol of this token\\n   */\\n  function initialize(\\n    address underlying_,\\n    ComptrollerInterface comptroller_,\\n    address payable fuseAdmin_,\\n    InterestRateModel interestRateModel_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 reserveFactorMantissa_,\\n    uint256 adminFeeMantissa_\\n  ) public {\\n    // CToken initialize does the bulk of the work\\n    uint256 initialExchangeRateMantissa_ = 0.2e18;\\n    uint8 decimals_ = EIP20Interface(underlying_).decimals();\\n    super.initialize(\\n      comptroller_,\\n      fuseAdmin_,\\n      interestRateModel_,\\n      initialExchangeRateMantissa_,\\n      name_,\\n      symbol_,\\n      decimals_,\\n      reserveFactorMantissa_,\\n      adminFeeMantissa_\\n    );\\n\\n    // Set underlying and sanity check it\\n    underlying = underlying_;\\n    EIP20Interface(underlying).totalSupply();\\n  }\\n\\n  /*** User Interface ***/\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function mint(uint256 mintAmount) external override returns (uint256) {\\n    (uint256 err, ) = mintInternal(mintAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeem(uint256 redeemTokens) external override returns (uint256) {\\n    return redeemInternal(redeemTokens);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to redeem\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlying(uint256 redeemAmount) external override returns (uint256) {\\n    return redeemUnderlyingInternal(redeemAmount);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrow(uint256 borrowAmount) external override returns (uint256) {\\n    return borrowInternal(borrowAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrow(uint256 repayAmount) external override returns (uint256) {\\n    (uint256 err, ) = repayBorrowInternal(repayAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external override returns (uint256) {\\n    (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external override returns (uint256) {\\n    (uint256 err, ) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\n    return err;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying tokens owned by this contract\\n   */\\n  function getCashPrior() internal view virtual override returns (uint256) {\\n    EIP20Interface token = EIP20Interface(underlying);\\n    return token.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n   *      This will revert due to insufficient balance or insufficient allowance.\\n   *      This function returns the actual amount received,\\n   *      which may be less than `amount` if there is a fee attached to the transfer.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual override returns (uint256) {\\n    uint256 balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n    _callOptionalReturn(\\n      abi.encodeWithSelector(EIP20NonStandardInterface(underlying).transferFrom.selector, from, address(this), amount),\\n      \\\"TOKEN_TRANSFER_IN_FAILED\\\"\\n    );\\n\\n    // Calculate the amount that was *actually* transferred\\n    uint256 balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n    require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n    return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n   *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n   *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n   *      it is >= amount, this should not revert in normal conditions.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferOut(address to, uint256 amount) internal virtual override {\\n    _callOptionalReturn(\\n      abi.encodeWithSelector(EIP20NonStandardInterface(underlying).transfer.selector, to, amount),\\n      \\\"TOKEN_TRANSFER_OUT_FAILED\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   * @param errorMessage The revert string to return on failure.\\n   */\\n  function _callOptionalReturn(bytes memory data, string memory errorMessage) internal {\\n    bytes memory returndata = _functionCall(underlying, data, errorMessage);\\n    if (returndata.length > 0) require(abi.decode(returndata, (bool)), errorMessage);\\n  }\\n\\n  /**\\n   * @notice Admin call to delegate the votes of the COMP-like underlying\\n   * @param compLikeDelegatee The address to delegate votes to\\n   * @dev CTokens whose underlying are not CompLike should revert here\\n   */\\n  function _delegateCompLikeTo(address compLikeDelegatee) external {\\n    require(hasAdminRights(), \\\"only the admin may set the comp-like delegate\\\");\\n    CompLike(underlying).delegate(compLikeDelegatee);\\n  }\\n}\\n\",\"keccak256\":\"0x3d5210cdf998dabdf1edb1a6306419045d0947fcf6a741ad8300140a32cc5629\",\"license\":\"UNLICENSED\"},\"contracts/compound/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\n    return\\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\\n      (msg.sender == address(fuseAdmin) && comptrollerStorage.fuseAdminHasRights());\\n  }\\n\\n  /**\\n   * @notice Initialize the money market\\n   * @param comptroller_ The address of the Comptroller\\n   * @param fuseAdmin_ The FuseFeeDistributor contract address.\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ EIP-20 name of this token\\n   * @param symbol_ EIP-20 symbol of this token\\n   * @param decimals_ EIP-20 decimal precision of this token\\n   */\\n  function initialize(\\n    ComptrollerInterface comptroller_,\\n    address payable fuseAdmin_,\\n    InterestRateModel interestRateModel_,\\n    uint256 initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_,\\n    uint256 reserveFactorMantissa_,\\n    uint256 adminFeeMantissa_\\n  ) public {\\n    require(msg.sender == fuseAdmin_, \\\"only Fuse admin may initialize the market\\\");\\n    require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n    fuseAdmin = fuseAdmin_;\\n\\n    // Set initial exchange rate\\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n    require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n    // Set the comptroller\\n    uint256 err = _setComptroller(comptroller_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n    accrualBlockNumber = getBlockNumber();\\n    borrowIndex = mantissaOne;\\n\\n    // Set the interest rate model (depends on block number / borrow index)\\n    err = _setInterestRateModelFresh(interestRateModel_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n\\n    // Set reserve factor\\n    err = _setReserveFactorFresh(reserveFactorMantissa_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting reserve factor failed\\\");\\n\\n    // Set admin fee\\n    err = _setAdminFeeFresh(adminFeeMantissa_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting admin fee failed\\\");\\n\\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n    _notEntered = true;\\n  }\\n\\n  /**\\n   * @dev Returns latest pending Fuse fee (to be set with `_setFuseFeeFresh`)\\n   */\\n  function getPendingFuseFeeFromAdmin() internal view returns (uint256) {\\n    return IFuseFeeDistributor(fuseAdmin).interestFeeRate();\\n  }\\n\\n  /**\\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n   * @dev Called by both `transfer` and `transferFrom` internally\\n   * @param spender The address of the account performing the transfer\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param tokens The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferTokens(\\n    address spender,\\n    address src,\\n    address dst,\\n    uint256 tokens\\n  ) internal returns (uint256) {\\n    /* Fail if transfer not allowed */\\n    uint256 allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Do not allow self-transfers */\\n    if (src == dst) {\\n      return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n    }\\n\\n    /* Get the allowance, infinite for the account owner */\\n    uint256 startingAllowance = 0;\\n    if (spender == src) {\\n      startingAllowance = type(uint256).max;\\n    } else {\\n      startingAllowance = transferAllowances[src][spender];\\n    }\\n\\n    /* Do the calculations, checking for {under,over}flow */\\n    MathError mathErr;\\n    uint256 allowanceNew;\\n    uint256 srcTokensNew;\\n    uint256 dstTokensNew;\\n\\n    (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n    }\\n\\n    (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n    }\\n\\n    (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    accountTokens[src] = srcTokensNew;\\n    accountTokens[dst] = dstTokensNew;\\n\\n    /* Eat some of the allowance (if necessary) */\\n    if (startingAllowance != type(uint256).max) {\\n      transferAllowances[src][spender] = allowanceNew;\\n    }\\n\\n    /* We emit a Transfer event */\\n    emit Transfer(src, dst, tokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external override nonReentrant(false) returns (bool) {\\n    return transferTokens(msg.sender, msg.sender, dst, amount) == uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external override nonReentrant(false) returns (bool) {\\n    return transferTokens(msg.sender, src, dst, amount) == uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    address src = msg.sender;\\n    transferAllowances[src][spender] = amount;\\n    emit Approval(src, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return transferAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice Get the token balance of the `owner`\\n   * @param owner The address of the account to query\\n   * @return The number of tokens owned by `owner`\\n   */\\n  function balanceOf(address owner) external view override returns (uint256) {\\n    return accountTokens[owner];\\n  }\\n\\n  /**\\n   * @notice Get the underlying balance of the `owner`\\n   * @dev This also accrues interest in a transaction\\n   * @param owner The address of the account to query\\n   * @return The amount of underlying owned by `owner`\\n   */\\n  function balanceOfUnderlying(address owner) external override returns (uint256) {\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n    (MathError mErr, uint256 balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n    require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n    return balance;\\n  }\\n\\n  /**\\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n   * @param account Address of the account to snapshot\\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 cTokenBalance = accountTokens[account];\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n\\n    MathError mErr;\\n\\n    (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n    if (mErr != MathError.NO_ERROR) {\\n      return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n    }\\n\\n    (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n    if (mErr != MathError.NO_ERROR) {\\n      return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n    }\\n\\n    return (uint256(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n  }\\n\\n  /**\\n   * @dev Function to simply retrieve block number\\n   *  This exists mainly for inheriting test contracts to stub this result.\\n   */\\n  function getBlockNumber() internal view returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block borrow interest rate for this cToken\\n   * @return The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view override returns (uint256) {\\n    return\\n      interestRateModel.getBorrowRate(\\n        getCashPrior(),\\n        totalBorrows,\\n        add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block supply interest rate for this cToken\\n   * @return The supply interest rate per block, scaled by 1e18\\n   */\\n  function supplyRatePerBlock() external view override returns (uint256) {\\n    return\\n      interestRateModel.getSupplyRate(\\n        getCashPrior(),\\n        totalBorrows,\\n        add_(totalReserves, add_(totalAdminFees, totalFuseFees)),\\n        reserveFactorMantissa + fuseFeeMantissa + adminFeeMantissa\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the current total borrows plus accrued interest\\n   * @return The total borrows with interest\\n   */\\n  function totalBorrowsCurrent() external override nonReentrant(false) returns (uint256) {\\n    require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    return totalBorrows;\\n  }\\n\\n  /**\\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n   * @param account The address whose balance should be calculated after updating borrowIndex\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceCurrent(address account) external override nonReentrant(false) returns (uint256) {\\n    require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    return borrowBalanceStored(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceStored(address account) public view override returns (uint256) {\\n    (MathError err, uint256 result) = borrowBalanceStoredInternal(account);\\n    require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return (error code, the calculated balance or 0 if error code is non-zero)\\n   */\\n  function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint256) {\\n    /* Note: we do not assert that the market is up to date */\\n    MathError mathErr;\\n    uint256 principalTimesIndex;\\n    uint256 result;\\n\\n    /* Get borrowBalance and borrowIndex */\\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n     */\\n    if (borrowSnapshot.principal == 0) {\\n      return (MathError.NO_ERROR, 0);\\n    }\\n\\n    /* Calculate new borrow balance using the interest index:\\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n     */\\n    (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return (mathErr, 0);\\n    }\\n\\n    (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return (mathErr, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, result);\\n  }\\n\\n  /**\\n   * @notice Accrue interest then return the up-to-date exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateCurrent() public override nonReentrant(false) returns (uint256) {\\n    require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    return exchangeRateStored();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() public view override returns (uint256) {\\n    (MathError err, uint256 result) = exchangeRateStoredInternal();\\n    require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return (error code, calculated exchange rate scaled by 1e18)\\n   */\\n  function exchangeRateStoredInternal() internal view returns (MathError, uint256) {\\n    uint256 _totalSupply = totalSupply;\\n    if (_totalSupply == 0) {\\n      /*\\n       * If there are no tokens minted:\\n       *  exchangeRate = initialExchangeRate\\n       */\\n      return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n    } else {\\n      /*\\n       * Otherwise:\\n       *  exchangeRate = (totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)) / totalSupply\\n       */\\n      uint256 totalCash = getCashPrior();\\n      uint256 cashPlusBorrowsMinusReserves;\\n      Exp memory exchangeRate;\\n      MathError mathErr;\\n\\n      (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\\n        totalCash,\\n        totalBorrows,\\n        add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n      );\\n      if (mathErr != MathError.NO_ERROR) {\\n        return (mathErr, 0);\\n      }\\n\\n      (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n      if (mathErr != MathError.NO_ERROR) {\\n        return (mathErr, 0);\\n      }\\n\\n      return (MathError.NO_ERROR, exchangeRate.mantissa);\\n    }\\n  }\\n\\n  /**\\n   * @notice Get cash balance of this cToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash() external view override returns (uint256) {\\n    return getCashPrior();\\n  }\\n\\n  /**\\n   * @notice Applies accrued interest to total borrows and reserves\\n   * @dev This calculates interest accrued from the last checkpointed block\\n   *   up to the current block and writes new checkpoint to storage.\\n   */\\n  function accrueInterest() public virtual override returns (uint256) {\\n    /* Remember the initial block number */\\n    uint256 currentBlockNumber = getBlockNumber();\\n\\n    /* Short-circuit accumulating 0 interest */\\n    if (accrualBlockNumber == currentBlockNumber) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    /* Read the previous values out of storage */\\n    uint256 cashPrior = getCashPrior();\\n\\n    /* Calculate the current borrow interest rate */\\n    uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\n      cashPrior,\\n      totalBorrows,\\n      add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n    );\\n    require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n    /* Calculate the number of blocks elapsed since the last accrual */\\n    (MathError mathErr, uint256 blockDelta) = subUInt(currentBlockNumber, accrualBlockNumber);\\n    require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n    return finishInterestAccrual(currentBlockNumber, cashPrior, borrowRateMantissa, blockDelta);\\n  }\\n\\n  /**\\n   * @dev Split off from `accrueInterest` to avoid \\\"stack too deep\\\" error\\\".\\n   */\\n  function finishInterestAccrual(\\n    uint256 currentBlockNumber,\\n    uint256 cashPrior,\\n    uint256 borrowRateMantissa,\\n    uint256 blockDelta\\n  ) private returns (uint256) {\\n    /*\\n     * Calculate the interest accumulated into borrows and reserves and the new index:\\n     *  simpleInterestFactor = borrowRate * blockDelta\\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n     *  totalFuseFeesNew = interestAccumulated * fuseFee + totalFuseFees\\n     *  totalAdminFeesNew = interestAccumulated * adminFee + totalAdminFees\\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n     */\\n\\n    Exp memory simpleInterestFactor = mul_(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n    uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, totalBorrows);\\n    uint256 totalBorrowsNew = add_(interestAccumulated, totalBorrows);\\n    uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\n      Exp({ mantissa: reserveFactorMantissa }),\\n      interestAccumulated,\\n      totalReserves\\n    );\\n    uint256 totalFuseFeesNew = mul_ScalarTruncateAddUInt(\\n      Exp({ mantissa: fuseFeeMantissa }),\\n      interestAccumulated,\\n      totalFuseFees\\n    );\\n    uint256 totalAdminFeesNew = mul_ScalarTruncateAddUInt(\\n      Exp({ mantissa: adminFeeMantissa }),\\n      interestAccumulated,\\n      totalAdminFees\\n    );\\n    uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndex, borrowIndex);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    accrualBlockNumber = currentBlockNumber;\\n    borrowIndex = borrowIndexNew;\\n    totalBorrows = totalBorrowsNew;\\n    totalReserves = totalReservesNew;\\n    totalFuseFees = totalFuseFeesNew;\\n    totalAdminFees = totalAdminFeesNew;\\n\\n    /* We emit an AccrueInterest event */\\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n   */\\n  function mintInternal(uint256 mintAmount) internal nonReentrant(false) returns (uint256, uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n    }\\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n    return mintFresh(msg.sender, mintAmount);\\n  }\\n\\n  struct MintLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 exchangeRateMantissa;\\n    uint256 mintTokens;\\n    uint256 totalSupplyNew;\\n    uint256 accountTokensNew;\\n    uint256 actualMintAmount;\\n  }\\n\\n  /**\\n   * @notice User supplies assets into the market and receives cTokens in exchange\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param minter The address of the account which is supplying the assets\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n   */\\n  function mintFresh(address minter, uint256 mintAmount) internal returns (uint256, uint256) {\\n    /* Fail if mint not allowed */\\n    uint256 allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n    }\\n\\n    MintLocalVars memory vars;\\n\\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr)), 0);\\n    }\\n\\n    // Check max supply\\n    // unused function\\n    /* allowed = comptroller.mintWithinLimits(address(this), vars.exchangeRateMantissa, accountTokens[minter], mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        } */\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     *  We call `doTransferIn` for the minter and the mintAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n     *  side-effects occurred. The function returns the amount actually transferred,\\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n     *  of cash.\\n     */\\n    vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n    /*\\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\\n     *  mintTokens = actualMintAmount / exchangeRate\\n     */\\n\\n    (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n      vars.actualMintAmount,\\n      Exp({ mantissa: vars.exchangeRateMantissa })\\n    );\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n    /*\\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n     *  totalSupplyNew = totalSupply + mintTokens\\n     *  accountTokensNew = accountTokens[minter] + mintTokens\\n     */\\n    vars.totalSupplyNew = add_(totalSupply, vars.mintTokens);\\n\\n    vars.accountTokensNew = add_(accountTokens[minter], vars.mintTokens);\\n\\n    /* We write previously calculated values into storage */\\n    totalSupply = vars.totalSupplyNew;\\n    accountTokens[minter] = vars.accountTokensNew;\\n\\n    /* We emit a Mint event, and a Transfer event */\\n    emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n    emit Transfer(address(this), minter, vars.mintTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n    return (uint256(Error.NO_ERROR), vars.actualMintAmount);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemInternal(uint256 redeemTokens) internal nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n      return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n    }\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    return redeemFresh(msg.sender, redeemTokens, 0);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlyingInternal(uint256 redeemAmount) internal nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n      return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n    }\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    return redeemFresh(msg.sender, 0, redeemAmount);\\n  }\\n\\n  struct RedeemLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 exchangeRateMantissa;\\n    uint256 redeemTokens;\\n    uint256 redeemAmount;\\n    uint256 totalSupplyNew;\\n    uint256 accountTokensNew;\\n  }\\n\\n  /**\\n   * @notice User redeems cTokens in exchange for the underlying asset\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param redeemer The address of the account which is redeeming the tokens\\n   * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemFresh(\\n    address redeemer,\\n    uint256 redeemTokensIn,\\n    uint256 redeemAmountIn\\n  ) internal returns (uint256) {\\n    require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n    RedeemLocalVars memory vars;\\n\\n    /* exchangeRate = invoke Exchange Rate Stored() */\\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /* If redeemTokensIn > 0: */\\n    if (redeemTokensIn > 0) {\\n      /*\\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\\n       *  redeemTokens = redeemTokensIn\\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n       */\\n      vars.redeemTokens = redeemTokensIn;\\n\\n      (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n        Exp({ mantissa: vars.exchangeRateMantissa }),\\n        redeemTokensIn\\n      );\\n      if (vars.mathErr != MathError.NO_ERROR) {\\n        return\\n          failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint256(vars.mathErr));\\n      }\\n    } else {\\n      /*\\n       * We get the current exchange rate and calculate the amount to be redeemed:\\n       *  redeemTokens = redeemAmountIn / exchangeRate\\n       *  redeemAmount = redeemAmountIn\\n       */\\n\\n      (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n        redeemAmountIn,\\n        Exp({ mantissa: vars.exchangeRateMantissa })\\n      );\\n      if (vars.mathErr != MathError.NO_ERROR) {\\n        return\\n          failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint256(vars.mathErr));\\n      }\\n\\n      vars.redeemAmount = redeemAmountIn;\\n    }\\n\\n    /* Fail if redeem not allowed */\\n    uint256 allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n    }\\n\\n    /*\\n     * We calculate the new total supply and redeemer balance, checking for underflow:\\n     *  totalSupplyNew = totalSupply - redeemTokens\\n     *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n     */\\n    (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient cash */\\n    if (getCashPrior() < vars.redeemAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken has redeemAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(redeemer, vars.redeemAmount);\\n\\n    /* We write previously calculated values into storage */\\n    totalSupply = vars.totalSupplyNew;\\n    accountTokens[redeemer] = vars.accountTokensNew;\\n\\n    /* We emit a Transfer event, and a Redeem event */\\n    emit Transfer(redeemer, address(this), vars.redeemTokens);\\n    emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrowInternal(uint256 borrowAmount) internal nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n    }\\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n    return borrowFresh(msg.sender, borrowAmount);\\n  }\\n\\n  struct BorrowLocalVars {\\n    MathError mathErr;\\n    uint256 accountBorrows;\\n    uint256 accountBorrowsNew;\\n    uint256 totalBorrowsNew;\\n  }\\n\\n  /**\\n   * @notice Users borrow assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrowFresh(address borrower, uint256 borrowAmount) internal returns (uint256) {\\n    /* Fail if borrow not allowed */\\n    uint256 allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient underlying cash */\\n    uint256 cashPrior = getCashPrior();\\n\\n    if (cashPrior < borrowAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n    }\\n\\n    BorrowLocalVars memory vars;\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on overflow:\\n     *  accountBorrowsNew = accountBorrows + borrowAmount\\n     *  totalBorrowsNew = totalBorrows + borrowAmount\\n     */\\n    (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(\\n          Error.MATH_ERROR,\\n          FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n          uint256(vars.mathErr)\\n        );\\n    }\\n\\n    // Check min borrow for this user for this asset\\n    allowed = comptroller.borrowWithinLimits(address(this), vars.accountBorrowsNew);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We invoke doTransferOut for the borrower and the borrowAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken borrowAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(borrower, borrowAmount);\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = vars.totalBorrowsNew;\\n\\n    /* We emit a Borrow event */\\n    emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowInternal(uint256 repayAmount) internal nonReentrant(false) returns (uint256, uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n    }\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\\n    internal\\n    nonReentrant(false)\\n    returns (uint256, uint256)\\n  {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n    }\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n  }\\n\\n  struct RepayBorrowLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 repayAmount;\\n    uint256 borrowerIndex;\\n    uint256 accountBorrows;\\n    uint256 accountBorrowsNew;\\n    uint256 totalBorrowsNew;\\n    uint256 actualRepayAmount;\\n  }\\n\\n  /**\\n   * @notice Borrows are repaid by another user (possibly the borrower).\\n   * @param payer the account paying off the borrow\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount the amount of undelrying tokens being returned\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowFresh(\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) internal returns (uint256, uint256) {\\n    /* Fail if repayBorrow not allowed */\\n    uint256 allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n    }\\n\\n    RepayBorrowLocalVars memory vars;\\n\\n    /* We remember the original borrowerIndex for verification purposes */\\n    vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n    /* We fetch the amount the borrower owes, with accumulated interest */\\n    (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return (\\n        failOpaque(\\n          Error.MATH_ERROR,\\n          FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n          uint256(vars.mathErr)\\n        ),\\n        0\\n      );\\n    }\\n\\n    /* If repayAmount == -1, repayAmount = accountBorrows */\\n    if (repayAmount == type(uint256).max) {\\n      vars.repayAmount = vars.accountBorrows;\\n    } else {\\n      vars.repayAmount = repayAmount;\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the payer and the repayAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional repayAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *   it returns the amount actually transferred, in case of a fee.\\n     */\\n    vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on underflow:\\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n     */\\n    (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n    (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = vars.totalBorrowsNew;\\n\\n    /* We emit a RepayBorrow event */\\n    emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n    return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function liquidateBorrowInternal(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal nonReentrant(false) returns (uint256, uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n    }\\n\\n    error = cTokenCollateral.accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n    }\\n\\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n    return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n  }\\n\\n  /**\\n   * @notice The liquidator liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param liquidator The address repaying the borrow and seizing collateral\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function liquidateBorrowFresh(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal returns (uint256, uint256) {\\n    /* Fail if liquidate not allowed */\\n    uint256 allowed = comptroller.liquidateBorrowAllowed(\\n      address(this),\\n      address(cTokenCollateral),\\n      liquidator,\\n      borrower,\\n      repayAmount\\n    );\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n    }\\n\\n    /* Verify cTokenCollateral market's block number equals current block number */\\n    if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n    }\\n\\n    /* Fail if repayAmount = 0 */\\n    if (repayAmount == 0) {\\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n    }\\n\\n    /* Fail if repayAmount = -1 */\\n    if (repayAmount == type(uint256).max) {\\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n    }\\n\\n    /* Fail if repayBorrow fails */\\n    (uint256 repayBorrowError, uint256 actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n    if (repayBorrowError != uint256(Error.NO_ERROR)) {\\n      return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We calculate the number of collateral tokens that will be seized */\\n    (uint256 amountSeizeError, uint256 seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n      address(this),\\n      address(cTokenCollateral),\\n      actualRepayAmount\\n    );\\n    require(amountSeizeError == uint256(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n    /* Revert if borrower collateral token balance < seizeTokens */\\n    require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n    uint256 seizeError;\\n    if (address(cTokenCollateral) == address(this)) {\\n      seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n    } else {\\n      seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n    }\\n\\n    /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n    require(seizeError == uint256(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n    /* We emit a LiquidateBorrow event */\\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n    return (uint256(Error.NO_ERROR), actualRepayAmount);\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Will fail unless called by another cToken during the process of liquidation.\\n   *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override nonReentrant(true) returns (uint256) {\\n    return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n  }\\n\\n  struct SeizeInternalLocalVars {\\n    MathError mathErr;\\n    uint256 borrowerTokensNew;\\n    uint256 liquidatorTokensNew;\\n    uint256 liquidatorSeizeTokens;\\n    uint256 protocolSeizeTokens;\\n    uint256 protocolSeizeAmount;\\n    uint256 exchangeRateMantissa;\\n    uint256 totalReservesNew;\\n    uint256 totalFuseFeeNew;\\n    uint256 totalSupplyNew;\\n    uint256 feeSeizeTokens;\\n    uint256 feeSeizeAmount;\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n   *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seizeInternal(\\n    address seizerToken,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) internal returns (uint256) {\\n    /* Fail if seize not allowed */\\n    uint256 allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n    }\\n\\n    SeizeInternalLocalVars memory vars;\\n\\n    /*\\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n     */\\n    (vars.mathErr, vars.borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    vars.protocolSeizeTokens = mul_(seizeTokens, Exp({ mantissa: protocolSeizeShareMantissa }));\\n    vars.feeSeizeTokens = mul_(seizeTokens, Exp({ mantissa: feeSeizeShareMantissa }));\\n    vars.liquidatorSeizeTokens = sub_(sub_(seizeTokens, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n\\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"exchange rate math error\\\");\\n\\n    vars.protocolSeizeAmount = mul_ScalarTruncate(\\n      Exp({ mantissa: vars.exchangeRateMantissa }),\\n      vars.protocolSeizeTokens\\n    );\\n    vars.feeSeizeAmount = mul_ScalarTruncate(Exp({ mantissa: vars.exchangeRateMantissa }), vars.feeSeizeTokens);\\n\\n    vars.totalReservesNew = add_(totalReserves, vars.protocolSeizeAmount);\\n    vars.totalSupplyNew = sub_(sub_(totalSupply, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n    vars.totalFuseFeeNew = add_(totalFuseFees, vars.feeSeizeAmount);\\n\\n    (vars.mathErr, vars.liquidatorTokensNew) = addUInt(accountTokens[liquidator], vars.liquidatorSeizeTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    totalReserves = vars.totalReservesNew;\\n    totalSupply = vars.totalSupplyNew;\\n    totalFuseFees = vars.totalFuseFeeNew;\\n\\n    accountTokens[borrower] = vars.borrowerTokensNew;\\n    accountTokens[liquidator] = vars.liquidatorTokensNew;\\n\\n    /* Emit a Transfer event */\\n    emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\n    emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\n    emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Sets a new comptroller for the market\\n   * @dev Internal function to set a new comptroller\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint256) {\\n    ComptrollerInterface oldComptroller = comptroller;\\n    // Ensure invoke comptroller.isComptroller() returns true\\n    require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n    // Set market's comptroller to newComptroller\\n    comptroller = newComptroller;\\n\\n    // Emit NewComptroller(oldComptroller, newComptroller)\\n    emit NewComptroller(oldComptroller, newComptroller);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh\\n   * @dev Admin function to accrue interest and set a new admin fee\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setAdminFee(uint256 newAdminFeeMantissa) external nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee change failed.\\n      return fail(Error(error), FailureInfo.SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _setAdminFeeFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setAdminFeeFresh(newAdminFeeMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new admin fee for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new admin fee\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setAdminFeeFresh(uint256 newAdminFeeMantissa) internal returns (uint256) {\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_ADMIN_FEE_FRESH_CHECK);\\n    }\\n\\n    // Sanitize newAdminFeeMantissa\\n    if (newAdminFeeMantissa == type(uint256).max) newAdminFeeMantissa = adminFeeMantissa;\\n\\n    // Get latest Fuse fee\\n    uint256 newFuseFeeMantissa = getPendingFuseFeeFromAdmin();\\n\\n    // Check reserveFactorMantissa + newAdminFeeMantissa + newFuseFeeMantissa \\u2264 reserveFactorPlusFeesMaxMantissa\\n    if (add_(add_(reserveFactorMantissa, newAdminFeeMantissa), newFuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n      return fail(Error.BAD_INPUT, FailureInfo.SET_ADMIN_FEE_BOUNDS_CHECK);\\n    }\\n\\n    // If setting admin fee\\n    if (adminFeeMantissa != newAdminFeeMantissa) {\\n      // Check caller is admin\\n      if (!hasAdminRights()) {\\n        return fail(Error.UNAUTHORIZED, FailureInfo.SET_ADMIN_FEE_ADMIN_CHECK);\\n      }\\n\\n      // Set admin fee\\n      uint256 oldAdminFeeMantissa = adminFeeMantissa;\\n      adminFeeMantissa = newAdminFeeMantissa;\\n\\n      // Emit event\\n      emit NewAdminFee(oldAdminFeeMantissa, newAdminFeeMantissa);\\n    }\\n\\n    // If setting Fuse fee\\n    if (fuseFeeMantissa != newFuseFeeMantissa) {\\n      // Set Fuse fee\\n      uint256 oldFuseFeeMantissa = fuseFeeMantissa;\\n      fuseFeeMantissa = newFuseFeeMantissa;\\n\\n      // Emit event\\n      emit NewFuseFee(oldFuseFeeMantissa, newFuseFeeMantissa);\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n   * @dev Admin function to accrue interest and set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external override nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n      return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setReserveFactorFresh(newReserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n    }\\n\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n    }\\n\\n    // Check newReserveFactor \\u2264 maxReserveFactor\\n    if (add_(add_(newReserveFactorMantissa, adminFeeMantissa), fuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n      return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n    }\\n\\n    uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n    reserveFactorMantissa = newReserveFactorMantissa;\\n\\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring to admin\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReserves(uint256 reduceAmount) external override nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n      return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _reduceReservesFresh(reduceAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces reserves by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\n    // totalReserves - reduceAmount\\n    uint256 totalReservesNew;\\n\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < reduceAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n    if (reduceAmount > totalReserves) {\\n      return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    // We checked reduceAmount <= totalReserves above, so this should never revert.\\n    totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n    // Store reserves[n+1] = reserves[n] - reduceAmount\\n    totalReserves = totalReservesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(msg.sender, reduceAmount);\\n\\n    emit ReservesReduced(msg.sender, reduceAmount, totalReservesNew);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces Fuse fees by transferring to Fuse\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawFuseFees(uint256 withdrawAmount) external nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted Fuse fee withdrawal failed.\\n      return fail(Error(error), FailureInfo.WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _withdrawFuseFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _withdrawFuseFeesFresh(withdrawAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces Fuse fees by transferring to Fuse\\n   * @dev Requires fresh interest accrual\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawFuseFeesFresh(uint256 withdrawAmount) internal returns (uint256) {\\n    // totalFuseFees - reduceAmount\\n    uint256 totalFuseFeesNew;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_FUSE_FEES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < withdrawAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    // Check withdrawAmount \\u2264 fuseFees[n] (totalFuseFees)\\n    if (withdrawAmount > totalFuseFees) {\\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_FUSE_FEES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    // We checked withdrawAmount <= totalFuseFees above, so this should never revert.\\n    totalFuseFeesNew = sub_(totalFuseFees, withdrawAmount);\\n\\n    // Store fuseFees[n+1] = fuseFees[n] - withdrawAmount\\n    totalFuseFees = totalFuseFeesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(address(fuseAdmin), withdrawAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces admin fees by transferring to admin\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawAdminFees(uint256 withdrawAmount) external nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee withdrawal failed.\\n      return fail(Error(error), FailureInfo.WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _withdrawAdminFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _withdrawAdminFeesFresh(withdrawAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces admin fees by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawAdminFeesFresh(uint256 withdrawAmount) internal returns (uint256) {\\n    // totalAdminFees - reduceAmount\\n    uint256 totalAdminFeesNew;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_ADMIN_FEES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < withdrawAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    // Check withdrawAmount \\u2264 adminFees[n] (totalAdminFees)\\n    if (withdrawAmount > totalAdminFees) {\\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_ADMIN_FEES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    // We checked withdrawAmount <= totalAdminFees above, so this should never revert.\\n    totalAdminFeesNew = sub_(totalAdminFees, withdrawAmount);\\n\\n    // Store adminFees[n+1] = adminFees[n] - withdrawAmount\\n    totalAdminFees = totalAdminFeesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(address(uint160(UnitrollerAdminStorage(address(comptroller)).admin())), withdrawAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n   * @dev Admin function to accrue interest and update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public override returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n      return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n    return _setInterestRateModelFresh(newInterestRateModel);\\n  }\\n\\n  /**\\n   * @notice updates the interest rate model (*requires fresh interest accrual)\\n   * @dev Admin function to update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\n    // Used to store old model for use in the event that is emitted on success\\n    InterestRateModel oldInterestRateModel;\\n\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n    }\\n\\n    // Track the market's current interest rate model\\n    oldInterestRateModel = interestRateModel;\\n\\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n    require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n    // Set the interest rate model to newInterestRateModel\\n    interestRateModel = newInterestRateModel;\\n\\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n    // Attempt to reset interest checkpoints on old IRM\\n    if (address(oldInterestRateModel) != address(0))\\n      address(oldInterestRateModel).call(abi.encodeWithSignature(\\\"resetInterestCheckpoints()\\\"));\\n\\n    // Attempt to add first interest checkpoint on new IRM\\n    address(newInterestRateModel).call(abi.encodeWithSignature(\\\"checkpointInterest()\\\"));\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice updates the cToken ERC20 name and symbol\\n   * @dev Admin function to update the cToken ERC20 name and symbol\\n   * @param _name the new ERC20 token name to use\\n   * @param _symbol the new ERC20 token symbol to use\\n   */\\n  function _setNameAndSymbol(string calldata _name, string calldata _symbol) external {\\n    // Check caller is admin\\n    require(hasAdminRights(), \\\"caller not admin\\\");\\n\\n    // Set ERC20 name and symbol\\n    name = _name;\\n    symbol = _symbol;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying owned by this contract\\n   */\\n  function getCashPrior() internal view virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n   *  This may revert due to insufficient balance or insufficient allowance.\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual returns (uint256) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n   *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n   *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n   */\\n  function doTransferOut(address to, uint256 amount) internal virtual {}\\n\\n  /*** Reentrancy Guard ***/\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   */\\n  modifier nonReentrant(bool localOnly) {\\n    _beforeNonReentrant(localOnly);\\n    _;\\n    _afterNonReentrant(localOnly);\\n  }\\n\\n  /**\\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n   * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n   * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\\n   */\\n  function _beforeNonReentrant(bool localOnly) private {\\n    require(_notEntered, \\\"re-entered\\\");\\n    if (!localOnly) comptroller._beforeNonReentrant();\\n    _notEntered = false;\\n  }\\n\\n  /**\\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n   * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n   * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\\n   */\\n  function _afterNonReentrant(bool localOnly) private {\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n    if (!localOnly) comptroller._afterNonReentrant();\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   * @param errorMessage The revert string to return on failure.\\n   */\\n  function _functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.call(data);\\n\\n    if (!success) {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n\\n    return returndata;\\n  }\\n}\\n\",\"keccak256\":\"0x47b1006c2263f75b11c7e71d6f937c45ec5c5b37422e04b9bd5791e69a6f72bd\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenAdminStorage {\\n  /*\\n   * Administrator for Fuse\\n   */\\n  address payable public fuseAdmin;\\n\\n  /**\\n   * @dev LEGACY USE ONLY: Administrator for this contract\\n   */\\n  address payable internal __admin;\\n\\n  /**\\n   * @dev LEGACY USE ONLY: Whether or not the Fuse admin has admin rights\\n   */\\n  bool internal __fuseAdminHasRights;\\n\\n  /**\\n   * @dev LEGACY USE ONLY: Whether or not the admin has admin rights\\n   */\\n  bool internal __adminHasRights;\\n}\\n\\ncontract CTokenStorage is CTokenAdminStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  /*\\n   * Maximum borrow rate that can ever be applied (.0005% / block)\\n   */\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  /*\\n   * Maximum fraction of interest that can be set aside for reserves + fees\\n   */\\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\n\\n  /*\\n   * LEGACY USE ONLY: Pending administrator for this contract\\n   */\\n  address payable private __pendingAdmin;\\n\\n  /**\\n   * @notice Contract which oversees inter-cToken operations\\n   */\\n  ComptrollerInterface public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  /*\\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n   */\\n  uint256 internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for admin fees\\n   */\\n  uint256 public adminFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for Fuse fees\\n   */\\n  uint256 public fuseFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint256 public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint256 public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint256 public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint256 public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint256 public totalReserves;\\n\\n  /**\\n   * @notice Total amount of admin fees of the underlying held in this market\\n   */\\n  uint256 public totalAdminFees;\\n\\n  /**\\n   * @notice Total amount of Fuse fees of the underlying held in this market\\n   */\\n  uint256 public totalFuseFees;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint256 public totalSupply;\\n\\n  /*\\n   * Official record of token balances for each account\\n   */\\n  mapping(address => uint256) internal accountTokens;\\n\\n  /*\\n   * Approved token transfer amounts on behalf of others\\n   */\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  /*\\n   * Mapping of account addresses to outstanding borrow balances\\n   */\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /*\\n   * Share of seized collateral that is added to reserves\\n   */\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n  /*\\n   * Share of seized collateral taken as fees\\n   */\\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n  /**\\n   * @notice Indicator that this is a CToken contract (for inspection)\\n   */\\n  function isCToken() external virtual returns (bool) {\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Indicator that this is or is not a CEther contract (for inspection)\\n   */\\n  function isCEther() external virtual returns (bool) {\\n    return false;\\n  }\\n\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral,\\n    uint256 seizeTokens\\n  );\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when comptroller is changed\\n   */\\n  event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the admin fee is changed\\n   */\\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\\n\\n  /**\\n   * @notice Event emitted when the Fuse fee is changed\\n   */\\n  event NewFuseFee(uint256 oldFuseFeeMantissa, uint256 newFuseFeeMantissa);\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint256 amount) external virtual returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external virtual returns (bool);\\n\\n  function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n  function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n  function balanceOf(address owner) external view virtual returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external virtual returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function borrowRatePerBlock() external view virtual returns (uint256);\\n\\n  function supplyRatePerBlock() external view virtual returns (uint256);\\n\\n  function totalBorrowsCurrent() external virtual returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external virtual returns (uint256);\\n\\n  function borrowBalanceStored(address account) public view virtual returns (uint256);\\n\\n  function exchangeRateCurrent() public virtual returns (uint256);\\n\\n  function exchangeRateStored() public view virtual returns (uint256);\\n\\n  function getCash() external view virtual returns (uint256);\\n\\n  function accrueInterest() public virtual returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external virtual returns (uint256);\\n\\n  function _reduceReserves(uint256 reduceAmount) external virtual returns (uint256);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public virtual returns (uint256);\\n}\\n\\ncontract CErc20Storage {\\n  /**\\n   * @notice Underlying asset for this CToken\\n   */\\n  address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external virtual returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external virtual returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external virtual returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external virtual returns (uint256);\\n}\\n\\ncontract CEtherInterface is CErc20Storage {}\\n\",\"keccak256\":\"0x0ef2e628e1286ec79d420762586669b03efde614b2208167c80ded26e760ee15\",\"license\":\"UNLICENSED\"},\"contracts/compound/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n  /**\\n   * @dev Possible error codes that we can return\\n   */\\n  enum MathError {\\n    NO_ERROR,\\n    DIVISION_BY_ZERO,\\n    INTEGER_OVERFLOW,\\n    INTEGER_UNDERFLOW\\n  }\\n\\n  /**\\n   * @dev Multiplies two numbers, returns an error on overflow.\\n   */\\n  function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (a == 0) {\\n      return (MathError.NO_ERROR, 0);\\n    }\\n\\n    uint256 c = a * b;\\n\\n    if (c / a != b) {\\n      return (MathError.INTEGER_OVERFLOW, 0);\\n    } else {\\n      return (MathError.NO_ERROR, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Integer division of two numbers, truncating the quotient.\\n   */\\n  function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (b == 0) {\\n      return (MathError.DIVISION_BY_ZERO, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, a / b);\\n  }\\n\\n  /**\\n   * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n   */\\n  function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (b <= a) {\\n      return (MathError.NO_ERROR, a - b);\\n    } else {\\n      return (MathError.INTEGER_UNDERFLOW, 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Adds two numbers, returns an error on overflow.\\n   */\\n  function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    uint256 c = a + b;\\n\\n    if (c >= a) {\\n      return (MathError.NO_ERROR, c);\\n    } else {\\n      return (MathError.INTEGER_OVERFLOW, 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev add a and b and then subtract c\\n   */\\n  function addThenSubUInt(\\n    uint256 a,\\n    uint256 b,\\n    uint256 c\\n  ) internal pure returns (MathError, uint256) {\\n    (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, 0);\\n    }\\n\\n    return subUInt(sum, c);\\n  }\\n}\\n\",\"keccak256\":\"0xce97f35471b6f51b4adb3753e831f1d6eee444dc4a982cba20dd5fff571128f4\",\"license\":\"UNLICENSED\"},\"contracts/compound/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./CErc20.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Unitroller.sol\\\";\\nimport \\\"./RewardsDistributorDelegate.sol\\\";\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n * @dev This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\\n */\\ncontract Comptroller is ComptrollerV3Storage, ComptrollerInterface, ComptrollerErrorReporter, Exponential {\\n  /// @notice Emitted when an admin supports a market\\n  event MarketListed(CToken cToken);\\n\\n  /// @notice Emitted when an admin unsupports a market\\n  event MarketUnlisted(CToken cToken);\\n\\n  /// @notice Emitted when an account enters a market\\n  event MarketEntered(CToken cToken, address account);\\n\\n  /// @notice Emitted when an account exits a market\\n  event MarketExited(CToken cToken, address account);\\n\\n  /// @notice Emitted when close factor is changed by admin\\n  event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\\n\\n  /// @notice Emitted when a collateral factor is changed by admin\\n  event NewCollateralFactor(CToken cToken, uint256 oldCollateralFactorMantissa, uint256 newCollateralFactorMantissa);\\n\\n  /// @notice Emitted when liquidation incentive is changed by admin\\n  event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa);\\n\\n  /// @notice Emitted when price oracle is changed\\n  event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n  /// @notice Emitted when pause guardian is changed\\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n  /// @notice Emitted when an action is paused globally\\n  event ActionPaused(string action, bool pauseState);\\n\\n  /// @notice Emitted when an action is paused on a market\\n  event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n  /// @notice Emitted when the whitelist enforcement is changed\\n  event WhitelistEnforcementChanged(bool enforce);\\n\\n  /// @notice Emitted when auto implementations are toggled\\n  event AutoImplementationsToggled(bool enabled);\\n\\n  /// @notice Emitted when supply cap for a cToken is changed\\n  event NewSupplyCap(CToken indexed cToken, uint256 newSupplyCap);\\n\\n  /// @notice Emitted when borrow cap for a cToken is changed\\n  event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\\n\\n  /// @notice Emitted when borrow cap guardian is changed\\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n  /// @notice Emitted when a new RewardsDistributor contract is added to hooks\\n  event AddedRewardsDistributor(address rewardsDistributor);\\n\\n  // closeFactorMantissa must be strictly greater than this value\\n  uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n  // closeFactorMantissa must not exceed this value\\n  uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n  // No collateralFactorMantissa may exceed this value\\n  uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n  // liquidationIncentiveMantissa must be no less than this value\\n  uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\\n\\n  // liquidationIncentiveMantissa must be no greater than this value\\n  uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\\n\\n  constructor(address payable _fuseAdmin) {\\n    fuseAdmin = _fuseAdmin;\\n  }\\n\\n  /*** Assets You Are In ***/\\n\\n  /**\\n   * @notice Returns the assets an account has entered\\n   * @param account The address of the account to pull assets for\\n   * @return A dynamic list with the assets the account has entered\\n   */\\n  function getAssetsIn(address account) external view returns (CToken[] memory) {\\n    CToken[] memory assetsIn = accountAssets[account];\\n\\n    return assetsIn;\\n  }\\n\\n  /**\\n   * @notice Returns whether the given account is entered in the given asset\\n   * @param account The address of the account to check\\n   * @param cToken The cToken to check\\n   * @return True if the account is in the asset, otherwise false.\\n   */\\n  function checkMembership(address account, CToken cToken) external view returns (bool) {\\n    return markets[address(cToken)].accountMembership[account];\\n  }\\n\\n  /**\\n   * @notice Add assets to be included in account liquidity calculation\\n   * @param cTokens The list of addresses of the cToken markets to be enabled\\n   * @return Success indicator for whether each corresponding market was entered\\n   */\\n  function enterMarkets(address[] memory cTokens) public override returns (uint256[] memory) {\\n    uint256 len = cTokens.length;\\n\\n    uint256[] memory results = new uint256[](len);\\n    for (uint256 i = 0; i < len; i++) {\\n      CToken cToken = CToken(cTokens[i]);\\n\\n      results[i] = uint256(addToMarketInternal(cToken, msg.sender));\\n    }\\n\\n    return results;\\n  }\\n\\n  /**\\n   * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n   * @param cToken The market to enter\\n   * @param borrower The address of the account to modify\\n   * @return Success indicator for whether the market was entered\\n   */\\n  function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\\n    Market storage marketToJoin = markets[address(cToken)];\\n\\n    if (!marketToJoin.isListed) {\\n      // market is not listed, cannot join\\n      return Error.MARKET_NOT_LISTED;\\n    }\\n\\n    if (marketToJoin.accountMembership[borrower] == true) {\\n      // already joined\\n      return Error.NO_ERROR;\\n    }\\n\\n    // survived the gauntlet, add to list\\n    // NOTE: we store these somewhat redundantly as a significant optimization\\n    //  this avoids having to iterate through the list for the most common use cases\\n    //  that is, only when we need to perform liquidity checks\\n    //  and not whenever we want to check if an account is in a particular market\\n    marketToJoin.accountMembership[borrower] = true;\\n    accountAssets[borrower].push(cToken);\\n\\n    // Add to allBorrowers\\n    if (!borrowers[borrower]) {\\n      allBorrowers.push(borrower);\\n      borrowers[borrower] = true;\\n      borrowerIndexes[borrower] = allBorrowers.length - 1;\\n    }\\n\\n    emit MarketEntered(cToken, borrower);\\n\\n    return Error.NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Removes asset from sender's account liquidity calculation\\n   * @dev Sender must not have an outstanding borrow balance in the asset,\\n   *  or be providing neccessary collateral for an outstanding borrow.\\n   * @param cTokenAddress The address of the asset to be removed\\n   * @return Whether or not the account successfully exited the market\\n   */\\n  function exitMarket(address cTokenAddress) external override returns (uint256) {\\n    CToken cToken = CToken(cTokenAddress);\\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n    (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n    require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n    /* Fail if the sender has a borrow balance */\\n    if (amountOwed != 0) {\\n      return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n    }\\n\\n    /* Fail if the sender is not permitted to redeem all of their tokens */\\n    uint256 allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n    if (allowed != 0) {\\n      return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n    }\\n\\n    Market storage marketToExit = markets[address(cToken)];\\n\\n    /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n    if (!marketToExit.accountMembership[msg.sender]) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    /* Set cToken account membership to false */\\n    delete marketToExit.accountMembership[msg.sender];\\n\\n    /* Delete cToken from the account\\u2019s list of assets */\\n    // load into memory for faster iteration\\n    CToken[] memory userAssetList = accountAssets[msg.sender];\\n    uint256 len = userAssetList.length;\\n    uint256 assetIndex = len;\\n    for (uint256 i = 0; i < len; i++) {\\n      if (userAssetList[i] == cToken) {\\n        assetIndex = i;\\n        break;\\n      }\\n    }\\n\\n    // We *must* have found the asset in the list or our redundant data structure is broken\\n    assert(assetIndex < len);\\n\\n    // copy last item in list to location of item to be removed, reduce length by 1\\n    CToken[] storage storedList = accountAssets[msg.sender];\\n    storedList[assetIndex] = storedList[storedList.length - 1];\\n    storedList.pop();\\n\\n    // If the user has exited all markets, remove them from the `allBorrowers` array\\n    if (storedList.length == 0) {\\n      allBorrowers[borrowerIndexes[msg.sender]] = allBorrowers[allBorrowers.length - 1]; // Copy last item in list to location of item to be removed\\n      allBorrowers.pop(); // Reduce length by 1\\n      borrowerIndexes[allBorrowers[borrowerIndexes[msg.sender]]] = borrowerIndexes[msg.sender]; // Set borrower index of moved item to correct index\\n      borrowerIndexes[msg.sender] = 0; // Reset sender borrower index to 0 for a gas refund\\n      borrowers[msg.sender] = false; // Tell the contract that the sender is no longer a borrower (so it knows to add the borrower back if they enter a market in the future)\\n    }\\n\\n    emit MarketExited(cToken, msg.sender);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /*** Policy Hooks ***/\\n\\n  /**\\n   * @notice Checks if the account should be allowed to mint tokens in the given market\\n   * @param cToken The market to verify the mint against\\n   * @param minter The account which would get the minted tokens\\n   * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n   * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function mintAllowed(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!mintGuardianPaused[cToken], \\\"mint is paused\\\");\\n\\n    // Shh - currently unused\\n    minter;\\n    mintAmount;\\n\\n    // Make sure market is listed\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Make sure minter is whitelisted\\n    if (enforceWhitelist && !whitelist[minter]) {\\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\\n    }\\n\\n    // Check supply cap\\n    uint256 supplyCap = supplyCaps[cToken];\\n    // Supply cap of 0 corresponds to unlimited supplying\\n    if (supplyCap != 0) {\\n      uint256 totalCash = CToken(cToken).getCash();\\n      uint256 totalBorrows = CToken(cToken).totalBorrows();\\n      uint256 totalReserves = CToken(cToken).totalReserves();\\n      uint256 totalFuseFees = CToken(cToken).totalFuseFees();\\n      uint256 totalAdminFees = CToken(cToken).totalAdminFees();\\n\\n      // totalUnderlyingSupply = totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)\\n      (MathError mathErr, uint256 totalUnderlyingSupply) = addThenSubUInt(\\n        totalCash,\\n        totalBorrows,\\n        add_(add_(totalReserves, totalFuseFees), totalAdminFees)\\n      );\\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n      uint256 nextTotalUnderlyingSupply;\\n      (mathErr, nextTotalUnderlyingSupply) = addUInt(totalUnderlyingSupply, mintAmount);\\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n      require(nextTotalUnderlyingSupply < supplyCap, \\\"market supply cap reached\\\");\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreSupplierAction(cToken, minter);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates mint and reverts on rejection. May emit logs.\\n   * @param cToken Asset being minted\\n   * @param minter The address minting the tokens\\n   * @param actualMintAmount The amount of the underlying asset being minted\\n   * @param mintTokens The number of tokens being minted\\n   */\\n  function mintVerify(\\n    address cToken,\\n    address minter,\\n    uint256 actualMintAmount,\\n    uint256 mintTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    minter;\\n    actualMintAmount;\\n    mintTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n\\n    // Add minter to suppliers mapping\\n    suppliers[minter] = true;\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\\n   * @param cToken The market to verify the redeem against\\n   * @param redeemer The account which would redeem the tokens\\n   * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n   * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function redeemAllowed(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) external override returns (uint256) {\\n    uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n    if (allowed != uint256(Error.NO_ERROR)) {\\n      return allowed;\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreSupplierAction(cToken, redeemer);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  function redeemAllowedInternal(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) internal view returns (uint256) {\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n    if (!markets[cToken].accountMembership[redeemer]) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n    (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      redeemer,\\n      CToken(cToken),\\n      redeemTokens,\\n      0\\n    );\\n    if (err != Error.NO_ERROR) {\\n      return uint256(err);\\n    }\\n    if (shortfall > 0) {\\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates redeem and reverts on rejection. May emit logs.\\n   * @param cToken Asset being redeemed\\n   * @param redeemer The address redeeming the tokens\\n   * @param redeemAmount The amount of the underlying asset being redeemed\\n   * @param redeemTokens The number of tokens being redeemed\\n   */\\n  function redeemVerify(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemAmount,\\n    uint256 redeemTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    redeemer;\\n\\n    // Require tokens is zero or amount is also zero\\n    if (redeemTokens == 0 && redeemAmount > 0) {\\n      revert(\\\"redeemTokens zero\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param cToken The market to verify the borrow against\\n   * @param borrower The account which would borrow the asset\\n   * @param borrowAmount The amount of underlying the account would borrow\\n   * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function borrowAllowed(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!borrowGuardianPaused[cToken], \\\"borrow is paused\\\");\\n\\n    // Make sure market is listed\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    if (!markets[cToken].accountMembership[borrower]) {\\n      // only cTokens may call borrowAllowed if borrower not in market\\n      require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n      // attempt to add borrower to the market\\n      Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n      if (err != Error.NO_ERROR) {\\n        return uint256(err);\\n      }\\n\\n      // it should be impossible to break the important invariant\\n      assert(markets[cToken].accountMembership[borrower]);\\n    }\\n\\n    // Make sure oracle price is available\\n    if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\n      return uint256(Error.PRICE_ERROR);\\n    }\\n\\n    // Make sure borrower is whitelisted\\n    if (enforceWhitelist && !whitelist[borrower]) {\\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\\n    }\\n\\n    // Check borrow cap\\n    uint256 borrowCap = borrowCaps[cToken];\\n    // Borrow cap of 0 corresponds to unlimited borrowing\\n    if (borrowCap != 0) {\\n      uint256 totalBorrows = CToken(cToken).totalBorrows();\\n      (MathError mathErr, uint256 nextTotalBorrows) = addUInt(totalBorrows, borrowAmount);\\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n      require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreBorrowerAction(cToken, borrower);\\n\\n    // Perform a hypothetical liquidity check to guard against shortfall\\n    (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      borrower,\\n      CToken(cToken),\\n      0,\\n      borrowAmount\\n    );\\n    if (err != Error.NO_ERROR) {\\n      return uint256(err);\\n    }\\n    if (shortfall > 0) {\\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param cToken Asset whose underlying is being borrowed\\n   * @param accountBorrowsNew The user's new borrow balance of the underlying asset\\n   */\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external override returns (uint256) {\\n    // Check if min borrow exists\\n    uint256 minBorrowEth = IFuseFeeDistributor(fuseAdmin).minBorrowEth();\\n\\n    if (minBorrowEth > 0) {\\n      // Get new underlying borrow balance of account for this cToken\\n      uint256 oraclePriceMantissa = oracle.getUnderlyingPrice(CToken(cToken));\\n      if (oraclePriceMantissa == 0) return uint256(Error.PRICE_ERROR);\\n      (MathError mathErr, uint256 borrowBalanceEth) = mulScalarTruncate(\\n        Exp({ mantissa: oraclePriceMantissa }),\\n        accountBorrowsNew\\n      );\\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n      // Check against min borrow\\n      if (borrowBalanceEth < minBorrowEth) return uint256(Error.BORROW_BELOW_MIN);\\n    }\\n\\n    // Return no error\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param cToken Asset whose underlying is being borrowed\\n   * @param exchangeRateMantissa Underlying/cToken exchange rate\\n   * @param accountTokens Initial account cToken balance\\n   * @param accountTokens Underlying amount to mint\\n   */\\n  function mintWithinLimits(\\n    address cToken,\\n    uint256 exchangeRateMantissa,\\n    uint256 accountTokens,\\n    uint256 mintAmount\\n  ) external override returns (uint256) {\\n    // Return no error\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates borrow and reverts on rejection. May emit logs.\\n   * @param cToken Asset whose underlying is being borrowed\\n   * @param borrower The address borrowing the underlying\\n   * @param borrowAmount The amount of the underlying asset requested to borrow\\n   */\\n  function borrowVerify(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    borrower;\\n    borrowAmount;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\\n   * @param cToken The market to verify the repay against\\n   * @param payer The account which would repay the asset\\n   * @param borrower The account which would borrowed the asset\\n   * @param repayAmount The amount of the underlying asset the account would repay\\n   * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external override returns (uint256) {\\n    // Shh - currently unused\\n    payer;\\n    borrower;\\n    repayAmount;\\n\\n    // Make sure market is listed\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreBorrowerAction(cToken, borrower);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n   * @param cToken Asset being repaid\\n   * @param payer The address repaying the borrow\\n   * @param borrower The address of the borrower\\n   * @param actualRepayAmount The amount of underlying being repaid\\n   */\\n  function repayBorrowVerify(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 actualRepayAmount,\\n    uint256 borrowerIndex\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    payer;\\n    borrower;\\n    actualRepayAmount;\\n    borrowerIndex;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the liquidation should be allowed to occur\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param repayAmount The amount of underlying being repaid\\n   */\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external override returns (uint256) {\\n    // Shh - currently unused\\n    liquidator;\\n\\n    // Make sure markets are listed\\n    if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Get borrowers's underlying borrow balance\\n    uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\n\\n    /* allow accounts to be liquidated if the market is deprecated */\\n    if (isDeprecated(CToken(cTokenBorrowed))) {\\n      require(borrowBalance >= repayAmount, \\\"Can not repay more than the total borrow\\\");\\n    } else {\\n      /* The borrower must have shortfall in order to be liquidatable */\\n      (Error err, , uint256 shortfall) = getAccountLiquidityInternal(borrower);\\n      if (err != Error.NO_ERROR) {\\n        return uint256(err);\\n      }\\n\\n      if (shortfall == 0) {\\n        return uint256(Error.INSUFFICIENT_SHORTFALL);\\n      }\\n\\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\\n      uint256 maxClose = mul_ScalarTruncate(Exp({ mantissa: closeFactorMantissa }), borrowBalance);\\n      if (repayAmount > maxClose) {\\n        return uint256(Error.TOO_MUCH_REPAY);\\n      }\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param actualRepayAmount The amount of underlying being repaid\\n   */\\n  function liquidateBorrowVerify(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 actualRepayAmount,\\n    uint256 seizeTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cTokenBorrowed;\\n    cTokenCollateral;\\n    liquidator;\\n    borrower;\\n    actualRepayAmount;\\n    seizeTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the seizing of assets should be allowed to occur\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param seizeTokens The number of collateral tokens to seize\\n   */\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n    // Shh - currently unused\\n    liquidator;\\n    borrower;\\n    seizeTokens;\\n\\n    // Make sure markets are listed\\n    if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Make sure cToken Comptrollers are identical\\n    if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\n      return uint256(Error.COMPTROLLER_MISMATCH);\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreTransferAction(cTokenCollateral, borrower, liquidator);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates seize and reverts on rejection. May emit logs.\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param seizeTokens The number of collateral tokens to seize\\n   */\\n  function seizeVerify(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cTokenCollateral;\\n    cTokenBorrowed;\\n    liquidator;\\n    borrower;\\n    seizeTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\\n   * @param cToken The market to verify the transfer against\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   * @param transferTokens The number of cTokens to transfer\\n   * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function transferAllowed(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n    // Currently the only consideration is whether or not\\n    //  the src is allowed to redeem this many tokens\\n    uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n    if (allowed != uint256(Error.NO_ERROR)) {\\n      return allowed;\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreTransferAction(cToken, src, dst);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates transfer and reverts on rejection. May emit logs.\\n   * @param cToken Asset being transferred\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   * @param transferTokens The number of cTokens to transfer\\n   */\\n  function transferVerify(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    src;\\n    dst;\\n    transferTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /*** Flywheel Hooks ***/\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n   * @param cToken The relevant market\\n   * @param supplier The minter/redeemer\\n   */\\n  function flywheelPreSupplierAction(address cToken, address supplier) internal {\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      RewardsDistributorDelegate(rewardsDistributors[i]).flywheelPreSupplierAction(cToken, supplier);\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n   * @param cToken The relevant market\\n   * @param borrower The borrower\\n   */\\n  function flywheelPreBorrowerAction(address cToken, address borrower) internal {\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      RewardsDistributorDelegate(rewardsDistributors[i]).flywheelPreBorrowerAction(cToken, borrower);\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-transfer and pre-seize\\n   * @param cToken The relevant market\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   */\\n  function flywheelPreTransferAction(\\n    address cToken,\\n    address src,\\n    address dst\\n  ) internal {\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      RewardsDistributorDelegate(rewardsDistributors[i]).flywheelPreTransferAction(cToken, src, dst);\\n  }\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  /**\\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n   *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n   *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n   */\\n  struct AccountLiquidityLocalVars {\\n    uint256 sumCollateral;\\n    uint256 sumBorrowPlusEffects;\\n    uint256 cTokenBalance;\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n    uint256 oraclePriceMantissa;\\n    Exp collateralFactor;\\n    Exp exchangeRate;\\n    Exp oraclePrice;\\n    Exp tokensToDenom;\\n  }\\n\\n  /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n  function getAccountLiquidity(address account)\\n    public\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    (Error err, uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      account,\\n      CToken(address(0)),\\n      0,\\n      0\\n    );\\n\\n    return (uint256(err), liquidity, shortfall);\\n  }\\n\\n  /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n  function getAccountLiquidityInternal(address account)\\n    internal\\n    view\\n    returns (\\n      Error,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return getHypotheticalAccountLiquidityInternal(account, CToken(address(0)), 0, 0);\\n  }\\n\\n  /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n  function getHypotheticalAccountLiquidity(\\n    address account,\\n    address cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount\\n  )\\n    public\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    (Error err, uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      account,\\n      CToken(cTokenModify),\\n      redeemTokens,\\n      borrowAmount\\n    );\\n    return (uint256(err), liquidity, shortfall);\\n  }\\n\\n  /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n  function getHypotheticalAccountLiquidityInternal(\\n    address account,\\n    CToken cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount\\n  )\\n    internal\\n    view\\n    returns (\\n      Error,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n    uint256 oErr;\\n\\n    // For each asset the account is in\\n    CToken[] memory assets = accountAssets[account];\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      CToken asset = assets[i];\\n\\n      // Read the balances and exchange rate from the cToken\\n      (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n      if (oErr != 0) {\\n        // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n        return (Error.SNAPSHOT_ERROR, 0, 0);\\n      }\\n      vars.collateralFactor = Exp({ mantissa: markets[address(asset)].collateralFactorMantissa });\\n      vars.exchangeRate = Exp({ mantissa: vars.exchangeRateMantissa });\\n\\n      // Get the normalized price of the asset\\n      vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n      if (vars.oraclePriceMantissa == 0) {\\n        return (Error.PRICE_ERROR, 0, 0);\\n      }\\n      vars.oraclePrice = Exp({ mantissa: vars.oraclePriceMantissa });\\n\\n      // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n      vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\n\\n      // sumCollateral += tokensToDenom * cTokenBalance\\n      vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\\n\\n      // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n      vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n        vars.oraclePrice,\\n        vars.borrowBalance,\\n        vars.sumBorrowPlusEffects\\n      );\\n\\n      // Calculate effects of interacting with cTokenModify\\n      if (asset == cTokenModify) {\\n        // redeem effect\\n        // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n          vars.tokensToDenom,\\n          redeemTokens,\\n          vars.sumBorrowPlusEffects\\n        );\\n\\n        // borrow effect\\n        // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n          vars.oraclePrice,\\n          borrowAmount,\\n          vars.sumBorrowPlusEffects\\n        );\\n      }\\n    }\\n\\n    // These are safe, as the underflow condition is checked first\\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n      return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n    } else {\\n      return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n   * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n   * @param cTokenBorrowed The address of the borrowed cToken\\n   * @param cTokenCollateral The address of the collateral cToken\\n   * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n   * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n   */\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 actualRepayAmount\\n  ) external view override returns (uint256, uint256) {\\n    /* Read oracle prices for borrowed and collateral markets */\\n    uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\\n    uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));\\n    if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n      return (uint256(Error.PRICE_ERROR), 0);\\n    }\\n\\n    /*\\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n     *  seizeTokens = seizeAmount / exchangeRate\\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n     */\\n    uint256 exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n    uint256 seizeTokens;\\n    Exp memory numerator;\\n    Exp memory denominator;\\n    Exp memory ratio;\\n\\n    numerator = mul_(Exp({ mantissa: liquidationIncentiveMantissa }), Exp({ mantissa: priceBorrowedMantissa }));\\n    denominator = mul_(Exp({ mantissa: priceCollateralMantissa }), Exp({ mantissa: exchangeRateMantissa }));\\n    ratio = div_(numerator, denominator);\\n\\n    seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n    return (uint256(Error.NO_ERROR), seizeTokens);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Add a RewardsDistributor contracts.\\n   * @dev Admin function to add a RewardsDistributor contract\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addRewardsDistributor(address distributor) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK);\\n    }\\n\\n    // Check marker method\\n    require(RewardsDistributorDelegate(distributor).isRewardsDistributor(), \\\"marker method returned false\\\");\\n\\n    // Check for existing RewardsDistributor\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      require(distributor != rewardsDistributors[i], \\\"RewardsDistributor contract already added\\\");\\n\\n    // Add RewardsDistributor to array\\n    rewardsDistributors.push(distributor);\\n    emit AddedRewardsDistributor(distributor);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the whitelist enforcement for the comptroller\\n   * @dev Admin function to set a new whitelist enforcement boolean\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_ENFORCEMENT_OWNER_CHECK);\\n    }\\n\\n    // Check if `enforceWhitelist` already equals `enforce`\\n    if (enforceWhitelist == enforce) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    // Set comptroller's `enforceWhitelist` to `enforce`\\n    enforceWhitelist = enforce;\\n\\n    // Emit WhitelistEnforcementChanged(bool enforce);\\n    emit WhitelistEnforcementChanged(enforce);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the whitelist `statuses` for `suppliers`\\n   * @dev Admin function to set the whitelist `statuses` for `suppliers`\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_STATUS_OWNER_CHECK);\\n    }\\n\\n    // Set whitelist statuses for suppliers\\n    for (uint256 i = 0; i < suppliers.length; i++) {\\n      address supplier = suppliers[i];\\n\\n      if (statuses[i]) {\\n        // If not already whitelisted, add to whitelist\\n        if (!whitelist[supplier]) {\\n          whitelist[supplier] = true;\\n          whitelistArray.push(supplier);\\n          whitelistIndexes[supplier] = whitelistArray.length - 1;\\n        }\\n      } else {\\n        // If whitelisted, remove from whitelist\\n        if (whitelist[supplier]) {\\n          whitelistArray[whitelistIndexes[supplier]] = whitelistArray[whitelistArray.length - 1]; // Copy last item in list to location of item to be removed\\n          whitelistArray.pop(); // Reduce length by 1\\n          whitelistIndexes[whitelistArray[whitelistIndexes[supplier]]] = whitelistIndexes[supplier]; // Set whitelist index of moved item to correct index\\n          whitelistIndexes[supplier] = 0; // Reset supplier whitelist index to 0 for a gas refund\\n          whitelist[supplier] = false; // Tell the contract that the supplier is no longer whitelisted\\n        }\\n      }\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets a new price oracle for the comptroller\\n   * @dev Admin function to set a new price oracle\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n    }\\n\\n    // Track the old oracle for the comptroller\\n    PriceOracle oldOracle = oracle;\\n\\n    // Set comptroller's oracle to newOracle\\n    oracle = newOracle;\\n\\n    // Emit NewPriceOracle(oldOracle, newOracle)\\n    emit NewPriceOracle(oldOracle, newOracle);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the closeFactor used when liquidating borrows\\n   * @dev Admin function to set closeFactor\\n   * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\\n    }\\n\\n    // Check limits\\n    Exp memory newCloseFactorExp = Exp({ mantissa: newCloseFactorMantissa });\\n    Exp memory lowLimit = Exp({ mantissa: closeFactorMinMantissa });\\n    if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n    }\\n\\n    Exp memory highLimit = Exp({ mantissa: closeFactorMaxMantissa });\\n    if (lessThanExp(highLimit, newCloseFactorExp)) {\\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n    }\\n\\n    // Set pool close factor to new close factor, remember old value\\n    uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n    closeFactorMantissa = newCloseFactorMantissa;\\n\\n    // Emit event\\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the collateralFactor for a market\\n   * @dev Admin function to set per-market collateralFactor\\n   * @param cToken The market to set the factor on\\n   * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setCollateralFactor(CToken cToken, uint256 newCollateralFactorMantissa) public returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n    }\\n\\n    // Verify market is listed\\n    Market storage market = markets[address(cToken)];\\n    if (!market.isListed) {\\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n    }\\n\\n    Exp memory newCollateralFactorExp = Exp({ mantissa: newCollateralFactorMantissa });\\n\\n    // Check collateral factor <= 0.9\\n    Exp memory highLimit = Exp({ mantissa: collateralFactorMaxMantissa });\\n    if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n      return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n    }\\n\\n    // If collateral factor != 0, fail if price == 0\\n    if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\\n      return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n    }\\n\\n    // Set market's collateral factor to new collateral factor, remember old value\\n    uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n    market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n    // Emit event with asset, old collateral factor, and new collateral factor\\n    emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets liquidationIncentive\\n   * @dev Admin function to set liquidationIncentive\\n   * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n    }\\n\\n    // Check de-scaled min <= newLiquidationIncentive <= max\\n    Exp memory newLiquidationIncentive = Exp({ mantissa: newLiquidationIncentiveMantissa });\\n    Exp memory minLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMinMantissa });\\n    if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n    }\\n\\n    Exp memory maxLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMaxMantissa });\\n    if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n    }\\n\\n    // Save current value for use in log\\n    uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n    // Set liquidation incentive to new incentive\\n    liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n    // Emit event with old incentive, new incentive\\n    emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Add the market to the markets mapping and set it as listed\\n   * @dev Admin function to set isListed and add support for the market\\n   * @param cToken The address of the market (token) to list\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _supportMarket(CToken cToken) internal returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n    }\\n\\n    // Is market already listed?\\n    if (markets[address(cToken)].isListed) {\\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n    }\\n    // Sanity check to make sure its really a CToken\\n    require(cToken.isCToken(), \\\"marker method returned false\\\");\\n\\n    // Check cToken.comptroller == this\\n    require(address(cToken.comptroller()) == address(this), \\\"Cannot support a market with a different Comptroller.\\\");\\n\\n    // Make sure market is not already listed\\n    address underlying = cToken.isCEther() ? address(0) : CErc20(address(cToken)).underlying();\\n\\n    if (address(cTokensByUnderlying[underlying]) != address(0)) {\\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n    }\\n\\n    // List market and emit event\\n    Market storage market = markets[address(cToken)];\\n    market.isListed = true;\\n    market.collateralFactorMantissa = 0;\\n    allMarkets.push(cToken);\\n    cTokensByUnderlying[underlying] = cToken;\\n    emit MarketListed(cToken);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\\n   * @dev Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _deployMarket(\\n    bool isCEther,\\n    bytes calldata constructorData,\\n    uint256 collateralFactorMantissa\\n  ) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n    }\\n\\n    // Temporarily enable Fuse admin rights for asset deployment (storing the original value)\\n    bool oldFuseAdminHasRights = fuseAdminHasRights;\\n    fuseAdminHasRights = true;\\n\\n    // Deploy via Fuse admin\\n    CToken cToken = CToken(\\n      isCEther\\n        ? IFuseFeeDistributor(fuseAdmin).deployCEther(constructorData)\\n        : IFuseFeeDistributor(fuseAdmin).deployCErc20(constructorData)\\n    );\\n    // Reset Fuse admin rights to the original value\\n    fuseAdminHasRights = oldFuseAdminHasRights;\\n    // Support market here in the Comptroller\\n    uint256 err = _supportMarket(cToken);\\n\\n    // Set collateral factor\\n    return err == uint256(Error.NO_ERROR) ? _setCollateralFactor(cToken, collateralFactorMantissa) : err;\\n  }\\n\\n  /**\\n   * @notice Removed a market from the markets mapping and sets it as unlisted\\n   * @dev Admin function unset isListed and collateralFactorMantissa and unadd support for the market\\n   * @param cToken The address of the market (token) to unlist\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _unsupportMarket(CToken cToken) external returns (uint256) {\\n    // Check admin rights\\n    if (!hasAdminRights()) return fail(Error.UNAUTHORIZED, FailureInfo.UNSUPPORT_MARKET_OWNER_CHECK);\\n\\n    // Check if market is already unlisted\\n    if (!markets[address(cToken)].isListed)\\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.UNSUPPORT_MARKET_DOES_NOT_EXIST);\\n\\n    // Check if market is in use\\n    if (cToken.totalSupply() > 0) return fail(Error.NONZERO_TOTAL_SUPPLY, FailureInfo.UNSUPPORT_MARKET_IN_USE);\\n\\n    // Unlist market\\n    delete markets[address(cToken)];\\n\\n    /* Delete cToken from allMarkets */\\n    // load into memory for faster iteration\\n    CToken[] memory _allMarkets = allMarkets;\\n    uint256 len = _allMarkets.length;\\n    uint256 assetIndex = len;\\n    for (uint256 i = 0; i < len; i++) {\\n      if (_allMarkets[i] == cToken) {\\n        assetIndex = i;\\n        break;\\n      }\\n    }\\n\\n    // We *must* have found the asset in the list or our redundant data structure is broken\\n    assert(assetIndex < len);\\n\\n    // copy last item in list to location of item to be removed, reduce length by 1\\n    allMarkets[assetIndex] = allMarkets[allMarkets.length - 1];\\n    allMarkets.pop();\\n\\n    cTokensByUnderlying[cToken.isCEther() ? address(0) : CErc20(address(cToken)).underlying()] = CToken(address(0));\\n    emit MarketUnlisted(cToken);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Toggles the auto-implementation feature\\n   * @param enabled If the feature is to be enabled\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _toggleAutoImplementations(bool enabled) public returns (uint256) {\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK);\\n    }\\n\\n    // Return no error if already set to the desired value\\n    if (autoImplementation == enabled) return uint256(Error.NO_ERROR);\\n\\n    // Store autoImplementation with value enabled\\n    autoImplementation = enabled;\\n\\n    // Emit AutoImplementationsToggled(enabled)\\n    emit AutoImplementationsToggled(enabled);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\\n   * @dev Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\\n   * @param cTokens The addresses of the markets (tokens) to change the supply caps for\\n   * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\n   */\\n  function _setMarketSupplyCaps(CToken[] calldata cTokens, uint256[] calldata newSupplyCaps) external {\\n    require(\\n      msg.sender == admin || msg.sender == borrowCapGuardian,\\n      \\\"only admin or borrow cap guardian can set supply caps\\\"\\n    );\\n\\n    uint256 numMarkets = cTokens.length;\\n    uint256 numSupplyCaps = newSupplyCaps.length;\\n\\n    require(numMarkets != 0 && numMarkets == numSupplyCaps, \\\"invalid input\\\");\\n\\n    for (uint256 i = 0; i < numMarkets; i++) {\\n      supplyCaps[address(cTokens[i])] = newSupplyCaps[i];\\n      emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n   * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n   * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n   * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n   */\\n  function _setMarketBorrowCaps(CToken[] calldata cTokens, uint256[] calldata newBorrowCaps) external {\\n    require(\\n      msg.sender == admin || msg.sender == borrowCapGuardian,\\n      \\\"only admin or borrow cap guardian can set borrow caps\\\"\\n    );\\n\\n    uint256 numMarkets = cTokens.length;\\n    uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n    require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n    for (uint256 i = 0; i < numMarkets; i++) {\\n      borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n      emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Admin function to change the Borrow Cap Guardian\\n   * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n   */\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n    require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\n\\n    // Save current value for inclusion in log\\n    address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n    // Store borrowCapGuardian with value newBorrowCapGuardian\\n    borrowCapGuardian = newBorrowCapGuardian;\\n\\n    // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n    emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n  }\\n\\n  /**\\n   * @notice Admin function to change the Pause Guardian\\n   * @param newPauseGuardian The address of the new Pause Guardian\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _setPauseGuardian(address newPauseGuardian) public returns (uint256) {\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n    }\\n\\n    // Save current value for inclusion in log\\n    address oldPauseGuardian = pauseGuardian;\\n\\n    // Store pauseGuardian with value newPauseGuardian\\n    pauseGuardian = newPauseGuardian;\\n\\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n    require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\n    require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n    mintGuardianPaused[address(cToken)] = state;\\n    emit ActionPaused(cToken, \\\"Mint\\\", state);\\n    return state;\\n  }\\n\\n  function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n    require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\n    require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n    borrowGuardianPaused[address(cToken)] = state;\\n    emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n    return state;\\n  }\\n\\n  function _setTransferPaused(bool state) public returns (bool) {\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\n    require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n    transferGuardianPaused = state;\\n    emit ActionPaused(\\\"Transfer\\\", state);\\n    return state;\\n  }\\n\\n  function _setSeizePaused(bool state) public returns (bool) {\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\n    require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n    seizeGuardianPaused = state;\\n    emit ActionPaused(\\\"Seize\\\", state);\\n    return state;\\n  }\\n\\n  function _become(Unitroller unitroller) public {\\n    require(\\n      (msg.sender == address(fuseAdmin) && unitroller.fuseAdminHasRights()) ||\\n        (msg.sender == unitroller.admin() && unitroller.adminHasRights()),\\n      \\\"only unitroller admin can change brains\\\"\\n    );\\n\\n    uint256 changeStatus = unitroller._acceptImplementation();\\n    require(changeStatus == 0, \\\"change not authorized\\\");\\n\\n    Comptroller(address(unitroller))._becomeImplementation();\\n  }\\n\\n  function _becomeImplementation() external {\\n    require(msg.sender == comptrollerImplementation, \\\"only implementation may call _becomeImplementation\\\");\\n\\n    if (!_notEnteredInitialized) {\\n      _notEntered = true;\\n      _notEnteredInitialized = true;\\n    }\\n  }\\n\\n  /*** Helper Functions ***/\\n\\n  /**\\n   * @notice Return all of the markets\\n   * @dev The automatic getter may be used to access an individual market.\\n   * @return The list of market addresses\\n   */\\n  function getAllMarkets() public view returns (CToken[] memory) {\\n    return allMarkets;\\n  }\\n\\n  /**\\n   * @notice Return all of the borrowers\\n   * @dev The automatic getter may be used to access an individual borrower.\\n   * @return The list of borrower account addresses\\n   */\\n  function getAllBorrowers() public view returns (address[] memory) {\\n    return allBorrowers;\\n  }\\n\\n  /**\\n   * @notice Return all of the whitelist\\n   * @dev The automatic getter may be used to access an individual whitelist status.\\n   * @return The list of borrower account addresses\\n   */\\n  function getWhitelist() external view returns (address[] memory) {\\n    return whitelistArray;\\n  }\\n\\n  /**\\n   * @notice Returns an array of all RewardsDistributors\\n   */\\n  function getRewardsDistributors() external view returns (address[] memory) {\\n    return rewardsDistributors;\\n  }\\n\\n  /**\\n   * @notice Returns true if the given cToken market has been deprecated\\n   * @dev All borrows in a deprecated cToken market can be immediately liquidated\\n   * @param cToken The market to check if deprecated\\n   */\\n  function isDeprecated(CToken cToken) public view returns (bool) {\\n    return\\n      markets[address(cToken)].collateralFactorMantissa == 0 &&\\n      borrowGuardianPaused[address(cToken)] == true &&\\n      add_(add_(cToken.reserveFactorMantissa(), cToken.adminFeeMantissa()), cToken.fuseFeeMantissa()) == 1e18;\\n  }\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  /**\\n   * @dev Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention.\\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\n   */\\n  function _beforeNonReentrant() external override {\\n    require(markets[msg.sender].isListed, \\\"Comptroller:_beforeNonReentrant: caller not listed as market\\\");\\n    require(_notEntered, \\\"re-entered across assets\\\");\\n    _notEntered = false;\\n  }\\n\\n  /**\\n   * @dev Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention.\\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\n   */\\n  function _afterNonReentrant() external override {\\n    require(markets[msg.sender].isListed, \\\"Comptroller:_afterNonReentrant: caller not listed as market\\\");\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n  }\\n}\\n\",\"keccak256\":\"0x5c0370790288f4f19141c163098645bb907d9f275e6add16a3ba98c80f223fe5\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nabstract contract ComptrollerInterface {\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\n  bool public constant isComptroller = true;\\n\\n  /*** Assets You Are In ***/\\n\\n  function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\\n\\n  function exitMarket(address cToken) external virtual returns (uint256);\\n\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount\\n  ) external virtual returns (uint256);\\n\\n  function mintWithinLimits(\\n    address cToken,\\n    uint256 exchangeRateMantissa,\\n    uint256 accountTokens,\\n    uint256 mintAmount\\n  ) external virtual returns (uint256);\\n\\n  function mintVerify(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount,\\n    uint256 mintTokens\\n  ) external virtual;\\n\\n  function redeemAllowed(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) external virtual returns (uint256);\\n\\n  function redeemVerify(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemAmount,\\n    uint256 redeemTokens\\n  ) external virtual;\\n\\n  function borrowAllowed(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external virtual returns (uint256);\\n\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external virtual returns (uint256);\\n\\n  function borrowVerify(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external virtual;\\n\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external virtual returns (uint256);\\n\\n  function repayBorrowVerify(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount,\\n    uint256 borrowerIndex\\n  ) external virtual;\\n\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external virtual returns (uint256);\\n\\n  function liquidateBorrowVerify(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    uint256 seizeTokens\\n  ) external virtual;\\n\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  function seizeVerify(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual;\\n\\n  function transferAllowed(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external virtual returns (uint256);\\n\\n  function transferVerify(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external virtual;\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 repayAmount\\n  ) external view virtual returns (uint256, uint256);\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  function _beforeNonReentrant() external virtual;\\n\\n  function _afterNonReentrant() external virtual;\\n}\\n\",\"keccak256\":\"0x82d6d81c2b784a7cafce53a5f611c9e33c08c55b262d0b56e425ed0f31a67d8c\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n  /*\\n   * Administrator for Fuse\\n   */\\n  address payable public fuseAdmin;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address public pendingAdmin;\\n\\n  /**\\n   * @notice Whether or not the Fuse admin has admin rights\\n   */\\n  bool public fuseAdminHasRights = true;\\n\\n  /**\\n   * @notice Whether or not the admin has admin rights\\n   */\\n  bool public adminHasRights = true;\\n\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(fuseAdmin) && fuseAdminHasRights);\\n  }\\n\\n  /**\\n   * @notice Active brains of Unitroller\\n   */\\n  address public comptrollerImplementation;\\n\\n  /**\\n   * @notice Pending brains of Unitroller\\n   */\\n  address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n  /**\\n   * @notice Oracle which gives the price of any given asset\\n   */\\n  PriceOracle public oracle;\\n\\n  /**\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n   */\\n  uint256 public closeFactorMantissa;\\n\\n  /**\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\n   */\\n  uint256 public liquidationIncentiveMantissa;\\n\\n  /*\\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\n   */\\n  uint256 internal maxAssets;\\n\\n  /**\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n   */\\n  mapping(address => CToken[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n  struct Market {\\n    // Whether or not this market is listed\\n    bool isListed;\\n    // Multiplier representing the most one can borrow against their collateral in this market.\\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\\n    // Must be between 0 and 1, and stored as a mantissa.\\n    uint256 collateralFactorMantissa;\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => bool) accountMembership;\\n  }\\n\\n  /**\\n   * @notice Official mapping of cTokens -> Market metadata\\n   * @dev Used e.g. to determine if a market is supported\\n   */\\n  mapping(address => Market) public markets;\\n\\n  /// @notice A list of all markets\\n  CToken[] public allMarkets;\\n\\n  /**\\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\\n   */\\n  mapping(address => bool) internal borrowers;\\n\\n  /// @notice A list of all borrowers who have entered markets\\n  address[] public allBorrowers;\\n\\n  // Indexes of borrower account addresses in the `allBorrowers` array\\n  mapping(address => uint256) internal borrowerIndexes;\\n\\n  /**\\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\n   */\\n  mapping(address => bool) public suppliers;\\n\\n  /// @notice All cTokens addresses mapped by their underlying token addresses\\n  mapping(address => CToken) public cTokensByUnderlying;\\n\\n  /// @notice Whether or not the supplier whitelist is enforced\\n  bool public enforceWhitelist;\\n\\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\n  mapping(address => bool) public whitelist;\\n\\n  /// @notice An array of all whitelisted accounts\\n  address[] public whitelistArray;\\n\\n  // Indexes of account addresses in the `whitelistArray` array\\n  mapping(address => uint256) internal whitelistIndexes;\\n\\n  /**\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n   *  Actions which allow users to remove their own assets cannot be paused.\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n   */\\n  address public pauseGuardian;\\n  bool public _mintGuardianPaused;\\n  bool public _borrowGuardianPaused;\\n  bool public transferGuardianPaused;\\n  bool public seizeGuardianPaused;\\n  mapping(address => bool) public mintGuardianPaused;\\n  mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n  /**\\n   * @dev Whether or not the implementation should be auto-upgraded.\\n   */\\n  bool public autoImplementation;\\n\\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n  address public borrowCapGuardian;\\n\\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n  mapping(address => uint256) public borrowCaps;\\n\\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n  mapping(address => uint256) public supplyCaps;\\n\\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\\n  address[] public rewardsDistributors;\\n\\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\n  bool internal _notEntered;\\n\\n  /// @dev Whether or not _notEntered has been initialized\\n  bool internal _notEnteredInitialized;\\n}\\n\",\"keccak256\":\"0xfb35bd317958ecef0cca75aa5744598e877c571fe89a44cd7c05bf7ea03137ce\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return uint256 The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance uint256 The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return success bool Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining uint256 The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xcea1d290397e1c8eac89c96738e7ec55259a575f878152eeccf33c0cf6d008e5\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance uint256 The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transfer(address dst, uint256 amount) external;\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved\\n   * @return success bool Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining uint256 The number of tokens allowed to be spent\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9dfa9662f27e690c0c307a32addde924cd072cf0c050807d990e03190c140754\",\"license\":\"UNLICENSED\"},\"contracts/compound/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ncontract ComptrollerErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    COMPTROLLER_MISMATCH,\\n    INSUFFICIENT_SHORTFALL,\\n    INSUFFICIENT_LIQUIDITY,\\n    INVALID_CLOSE_FACTOR,\\n    INVALID_COLLATERAL_FACTOR,\\n    INVALID_LIQUIDATION_INCENTIVE,\\n    MARKET_NOT_ENTERED, // no longer possible\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    MATH_ERROR,\\n    NONZERO_BORROW_BALANCE,\\n    PRICE_ERROR,\\n    REJECTION,\\n    SNAPSHOT_ERROR,\\n    TOO_MANY_ASSETS,\\n    TOO_MUCH_REPAY,\\n    SUPPLIER_NOT_WHITELISTED,\\n    BORROW_BELOW_MIN,\\n    SUPPLY_ABOVE_MAX,\\n    NONZERO_TOTAL_SUPPLY\\n  }\\n\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n    ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\\n    EXIT_MARKET_BALANCE_OWED,\\n    EXIT_MARKET_REJECTION,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n    SET_MAX_ASSETS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n    SET_PRICE_ORACLE_OWNER_CHECK,\\n    SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\\n    SET_WHITELIST_STATUS_OWNER_CHECK,\\n    SUPPORT_MARKET_EXISTS,\\n    SUPPORT_MARKET_OWNER_CHECK,\\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n    UNSUPPORT_MARKET_OWNER_CHECK,\\n    UNSUPPORT_MARKET_DOES_NOT_EXIST,\\n    UNSUPPORT_MARKET_IN_USE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return uint256(err);\\n  }\\n}\\n\\ncontract TokenErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    BAD_INPUT,\\n    COMPTROLLER_REJECTION,\\n    COMPTROLLER_CALCULATION_ERROR,\\n    INTEREST_RATE_MODEL_ERROR,\\n    INVALID_ACCOUNT_PAIR,\\n    INVALID_CLOSE_AMOUNT_REQUESTED,\\n    INVALID_COLLATERAL_FACTOR,\\n    MATH_ERROR,\\n    MARKET_NOT_FRESH,\\n    MARKET_NOT_LISTED,\\n    TOKEN_INSUFFICIENT_ALLOWANCE,\\n    TOKEN_INSUFFICIENT_BALANCE,\\n    TOKEN_INSUFFICIENT_CASH,\\n    TOKEN_TRANSFER_IN_FAILED,\\n    TOKEN_TRANSFER_OUT_FAILED,\\n    UTILIZATION_ABOVE_MAX\\n  }\\n\\n  /*\\n   * Note: FailureInfo (but not Error) is kept in alphabetical order\\n   *       This is because FailureInfo grows significantly faster, and\\n   *       the order of Error has some meaning, while the order of FailureInfo\\n   *       is entirely arbitrary.\\n   */\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_FUSE_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n    BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    BORROW_ACCRUE_INTEREST_FAILED,\\n    BORROW_CASH_NOT_AVAILABLE,\\n    BORROW_FRESHNESS_CHECK,\\n    BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    BORROW_MARKET_NOT_LISTED,\\n    BORROW_COMPTROLLER_REJECTION,\\n    LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n    LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n    LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n    LIQUIDATE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n    LIQUIDATE_FRESHNESS_CHECK,\\n    LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n    LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_SEIZE_TOO_MUCH,\\n    MINT_ACCRUE_INTEREST_FAILED,\\n    MINT_COMPTROLLER_REJECTION,\\n    MINT_EXCHANGE_CALCULATION_FAILED,\\n    MINT_EXCHANGE_RATE_READ_FAILED,\\n    MINT_FRESHNESS_CHECK,\\n    MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    MINT_TRANSFER_IN_FAILED,\\n    MINT_TRANSFER_IN_NOT_POSSIBLE,\\n    NEW_UTILIZATION_RATE_ABOVE_MAX,\\n    REDEEM_ACCRUE_INTEREST_FAILED,\\n    REDEEM_COMPTROLLER_REJECTION,\\n    REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_RATE_READ_FAILED,\\n    REDEEM_FRESHNESS_CHECK,\\n    REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n    WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_FUSE_FEES_FRESH_CHECK,\\n    WITHDRAW_FUSE_FEES_VALIDATION,\\n    WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_ADMIN_FEES_FRESH_CHECK,\\n    WITHDRAW_ADMIN_FEES_VALIDATION,\\n    REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n    REDUCE_RESERVES_ADMIN_CHECK,\\n    REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n    REDUCE_RESERVES_FRESH_CHECK,\\n    REDUCE_RESERVES_VALIDATION,\\n    REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_COMPTROLLER_REJECTION,\\n    REPAY_BORROW_FRESHNESS_CHECK,\\n    REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COMPTROLLER_OWNER_CHECK,\\n    SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n    SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n    SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n    SET_MAX_ASSETS_OWNER_CHECK,\\n    SET_ORACLE_MARKET_NOT_LISTED,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_ADMIN_FEE_ADMIN_CHECK,\\n    SET_ADMIN_FEE_FRESH_CHECK,\\n    SET_ADMIN_FEE_BOUNDS_CHECK,\\n    SET_FUSE_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_FUSE_FEE_FRESH_CHECK,\\n    SET_FUSE_FEE_BOUNDS_CHECK,\\n    SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n    SET_RESERVE_FACTOR_ADMIN_CHECK,\\n    SET_RESERVE_FACTOR_FRESH_CHECK,\\n    SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n    TRANSFER_COMPTROLLER_REJECTION,\\n    TRANSFER_NOT_ALLOWED,\\n    TRANSFER_NOT_ENOUGH,\\n    TRANSFER_TOO_MUCH,\\n    ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n    ADD_RESERVES_FRESH_CHECK,\\n    ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint256(err);\\n  }\\n}\\n\",\"keccak256\":\"0x4f36aa20081620a7ffc7373f482d044c2e357cab768f45af2e15dfcccd8c5c9c\",\"license\":\"UNLICENSED\"},\"contracts/compound/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n  /**\\n   * @dev Creates an exponential from numerator and denominator values.\\n   *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n   *            or if `denom` is zero.\\n   */\\n  function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n    if (err1 != MathError.NO_ERROR) {\\n      return (err1, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n  }\\n\\n  /**\\n   * @dev Adds two exponentials, returning a new exponential.\\n   */\\n  function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n    return (error, Exp({ mantissa: result }));\\n  }\\n\\n  /**\\n   * @dev Subtracts two exponentials, returning a new exponential.\\n   */\\n  function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n    return (error, Exp({ mantissa: result }));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, returning a new Exp.\\n   */\\n  function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, truncate(product));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mulScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return addUInt(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Divide an Exp by a scalar, returning a new Exp.\\n   */\\n  function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n  }\\n\\n  /**\\n   * @dev Divide a scalar by an Exp, returning a new Exp.\\n   */\\n  function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n    /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n    (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n    return getExp(numerator, divisor.mantissa);\\n  }\\n\\n  /**\\n   * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n   */\\n  function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, truncate(fraction));\\n  }\\n\\n  /**\\n   * @dev Multiplies two exponentials, returning a new exponential.\\n   */\\n  function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    // We add half the scale before dividing so that we get rounding instead of truncation.\\n    //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n    // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n    (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n    if (err1 != MathError.NO_ERROR) {\\n      return (err1, Exp({ mantissa: 0 }));\\n    }\\n\\n    (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n    // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n    assert(err2 == MathError.NO_ERROR);\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n  }\\n\\n  /**\\n   * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n   */\\n  function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\\n    return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n  }\\n\\n  /**\\n   * @dev Multiplies three exponentials, returning a new exponential.\\n   */\\n  function mulExp3(\\n    Exp memory a,\\n    Exp memory b,\\n    Exp memory c\\n  ) internal pure returns (MathError, Exp memory) {\\n    (MathError err, Exp memory ab) = mulExp(a, b);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, ab);\\n    }\\n    return mulExp(ab, c);\\n  }\\n\\n  /**\\n   * @dev Divides two exponentials, returning a new exponential.\\n   *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n   *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n   */\\n  function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    return getExp(a.mantissa, b.mantissa);\\n  }\\n}\\n\",\"keccak256\":\"0x648e262fbead58731c4347e3539e1c4b6f140d8752405f129874ec23b23b3f09\",\"license\":\"UNLICENSED\"},\"contracts/compound/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n  uint256 constant expScale = 1e18;\\n  uint256 constant doubleScale = 1e36;\\n  uint256 constant halfExpScale = expScale / 2;\\n  uint256 constant mantissaOne = expScale;\\n\\n  struct Exp {\\n    uint256 mantissa;\\n  }\\n\\n  struct Double {\\n    uint256 mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint256) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2**224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return add_(a, b, \\\"addition overflow\\\");\\n  }\\n\\n  function add_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub_(a, b, \\\"subtraction underflow\\\");\\n  }\\n\\n  function sub_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n  }\\n\\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n  }\\n\\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mul_(a, b, \\\"multiplication overflow\\\");\\n  }\\n\\n  function mul_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    require(c / a == b, errorMessage);\\n    return c;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n  }\\n\\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n  }\\n\\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div_(a, b, \\\"divide by zero\\\");\\n  }\\n\\n  function div_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    return a / b;\\n  }\\n\\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n  }\\n}\\n\",\"keccak256\":\"0xec0df0038026b4e9c272de575121befd31d3a306fec5f157aaf1625fc08cfe69\",\"license\":\"UNLICENSED\"},\"contracts/compound/IFuseFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ninterface IFuseFeeDistributor {\\n  function minBorrowEth() external view returns (uint256);\\n\\n  function maxSupplyEth() external view returns (uint256);\\n\\n  function maxUtilizationRate() external view returns (uint256);\\n\\n  function interestFeeRate() external view returns (uint256);\\n\\n  function comptrollerImplementationWhitelist(address oldImplementation, address newImplementation)\\n    external\\n    view\\n    returns (bool);\\n\\n  function cErc20DelegateWhitelist(\\n    address oldImplementation,\\n    address newImplementation,\\n    bool allowResign\\n  ) external view returns (bool);\\n\\n  function cEtherDelegateWhitelist(\\n    address oldImplementation,\\n    address newImplementation,\\n    bool allowResign\\n  ) external view returns (bool);\\n\\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\n\\n  function latestCErc20Delegate(address oldImplementation)\\n    external\\n    view\\n    returns (\\n      address cErc20Delegate,\\n      bool allowResign,\\n      bytes memory becomeImplementationData\\n    );\\n\\n  function latestCEtherDelegate(address oldImplementation)\\n    external\\n    view\\n    returns (\\n      address cEtherDelegate,\\n      bool allowResign,\\n      bytes memory becomeImplementationData\\n    );\\n\\n  function deployCEther(bytes calldata constructorData) external returns (address);\\n\\n  function deployCErc20(bytes calldata constructorData) external returns (address);\\n\\n  fallback() external payable;\\n\\n  receive() external payable;\\n}\\n\",\"keccak256\":\"0xd765ee2dea782f443e59b3a239391bd57e2576d0c5218f1992975b7c2d8b0e3d\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x587a54b49d48df2cd91583eac93ddde4e2849f79d0441f179bf835e9dffe24e9\",\"license\":\"UNLICENSED\"},\"contracts/compound/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n  bool public constant isPriceOracle = true;\\n\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(CToken cToken) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x16943951c151400d491d9e73a9e15ec264b54933775b313972cac6c943dddfa0\",\"license\":\"UNLICENSED\"},\"contracts/compound/RewardsDistributorDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\nimport \\\"./Comptroller.sol\\\";\\nimport \\\"./RewardsDistributorStorage.sol\\\";\\n\\n/**\\n * @title RewardsDistributorDelegate (COMP distribution logic extracted from `Comptroller`)\\n * @author Compound\\n */\\ncontract RewardsDistributorDelegate is RewardsDistributorDelegateStorageV1, ExponentialNoError {\\n  /// @dev Notice that this contract is a RewardsDistributor\\n  bool public constant isRewardsDistributor = true;\\n\\n  /// @notice Emitted when pendingAdmin is changed\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /// @notice Emitted when a new COMP speed is calculated for a market\\n  event CompSupplySpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n  /// @notice Emitted when a new COMP speed is calculated for a market\\n  event CompBorrowSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n  /// @notice Emitted when a new COMP speed is set for a contributor\\n  event ContributorCompSpeedUpdated(address indexed contributor, uint256 newSpeed);\\n\\n  /// @notice Emitted when COMP is distributed to a supplier\\n  event DistributedSupplierComp(\\n    CToken indexed cToken,\\n    address indexed supplier,\\n    uint256 compDelta,\\n    uint256 compSupplyIndex\\n  );\\n\\n  /// @notice Emitted when COMP is distributed to a borrower\\n  event DistributedBorrowerComp(\\n    CToken indexed cToken,\\n    address indexed borrower,\\n    uint256 compDelta,\\n    uint256 compBorrowIndex\\n  );\\n\\n  /// @notice Emitted when COMP is granted by admin\\n  event CompGranted(address recipient, uint256 amount);\\n\\n  /// @notice The initial COMP index for a market\\n  uint224 public constant compInitialIndex = 1e36;\\n\\n  /// @dev Intitializer to set admin to caller and set reward token\\n  function initialize(address _rewardToken) external {\\n    require(msg.sender == admin, \\\"Only admin can initialize.\\\");\\n    require(rewardToken == address(0), \\\"Already initialized.\\\");\\n    require(_rewardToken != address(0), \\\"Cannot initialize reward token to the zero address.\\\");\\n    rewardToken = _rewardToken;\\n  }\\n\\n  /*** Set Admin ***/\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   */\\n  function _setPendingAdmin(address newPendingAdmin) external {\\n    // Check caller = admin\\n    require(msg.sender == admin, \\\"RewardsDistributor:_setPendingAdmin: admin only\\\");\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   */\\n  function _acceptAdmin() external {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    require(\\n      msg.sender == pendingAdmin && msg.sender != address(0),\\n      \\\"RewardsDistributor:_acceptAdmin: pending admin only\\\"\\n    );\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = address(0);\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n  }\\n\\n  /*** Comp Distribution ***/\\n\\n  /**\\n   * @notice Check the cToken before adding\\n   * @param cToken The market to add\\n   */\\n  function checkCToken(CToken cToken) internal view {\\n    // Make sure cToken is listed\\n    Comptroller comptroller = Comptroller(address(cToken.comptroller()));\\n    (bool isListed, ) = comptroller.markets(address(cToken));\\n    require(isListed == true, \\\"comp market is not listed\\\");\\n\\n    // Make sure distributor is added\\n    bool distributorAdded = false;\\n    address[] memory distributors = comptroller.getRewardsDistributors();\\n    for (uint256 i = 0; i < distributors.length; i++) if (distributors[i] == address(this)) distributorAdded = true;\\n    require(distributorAdded == true, \\\"distributor not added\\\");\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single market\\n   * @param cToken The market whose COMP speed to update\\n   * @param compSpeed New COMP speed for market\\n   */\\n  function setCompSupplySpeedInternal(CToken cToken, uint256 compSpeed) internal {\\n    uint256 currentCompSpeed = compSupplySpeeds[address(cToken)];\\n    if (currentCompSpeed != 0) {\\n      // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n      updateCompSupplyIndex(address(cToken));\\n    } else if (compSpeed != 0) {\\n      // Make sure cToken is listed and distributor is added\\n      checkCToken(cToken);\\n\\n      // Add the COMP market\\n      if (compSupplyState[address(cToken)].index == 0) {\\n        compSupplyState[address(cToken)] = CompMarketState({\\n          index: compInitialIndex,\\n          block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\n        });\\n\\n        // Add to allMarkets array if not already there\\n        if (compBorrowState[address(cToken)].index == 0) {\\n          allMarkets.push(cToken);\\n        }\\n      } else {\\n        // Update block number to ensure extra interest is not accrued during the prior period\\n        compSupplyState[address(cToken)].block = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n      }\\n    }\\n\\n    if (currentCompSpeed != compSpeed) {\\n      compSupplySpeeds[address(cToken)] = compSpeed;\\n      emit CompSupplySpeedUpdated(cToken, compSpeed);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single market\\n   * @param cToken The market whose COMP speed to update\\n   * @param compSpeed New COMP speed for market\\n   */\\n  function setCompBorrowSpeedInternal(CToken cToken, uint256 compSpeed) internal {\\n    uint256 currentCompSpeed = compBorrowSpeeds[address(cToken)];\\n    if (currentCompSpeed != 0) {\\n      // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n      Exp memory borrowIndex = Exp({ mantissa: cToken.borrowIndex() });\\n      updateCompBorrowIndex(address(cToken), borrowIndex);\\n    } else if (compSpeed != 0) {\\n      // Make sure cToken is listed and distributor is added\\n      checkCToken(cToken);\\n\\n      // Add the COMP market\\n      if (compBorrowState[address(cToken)].index == 0) {\\n        compBorrowState[address(cToken)] = CompMarketState({\\n          index: compInitialIndex,\\n          block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\n        });\\n\\n        // Add to allMarkets array if not already there\\n        if (compSupplyState[address(cToken)].index == 0) {\\n          allMarkets.push(cToken);\\n        }\\n      } else {\\n        // Update block number to ensure extra interest is not accrued during the prior period\\n        compBorrowState[address(cToken)].block = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n      }\\n    }\\n\\n    if (currentCompSpeed != compSpeed) {\\n      compBorrowSpeeds[address(cToken)] = compSpeed;\\n      emit CompBorrowSpeedUpdated(cToken, compSpeed);\\n    }\\n  }\\n\\n  /**\\n   * @notice Accrue COMP to the market by updating the supply index\\n   * @param cToken The market whose supply index to update\\n   */\\n  function updateCompSupplyIndex(address cToken) internal {\\n    CompMarketState storage supplyState = compSupplyState[cToken];\\n    uint256 supplySpeed = compSupplySpeeds[cToken];\\n    uint256 blockNumber = getBlockNumber();\\n    uint256 deltaBlocks = sub_(blockNumber, uint256(supplyState.block));\\n    if (deltaBlocks > 0 && supplySpeed > 0) {\\n      uint256 supplyTokens = CToken(cToken).totalSupply();\\n      uint256 compAccrued_ = mul_(deltaBlocks, supplySpeed);\\n      Double memory ratio = supplyTokens > 0 ? fraction(compAccrued_, supplyTokens) : Double({ mantissa: 0 });\\n      Double memory index = add_(Double({ mantissa: supplyState.index }), ratio);\\n      compSupplyState[cToken] = CompMarketState({\\n        index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n        block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\n      });\\n    } else if (deltaBlocks > 0 && supplyState.index > 0) {\\n      supplyState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Accrue COMP to the market by updating the borrow index\\n   * @param cToken The market whose borrow index to update\\n   */\\n  function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) internal {\\n    CompMarketState storage borrowState = compBorrowState[cToken];\\n    uint256 borrowSpeed = compBorrowSpeeds[cToken];\\n    uint256 blockNumber = getBlockNumber();\\n    uint256 deltaBlocks = sub_(blockNumber, uint256(borrowState.block));\\n    if (deltaBlocks > 0 && borrowSpeed > 0) {\\n      uint256 borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\\n      uint256 compAccrued_ = mul_(deltaBlocks, borrowSpeed);\\n      Double memory ratio = borrowAmount > 0 ? fraction(compAccrued_, borrowAmount) : Double({ mantissa: 0 });\\n      Double memory index = add_(Double({ mantissa: borrowState.index }), ratio);\\n      compBorrowState[cToken] = CompMarketState({\\n        index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n        block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\n      });\\n    } else if (deltaBlocks > 0 && borrowState.index > 0) {\\n      borrowState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\n   * @param cToken The market in which the supplier is interacting\\n   * @param supplier The address of the supplier to distribute COMP to\\n   */\\n  function distributeSupplierComp(address cToken, address supplier) internal {\\n    CompMarketState storage supplyState = compSupplyState[cToken];\\n    Double memory supplyIndex = Double({ mantissa: supplyState.index });\\n    Double memory supplierIndex = Double({ mantissa: compSupplierIndex[cToken][supplier] });\\n    compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\\n\\n    if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n      supplierIndex.mantissa = compInitialIndex;\\n    }\\n\\n    Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\n    uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\\n    uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\\n    uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\n    compAccrued[supplier] = supplierAccrued;\\n    emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex.mantissa);\\n  }\\n\\n  /**\\n   * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\n   * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n   * @param cToken The market in which the borrower is interacting\\n   * @param borrower The address of the borrower to distribute COMP to\\n   */\\n  function distributeBorrowerComp(\\n    address cToken,\\n    address borrower,\\n    Exp memory marketBorrowIndex\\n  ) internal {\\n    CompMarketState storage borrowState = compBorrowState[cToken];\\n    Double memory borrowIndex = Double({ mantissa: borrowState.index });\\n    Double memory borrowerIndex = Double({ mantissa: compBorrowerIndex[cToken][borrower] });\\n    compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\\n\\n    if (borrowerIndex.mantissa > 0) {\\n      Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\n      uint256 borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n      uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n      uint256 borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\n      compAccrued[borrower] = borrowerAccrued;\\n      emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex.mantissa);\\n    }\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param supplier The minter/redeemer\\n   */\\n  function flywheelPreSupplierAction(address cToken, address supplier) external {\\n    if (compSupplyState[cToken].index > 0) {\\n      updateCompSupplyIndex(cToken);\\n      distributeSupplierComp(cToken, supplier);\\n    }\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param borrower The borrower\\n   */\\n  function flywheelPreBorrowerAction(address cToken, address borrower) external {\\n    if (compBorrowState[cToken].index > 0) {\\n      Exp memory borrowIndex = Exp({ mantissa: CToken(cToken).borrowIndex() });\\n      updateCompBorrowIndex(cToken, borrowIndex);\\n      distributeBorrowerComp(cToken, borrower, borrowIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-transfer and pre-seize\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   */\\n  function flywheelPreTransferAction(\\n    address cToken,\\n    address src,\\n    address dst\\n  ) external {\\n    if (compSupplyState[cToken].index > 0) {\\n      updateCompSupplyIndex(cToken);\\n      distributeSupplierComp(cToken, src);\\n      distributeSupplierComp(cToken, dst);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate additional accrued COMP for a contributor since last accrual\\n   * @param contributor The address to calculate contributor rewards for\\n   */\\n  function updateContributorRewards(address contributor) public {\\n    uint256 compSpeed = compContributorSpeeds[contributor];\\n    uint256 blockNumber = getBlockNumber();\\n    uint256 deltaBlocks = sub_(blockNumber, lastContributorBlock[contributor]);\\n    if (deltaBlocks > 0 && compSpeed > 0) {\\n      uint256 newAccrued = mul_(deltaBlocks, compSpeed);\\n      uint256 contributorAccrued = add_(compAccrued[contributor], newAccrued);\\n\\n      compAccrued[contributor] = contributorAccrued;\\n      lastContributorBlock[contributor] = blockNumber;\\n    }\\n  }\\n\\n  /**\\n   * @notice Claim all the comp accrued by holder in all markets\\n   * @param holder The address to claim COMP for\\n   */\\n  function claimRewards(address holder) public {\\n    return claimRewards(holder, allMarkets);\\n  }\\n\\n  /**\\n   * @notice Claim all the comp accrued by holder in the specified markets\\n   * @param holder The address to claim COMP for\\n   * @param cTokens The list of markets to claim COMP in\\n   */\\n  function claimRewards(address holder, CToken[] memory cTokens) public {\\n    address[] memory holders = new address[](1);\\n    holders[0] = holder;\\n    claimRewards(holders, cTokens, true, true);\\n  }\\n\\n  /**\\n   * @notice Claim all comp accrued by the holders\\n   * @param holders The addresses to claim COMP for\\n   * @param cTokens The list of markets to claim COMP in\\n   * @param borrowers Whether or not to claim COMP earned by borrowing\\n   * @param suppliers Whether or not to claim COMP earned by supplying\\n   */\\n  function claimRewards(\\n    address[] memory holders,\\n    CToken[] memory cTokens,\\n    bool borrowers,\\n    bool suppliers\\n  ) public {\\n    for (uint256 i = 0; i < cTokens.length; i++) {\\n      CToken cToken = cTokens[i];\\n      if (borrowers == true && compBorrowState[address(cToken)].index > 0) {\\n        Exp memory borrowIndex = Exp({ mantissa: cToken.borrowIndex() });\\n        updateCompBorrowIndex(address(cToken), borrowIndex);\\n        for (uint256 j = 0; j < holders.length; j++) {\\n          distributeBorrowerComp(address(cToken), holders[j], borrowIndex);\\n        }\\n      }\\n      if (suppliers == true && compSupplyState[address(cToken)].index > 0) {\\n        updateCompSupplyIndex(address(cToken));\\n        for (uint256 j = 0; j < holders.length; j++) {\\n          distributeSupplierComp(address(cToken), holders[j]);\\n        }\\n      }\\n    }\\n    for (uint256 j = 0; j < holders.length; j++) {\\n      compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Transfer COMP to the user\\n   * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n   * @param user The address of the user to transfer COMP to\\n   * @param amount The amount of COMP to (possibly) transfer\\n   * @return The amount of COMP which was NOT transferred to the user\\n   */\\n  function grantCompInternal(address user, uint256 amount) internal returns (uint256) {\\n    EIP20NonStandardInterface comp = EIP20NonStandardInterface(rewardToken);\\n    uint256 compRemaining = comp.balanceOf(address(this));\\n    if (amount > 0 && amount <= compRemaining) {\\n      comp.transfer(user, amount);\\n      return 0;\\n    }\\n    return amount;\\n  }\\n\\n  /*** Comp Distribution Admin ***/\\n\\n  /**\\n   * @notice Transfer COMP to the recipient\\n   * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n   * @param recipient The address of the recipient to transfer COMP to\\n   * @param amount The amount of COMP to (possibly) transfer\\n   */\\n  function _grantComp(address recipient, uint256 amount) public {\\n    require(msg.sender == admin, \\\"only admin can grant comp\\\");\\n    uint256 amountLeft = grantCompInternal(recipient, amount);\\n    require(amountLeft == 0, \\\"insufficient comp for grant\\\");\\n    emit CompGranted(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single market\\n   * @param cToken The market whose COMP speed to update\\n   * @param compSpeed New COMP speed for market\\n   */\\n  function _setCompSupplySpeed(CToken cToken, uint256 compSpeed) public {\\n    require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n    setCompSupplySpeedInternal(cToken, compSpeed);\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single market\\n   * @param cToken The market whose COMP speed to update\\n   * @param compSpeed New COMP speed for market\\n   */\\n  function _setCompBorrowSpeed(CToken cToken, uint256 compSpeed) public {\\n    require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n    setCompBorrowSpeedInternal(cToken, compSpeed);\\n  }\\n\\n  /**\\n   * @notice Set COMP borrow and supply speeds for the specified markets.\\n   * @param cTokens The markets whose COMP speed to update.\\n   * @param supplySpeeds New supply-side COMP speed for the corresponding market.\\n   * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\\n   */\\n  function _setCompSpeeds(\\n    CToken[] memory cTokens,\\n    uint256[] memory supplySpeeds,\\n    uint256[] memory borrowSpeeds\\n  ) public {\\n    require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n\\n    uint256 numTokens = cTokens.length;\\n    require(\\n      numTokens == supplySpeeds.length && numTokens == borrowSpeeds.length,\\n      \\\"RewardsDistributor::_setCompSpeeds invalid input\\\"\\n    );\\n\\n    for (uint256 i = 0; i < numTokens; ++i) {\\n      setCompSupplySpeedInternal(cTokens[i], supplySpeeds[i]);\\n      setCompBorrowSpeedInternal(cTokens[i], borrowSpeeds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single contributor\\n   * @param contributor The contributor whose COMP speed to update\\n   * @param compSpeed New COMP speed for contributor\\n   */\\n  function _setContributorCompSpeed(address contributor, uint256 compSpeed) public {\\n    require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n\\n    // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\\n    updateContributorRewards(contributor);\\n    if (compSpeed == 0) {\\n      // release storage\\n      delete lastContributorBlock[contributor];\\n    } else {\\n      lastContributorBlock[contributor] = getBlockNumber();\\n    }\\n    compContributorSpeeds[contributor] = compSpeed;\\n\\n    emit ContributorCompSpeedUpdated(contributor, compSpeed);\\n  }\\n\\n  /*** Helper Functions */\\n\\n  function getBlockNumber() public view returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns an array of all markets.\\n   */\\n  function getAllMarkets() external view returns (CToken[] memory) {\\n    return allMarkets;\\n  }\\n}\\n\",\"keccak256\":\"0xe4cf3e84e1f0cd8b65a61ad6b759bf309118fa9100a89d9adbdcf735b930b6b9\",\"license\":\"UNLICENSED\"},\"contracts/compound/RewardsDistributorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract RewardsDistributorDelegatorStorage {\\n  /// @notice Administrator for this contract\\n  address public admin;\\n\\n  /// @notice Pending administrator for this contract\\n  address public pendingAdmin;\\n\\n  /// @notice Active brains of RewardsDistributor\\n  address public implementation;\\n}\\n\\n/**\\n * @title Storage for RewardsDistributorDelegate\\n * @notice For future upgrades, do not change RewardsDistributorDelegateStorageV1. Create a new\\n * contract which implements RewardsDistributorDelegateStorageV1 and following the naming convention\\n * RewardsDistributorDelegateStorageVX.\\n */\\ncontract RewardsDistributorDelegateStorageV1 is RewardsDistributorDelegatorStorage {\\n  /// @dev The token to reward (i.e., COMP)\\n  address public rewardToken;\\n\\n  struct CompMarketState {\\n    // The market's last updated compBorrowIndex or compSupplyIndex\\n    uint224 index;\\n    // The block number the index was last updated at\\n    uint32 block;\\n  }\\n\\n  /// @notice A list of all markets\\n  CToken[] public allMarkets;\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  mapping(address => uint256) public compSupplySpeeds;\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  mapping(address => uint256) public compBorrowSpeeds;\\n\\n  /// @notice The COMP market supply state for each market\\n  mapping(address => CompMarketState) public compSupplyState;\\n\\n  /// @notice The COMP market borrow state for each market\\n  mapping(address => CompMarketState) public compBorrowState;\\n\\n  /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n  mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n  /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n  mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\n\\n  /// @notice The COMP accrued but not yet transferred to each user\\n  mapping(address => uint256) public compAccrued;\\n\\n  /// @notice The portion of COMP that each contributor receives per block\\n  mapping(address => uint256) public compContributorSpeeds;\\n\\n  /// @notice Last block at which a contributor's COMP rewards have been allocated\\n  mapping(address => uint256) public lastContributorBlock;\\n}\\n\",\"keccak256\":\"0x7bf1ba6d0688351f789ff6273e17e0e20eac439a0fff865df409d222bed7b497\",\"license\":\"UNLICENSED\"},\"contracts/compound/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Comptroller.sol\\\";\\n\\n/**\\n * @title Unitroller\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is changed\\n   */\\n  event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Event emitted when the Fuse admin rights are changed\\n   */\\n  event FuseAdminRightsToggled(bool hasRights);\\n\\n  /**\\n   * @notice Event emitted when the admin rights are changed\\n   */\\n  event AdminRightsToggled(bool hasRights);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  constructor(address payable _fuseAdmin) {\\n    // Set admin to caller\\n    admin = msg.sender;\\n    fuseAdmin = _fuseAdmin;\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  function _setPendingImplementation(address newPendingImplementation) public returns (uint256) {\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n    }\\n    if (\\n      !IFuseFeeDistributor(fuseAdmin).comptrollerImplementationWhitelist(\\n        comptrollerImplementation,\\n        newPendingImplementation\\n      )\\n    ) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK);\\n    }\\n    //require(Comptroller(newPendingImplementation).fuseAdmin() == fuseAdmin, \\\"fuseAdmin not matching\\\");\\n\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n    pendingComptrollerImplementation = newPendingImplementation;\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n   * @dev Admin function for new implementation to accept it's role as implementation\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptImplementation() public returns (uint256) {\\n    // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n    if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldImplementation = comptrollerImplementation;\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n    comptrollerImplementation = pendingComptrollerImplementation;\\n\\n    pendingComptrollerImplementation = address(0);\\n\\n    emit NewImplementation(oldImplementation, comptrollerImplementation);\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Toggles Fuse admin rights.\\n   * @param hasRights Boolean indicating if the Fuse admin is to have rights.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _toggleFuseAdminRights(bool hasRights) external returns (uint256) {\\n    // Check caller = admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\n    }\\n\\n    // Check that rights have not already been set to the desired value\\n    if (fuseAdminHasRights == hasRights) return uint256(Error.NO_ERROR);\\n\\n    // Set fuseAdminHasRights\\n    fuseAdminHasRights = hasRights;\\n\\n    // Emit FuseAdminRightsToggled()\\n    emit FuseAdminRightsToggled(fuseAdminHasRights);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Toggles admin rights.\\n   * @param hasRights Boolean indicating if the admin is to have rights.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _toggleAdminRights(bool hasRights) external returns (uint256) {\\n    // Check caller = admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\n    }\\n\\n    // Check that rights have not already been set to the desired value\\n    if (adminHasRights == hasRights) return uint256(Error.NO_ERROR);\\n\\n    // Set adminHasRights\\n    adminHasRights = hasRights;\\n\\n    // Emit AdminRightsToggled()\\n    emit AdminRightsToggled(hasRights);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint256) {\\n    // Check caller = admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() public returns (uint256) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = address(0);\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * It returns to the external caller whatever the implementation returns\\n   * or forwards reverts.\\n   */\\n  fallback() external payable {\\n    // Check for automatic implementation\\n    if (msg.sender != address(this)) {\\n      (bool callSuccess, bytes memory data) = address(this).staticcall(abi.encodeWithSignature(\\\"autoImplementation()\\\"));\\n      bool autoImplementation;\\n      if (callSuccess) (autoImplementation) = abi.decode(data, (bool));\\n\\n      if (autoImplementation) {\\n        address latestComptrollerImplementation = IFuseFeeDistributor(fuseAdmin).latestComptrollerImplementation(\\n          comptrollerImplementation\\n        );\\n\\n        if (comptrollerImplementation != latestComptrollerImplementation) {\\n          address oldImplementation = comptrollerImplementation; // Save current value for inclusion in log\\n          comptrollerImplementation = latestComptrollerImplementation;\\n          emit NewImplementation(oldImplementation, comptrollerImplementation);\\n        }\\n      }\\n    }\\n\\n    // delegate all other functions to current implementation\\n    (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n    assembly {\\n      let free_mem_ptr := mload(0x40)\\n      returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n      switch success\\n      case 0 {\\n        revert(free_mem_ptr, returndatasize())\\n      }\\n      default {\\n        return(free_mem_ptr, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4327e692ac486f7bc869a3641bdea4d7f84501f8f941716c65d34b84b1d31aca\",\"license\":\"UNLICENSED\"},\"contracts/external/compound/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICErc20 is ICToken {\\n  function underlying() external view returns (address);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICToken cTokenCollateral\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4174a86be37f5d7b0e1f02af3f81dfbc22ae8e7598cf9203169133372f2cde7\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface ICToken {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function fuseAdminHasRights() external view returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function comptroller() external view returns (address);\\n\\n  function adminFeeMantissa() external view returns (uint256);\\n\\n  function fuseFeeMantissa() external view returns (uint256);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalAdminFees() external view returns (uint256);\\n\\n  function totalFuseFees() external view returns (uint256);\\n\\n  function isCToken() external view returns (bool);\\n\\n  function isCEther() external view returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function totalBorrowsCurrent() external returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view returns (uint256);\\n\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf3d448eb93652645ae9fd32453be4651f664d00d218f1d0e4fe181a2a39a27f\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./IUnitroller.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ninterface IComptroller {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function fuseAdminHasRights() external view returns (bool);\\n\\n  function oracle() external view returns (IPriceOracle);\\n\\n  function closeFactorMantissa() external view returns (uint256);\\n\\n  function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n  function markets(address cToken) external view returns (bool, uint256);\\n\\n  function getAssetsIn(address account) external view returns (ICToken[] memory);\\n\\n  function checkMembership(address account, ICToken cToken) external view returns (bool);\\n\\n  function getAccountLiquidity(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function _setPriceOracle(IPriceOracle newOracle) external returns (uint256);\\n\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\n\\n  function _become(IUnitroller unitroller) external;\\n\\n  function borrowGuardianPaused(address cToken) external view returns (bool);\\n\\n  function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n  function getAllMarkets() external view returns (ICToken[] memory);\\n\\n  function getAllBorrowers() external view returns (address[] memory);\\n\\n  function suppliers(address account) external view returns (bool);\\n\\n  function enforceWhitelist() external view returns (bool);\\n\\n  function whitelist(address account) external view returns (bool);\\n\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\\n\\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\\n\\n  function _toggleAutoImplementations(bool enabled) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8b7a302d6d4be25bd9ce0b934b05ac68f04be29ed0c9ea34e47266e5bb358655\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x501ba6588dc3bbcbcd7629eb294b2249dce97cb78e1c78feb1815d220b488368\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title RewardsDistributor\\n * @author Compound\\n */\\ninterface IRewardsDistributor {\\n  /// @dev The token to reward (i.e., COMP)\\n  function rewardToken() external view returns (address);\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  function compSupplySpeeds(address) external view returns (uint256);\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  function compBorrowSpeeds(address) external view returns (uint256);\\n\\n  /// @notice The COMP accrued but not yet transferred to each user\\n  function compAccrued(address) external view returns (uint256);\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param supplier The minter/redeemer\\n   */\\n  function flywheelPreSupplierAction(address cToken, address supplier) external;\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param borrower The borrower\\n   */\\n  function flywheelPreBorrowerAction(address cToken, address borrower) external;\\n\\n  /**\\n   * @notice Returns an array of all markets.\\n   */\\n  function getAllMarkets() external view returns (ICToken[] memory);\\n}\\n\",\"keccak256\":\"0x175299449a462109cf22ec786c1bcc820f16eba8052dcfa621e65666e657e3f3\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IUnitroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ninterface IUnitroller {\\n  function _setPendingImplementation(address newPendingImplementation) external returns (uint256);\\n\\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x629111448df95d5f4c6cae88cd8fceb67537af80e82f643e697d2dd4c22e1c49\",\"license\":\"BSD-3-Clause\"},\"contracts/external/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xc30635313c081ea723c128678f4d45c48aac88080d91578e8c4374774d26cba2\",\"license\":\"GPL-3.0-only\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../external/compound/IPriceOracle.sol\\\";\\n\\n/**\\n * @title BasePriceOracle\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\n * @dev Implements the `PriceOracle` interface.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface BasePriceOracle is IPriceOracle {\\n  /**\\n   * @notice Get the price of an underlying asset.\\n   * @param underlying The underlying asset to get the price of.\\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n   * Zero means the price is unavailable.\\n   */\\n  function price(address underlying) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfdb8a3439685177d0150249ec4984ab05fc8a9e4c9172dc714fbb456d0810d47\",\"license\":\"UNLICENSED\"},\"contracts/oracles/MasterPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../external/compound/IPriceOracle.sol\\\";\\nimport \\\"../external/compound/ICToken.sol\\\";\\nimport \\\"../external/compound/ICErc20.sol\\\";\\n\\nimport \\\"./BasePriceOracle.sol\\\";\\n\\n/**\\n * @title MasterPriceOracle\\n * @notice Use a combination of price oracles.\\n * @dev Implements `PriceOracle`.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract MasterPriceOracle is Initializable, IPriceOracle, BasePriceOracle {\\n  /**\\n   * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\\n   */\\n  mapping(address => IPriceOracle) public oracles;\\n\\n  /**\\n   * @dev Default/fallback `PriceOracle`.\\n   */\\n  IPriceOracle public defaultOracle;\\n\\n  /**\\n   * @dev The administrator of this `MasterPriceOracle`.\\n   */\\n  address public admin;\\n\\n  /**\\n   * @dev Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n   */\\n  bool internal noAdminOverwrite;\\n\\n  /**\\n   * @dev The Wrapped native asset address.\\n   */\\n  address public wtoken;\\n\\n  /**\\n   * @dev Returns a boolean indicating if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n   */\\n  function canAdminOverwrite() external view returns (bool) {\\n    return !noAdminOverwrite;\\n  }\\n\\n  /**\\n   * @dev Event emitted when `admin` is changed.\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Event emitted when the default oracle is changed.\\n   */\\n  event NewDefaultOracle(address oldOracle, address newOracle);\\n\\n  /**\\n   * @dev Event emitted when an underlying token's oracle is changed.\\n   */\\n  event NewOracle(address underlying, address oldOracle, address newOracle);\\n\\n  /**\\n   * @dev Constructor to initialize state variables.\\n   * @param underlyings The underlying ERC20 token addresses to link to `_oracles`.\\n   * @param _oracles The `PriceOracle` contracts to be assigned to `underlyings`.\\n   * @param _defaultOracle The default `PriceOracle` contract to use.\\n   * @param _admin The admin who can assign oracles to underlying tokens.\\n   * @param _canAdminOverwrite Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n   */\\n  function initialize(\\n    address[] memory underlyings,\\n    IPriceOracle[] memory _oracles,\\n    IPriceOracle _defaultOracle,\\n    address _admin,\\n    bool _canAdminOverwrite,\\n    address _wtoken\\n  ) external initializer {\\n    // Input validation\\n    require(underlyings.length == _oracles.length, \\\"Lengths of both arrays must be equal.\\\");\\n\\n    // Initialize state variables\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\n      address underlying = underlyings[i];\\n      IPriceOracle newOracle = _oracles[i];\\n      oracles[underlying] = newOracle;\\n      emit NewOracle(underlying, address(0), address(newOracle));\\n    }\\n\\n    defaultOracle = _defaultOracle;\\n    admin = _admin;\\n    noAdminOverwrite = !_canAdminOverwrite;\\n    wtoken = _wtoken;\\n  }\\n\\n  /**\\n   * @dev Sets `_oracles` for `underlyings`.\\n   */\\n  function add(address[] calldata underlyings, IPriceOracle[] calldata _oracles) external onlyAdmin {\\n    // Input validation\\n    require(\\n      underlyings.length > 0 && underlyings.length == _oracles.length,\\n      \\\"Lengths of both arrays must be equal and greater than 0.\\\"\\n    );\\n\\n    // Assign oracles to underlying tokens\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\n      address underlying = underlyings[i];\\n      address oldOracle = address(oracles[underlying]);\\n      if (noAdminOverwrite)\\n        require(\\n          oldOracle == address(0),\\n          \\\"Admin cannot overwrite existing assignments of oracles to underlying tokens.\\\"\\n        );\\n      IPriceOracle newOracle = _oracles[i];\\n      oracles[underlying] = newOracle;\\n      emit NewOracle(underlying, oldOracle, address(newOracle));\\n    }\\n  }\\n\\n  /**\\n   * @dev Changes the admin and emits an event.\\n   */\\n  function setDefaultOracle(IPriceOracle newOracle) external onlyAdmin {\\n    IPriceOracle oldOracle = defaultOracle;\\n    defaultOracle = newOracle;\\n    emit NewDefaultOracle(address(oldOracle), address(newOracle));\\n  }\\n\\n  /**\\n   * @dev Changes the admin and emits an event.\\n   */\\n  function changeAdmin(address newAdmin) external onlyAdmin {\\n    address oldAdmin = admin;\\n    admin = newAdmin;\\n    emit NewAdmin(oldAdmin, newAdmin);\\n  }\\n\\n  /**\\n   * @dev Modifier that checks if `msg.sender == admin`.\\n   */\\n  modifier onlyAdmin() {\\n    require(msg.sender == admin, \\\"Sender is not the admin.\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the price in ETH of the token underlying `cToken`.\\n   * @dev Implements the `PriceOracle` interface for Fuse pools (and Compound v2).\\n   * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\\n   */\\n  function getUnderlyingPrice(ICToken cToken) external view override returns (uint256) {\\n    // Get underlying ERC20 token address\\n    address underlying = address(ICErc20(address(cToken)).underlying());\\n\\n    // Return 1e18 for WETH\\n    if (underlying == wtoken) return 1e18;\\n\\n    // Get underlying price from assigned oracle\\n    IPriceOracle oracle = oracles[underlying];\\n    if (address(oracle) != address(0)) return oracle.getUnderlyingPrice(cToken);\\n    if (address(defaultOracle) != address(0)) return defaultOracle.getUnderlyingPrice(cToken);\\n    revert(\\\"Price oracle not found for this underlying token address.\\\");\\n  }\\n\\n  /**\\n   * @dev Attempts to return the price in ETH of `underlying` (implements `BasePriceOracle`).\\n   */\\n  function price(address underlying) external view override returns (uint256) {\\n    // Return 1e18 for WETH\\n    if (underlying == wtoken) return 1e18;\\n\\n    // Get underlying price from assigned oracle\\n    IPriceOracle oracle = oracles[underlying];\\n    if (address(oracle) != address(0)) return BasePriceOracle(address(oracle)).price(underlying);\\n    if (address(defaultOracle) != address(0)) return BasePriceOracle(address(defaultOracle)).price(underlying);\\n    revert(\\\"Price oracle not found for this underlying token address.\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xf0f5f98aaa368c493cce2ec2951027048d18ac71afd10323e93c6af63b0d0b65\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612eee806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806384b3403d1161006657806384b3403d1461011957806397f35ff01461013d578063c41c2f2414610160578063c4d66de814610191578063d24eaf13146101a657600080fd5b80631ec18ec014610098578063338038fa146100be5780633fc5fab5146100e25780636412904214610106575b600080fd5b6100ab6100a63660046123b3565b6101c8565b6040519081526020015b60405180910390f35b6100d16100cc36600461247d565b6101dd565b6040516100b59594939291906125f9565b6100f56100f03660046126f2565b610786565b6040516100b595949392919061284f565b6100ab6101143660046123b3565b610a08565b61012c61012736600461292e565b610a16565b6040516100b595949392919061294b565b61015061014b36600461292e565b610f33565b6040516100b594939291906129ac565b600054610179906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b6101a461019f36600461292e565b61163b565b005b6101b96101b436600461292e565b611791565b6040516100b593929190612a3c565b60006101d683836001611b7f565b9392505050565b6060806060806060600086516001600160401b03811115610200576102006123ec565b604051908082528060200260200182016040528015610229578160200160208202803683370190505b509050600087516001600160401b03811115610247576102476123ec565b604051908082528060200260200182016040528015610270578160200160208202803683370190505b509050600088516001600160401b0381111561028e5761028e6123ec565b6040519080825280602002602001820160405280156102c157816020015b60608152602001906001900390816102ac5790505b509050600089516001600160401b038111156102df576102df6123ec565b60405190808252806020026020018201604052801561031257816020015b60608152602001906001900390816102fd5790505b50905060008a516001600160401b03811115610330576103306123ec565b604051908082528060200260200182016040528015610359578160200160208202803683370190505b50905060005b8b518110156107725760008c828151811061037c5761037c612aa3565b60200260200101519050806001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190612ac9565b8783815181106103fa576103fa612aa3565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610458573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104809190810190612ae6565b85838151811061049257610492612aa3565b60200260200101819052508482815181106104af576104af612aa3565b6020026020010151516001600160401b038111156104cf576104cf6123ec565b60405190808252806020026020018201604052801561050857816020015b6104f561237d565b8152602001906001900390816104ed5790505b5084838151811061051b5761051b612aa3565b602002602001018190525060005b85838151811061053b5761053b612aa3565b602002602001015151811015610631576105888f8388868151811061056257610562612aa3565b6020026020010151848151811061057b5761057b612aa3565b6020026020010151611e82565b86858151811061059a5761059a612aa3565b602002602001015183815181106105b3576105b3612aa3565b60200260200101516000600281106105cd576105cd612aa3565b602002018786815181106105e3576105e3612aa3565b602002602001015184815181106105fc576105fc612aa3565b602002602001015160016002811061061657610616612aa3565b6020020191909152528061062981612b8a565b915050610529565b5060405163331faf7160e21b81526001600160a01b038f8116600483015282169063cc7ebdc490602401602060405180830381865afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c9190612ba5565b8683815181106106ae576106ae612aa3565b6020026020010181815250508682815181106106cc576106cc612aa3565b60209081029190910101516040516370a0823160e01b81526001600160a01b038381166004830152909116906370a0823190602401602060405180830381865afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190612ba5565b83838151811061075457610754612aa3565b6020908102919091010152508061076a81612b8a565b91505061035f565b50939b929a50909850965090945092505050565b6060806060806060600086516001600160401b038111156107a9576107a96123ec565b6040519080825280602002602001820160405280156107dc57816020015b60608152602001906001900390816107c75790505b509050600087516001600160401b038111156107fa576107fa6123ec565b60405190808252806020026020018201604052801561082d57816020015b60608152602001906001900390816108185790505b509050600088516001600160401b0381111561084b5761084b6123ec565b60405190808252806020026020018201604052801561087e57816020015b60608152602001906001900390816108695790505b509050600089516001600160401b0381111561089c5761089c6123ec565b6040519080825280602002602001820160405280156108cf57816020015b60608152602001906001900390816108ba5790505b50905060008a516001600160401b038111156108ed576108ed6123ec565b60405190808252806020026020018201604052801561092057816020015b606081526020019060019003908161090b5790505b50905060005b8b518110156109f5576109518c828151811061094457610944612aa3565b6020026020010151610a16565b8a868151811061096357610963612aa3565b602002602001018a878151811061097c5761097c612aa3565b602002602001018a888151811061099557610995612aa3565b602002602001018a89815181106109ae576109ae612aa3565b602002602001018a8a815181106109c7576109c7612aa3565b60200260200101859052859052859052859052859052505050505080806109ed90612b8a565b915050610926565b50939a9299509097509550909350915050565b60006101d683836000611b7f565b60608060608060606000866001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a869190810190612ae6565b90506060876001600160a01b0316633605b51b6040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015610ae957506040513d6000823e601f3d908101601f19168201604052610ae69190810190612bbe565b60015b610b025750604080516000815260208101909152610b05565b90505b600081516001600160401b03811115610b2057610b206123ec565b604051908082528060200260200182016040528015610b49578160200160208202803683370190505b509050600083516001600160401b03811115610b6757610b676123ec565b604051908082528060200260200182016040528015610b9a57816020015b6060815260200190600190039081610b855790505b509050600084516001600160401b03811115610bb857610bb86123ec565b604051908082528060200260200182016040528015610beb57816020015b6060815260200190600190039081610bd65790505b50905060005b8451811015610cb157848181518110610c0c57610c0c612aa3565b60200260200101516001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c759190612ac9565b848281518110610c8757610c87612aa3565b6001600160a01b039092166020928302919091019091015280610ca981612b8a565b915050610bf1565b5060005b85518110156109f5576000868281518110610cd257610cd2612aa3565b6020026020010151905085516001600160401b03811115610cf557610cf56123ec565b604051908082528060200260200182016040528015610d1e578160200160208202803683370190505b50848381518110610d3157610d31612aa3565b602002602001018190525085516001600160401b03811115610d5557610d556123ec565b604051908082528060200260200182016040528015610d7e578160200160208202803683370190505b50838381518110610d9157610d91612aa3565b602002602001018190525060005b8651811015610f1e576000878281518110610dbc57610dbc612aa3565b6020908102919091010151604051636aa875b560e01b81526001600160a01b03858116600483015291925090821690636aa875b590602401602060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e359190612ba5565b868581518110610e4757610e47612aa3565b60200260200101518381518110610e6057610e60612aa3565b60209081029190910101526040516303d290cf60e61b81526001600160a01b03848116600483015282169063f4a433c090602401602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190612ba5565b858581518110610ee757610ee7612aa3565b60200260200101518381518110610f0057610f00612aa3565b60209081029190910101525080610f1681612b8a565b915050610d9f565b50508080610f2b90612b8a565b915050610cb5565b600080600060606000856001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9e9190612ac9565b90506000866001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190612c5c565b90506000876001600160a01b0316632f1069ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a9190612c5c565b90506000886001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110d49190810190612ae6565b90506000805b82518110156113155760008382815181106110f7576110f7612aa3565b6020908102919091010151604051638e8f294b60e01b81526001600160a01b0380831660048301529192506000918e1690638e8f294b906024016040805180830381865afa15801561114d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111719190612c77565b50905080611180575050611303565b6000826001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156111dc575060408051601f3d908101601f191682019092526111d991810190612ac9565b60015b6111e857505050611303565b90506000836001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e9190612c5c565b90506000846001600160a01b0316632f1069ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b49190612c5c565b90508a6001600160a01b0316836001600160a01b03161415806112db575089151582151514155b806112ea575088151581151514155b156112fd57866112f981612b8a565b9750505b50505050505b8061130d81612b8a565b9150506110da565b506000816001600160401b03811115611330576113306123ec565b60405190808252806020026020018201604052801561138257816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161134e5790505b5090506000805b84518110156116265760008582815181106113a6576113a6612aa3565b6020026020010151905060008e6001600160a01b0316638e8f294b836040518263ffffffff1660e01b81526004016113ed91906001600160a01b0391909116815260200190565b6040805180830381865afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d9190612c77565b5090508061143c575050611614565b6000826001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611498575060408051601f3d908101601f1916820190925261149591810190612ac9565b60015b6114a457505050611614565b90506000836001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150a9190612c5c565b90506000846001600160a01b0316632f1069ba6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190612c5c565b90508c6001600160a01b0316836001600160a01b031614158061159757508b151582151514155b806115a657508a151581151514155b1561160e576040518060800160405280866001600160a01b03168152602001846001600160a01b0316815260200183151581526020018215158152508888815181106115f4576115f4612aa3565b6020026020010181905250868061160a90612b8a565b9750505b50505050505b8061161e81612b8a565b915050611389565b50959b949a5092985091965091945050505050565b600054610100900460ff166116565760005460ff161561165a565b303b155b6116c25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156116e4576000805461ffff19166101011790555b6001600160a01b0382166117595760405162461bcd60e51b815260206004820152603660248201527f46757365506f6f6c4469726563746f727920696e7374616e63652063616e6e6f6044820152753a103132903a3432903d32b9379030b2323932b9b99760511b60648201526084016116b9565b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561178d576000805461ff00191690555b5050565b606080606060008060029054906101000a90046001600160a01b03166001600160a01b031663d88ff1f46040518163ffffffff1660e01b8152600401600060405180830381865afa1580156117ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118129190810190612ca3565b90506000805b82518110156118e35782818151811061183357611833612aa3565b6020026020010151604001516001600160a01b03166316dc15fe886040518263ffffffff1660e01b815260040161187991906001600160a01b0391909116815260200190565b602060405180830381865afa9250505080156118b2575060408051601f3d908101601f191682019092526118af91810190612c5c565b60015b6118bb576118d1565b80156118cf57826118cb81612b8a565b9350505b505b806118db81612b8a565b915050611818565b506000816001600160401b038111156118fe576118fe6123ec565b604051908082528060200260200182016040528015611927578160200160208202803683370190505b5090506000826001600160401b03811115611944576119446123ec565b60405190808252806020026020018201604052801561196d578160200160208202803683370190505b5090506000836001600160401b0381111561198a5761198a6123ec565b6040519080825280602002602001820160405280156119bd57816020015b60608152602001906001900390816119a85790505b5090506000805b8651811015611b6f5760008782815181106119e1576119e1612aa3565b6020026020010151604001519050806001600160a01b03166316dc15fe8d6040518263ffffffff1660e01b8152600401611a2a91906001600160a01b0391909116815260200190565b602060405180830381865afa925050508015611a63575060408051601f3d908101601f19168201909252611a6091810190612c5c565b60015b611a6c57611b5c565b8015611b5a5782878581518110611a8557611a85612aa3565b60200260200101818152505081868581518110611aa457611aa4612aa3565b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160a01b0316633605b51b6040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015611b2357506040513d6000823e601f3d908101601f19168201604052611b209190810190612bbe565b60015b611b2c57611b4c565b80868681518110611b3f57611b3f612aa3565b6020026020010181905250505b83611b5681612b8a565b9450505b505b5080611b6781612b8a565b9150506119c4565b5092999198509650945050505050565b604051633af9e66960e01b81526001600160a01b0384811660048301526000918291851690633af9e669906024016020604051808303816000875af1158015611bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf09190612ba5565b90506000846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190612ac9565b604051635ec88c7960e01b81526001600160a01b03888116600483015291925060009182918291851690635ec88c7990602401606060405180830381865afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca9190612e32565b92509250925082600014611d3e5760405162461bcd60e51b815260206004820152603560248201527f436f6d7074726f6c6c6572206572726f72207768656e2063616c63756c61746960448201527437339030b1b1b7bab73a103634b8bab4b234ba3c9760591b60648201526084016116b9565b8015611d52576000955050505050506101d6565b600087158015611dcf575060405163929fe9a160e01b81523360048201526001600160a01b038a8116602483015286169063929fe9a190604401602060405180830381865afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190612c5c565b155b15611ddb575084611dfd565b611de6838a8a612130565b905087158015611df557508086105b15611dfd5750845b6000896001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e619190612ba5565b905080821115611e715780611e73565b815b9b9a5050505050505050505050565b60405163331faf7160e21b81526001600160a01b038481166004830152600091829182919086169063cc7ebdc490602401602060405180830381865afa158015611ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef49190612ba5565b60405162e48b0f60e51b81526001600160a01b038681166004830152888116602483015291925090861690631c9161e090604401600060405180830381600087803b158015611f4257600080fd5b505af1158015611f56573d6000803e3d6000fd5b505060405163331faf7160e21b81526001600160a01b0389811660048301526000935084925088169063cc7ebdc490602401602060405180830381865afa158015611fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc99190612ba5565b611fd39190612e60565b60405163331faf7160e21b81526001600160a01b0389811660048301529192509087169063cc7ebdc490602401602060405180830381865afa15801561201d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120419190612ba5565b604051631cdc2c5d60e31b81526001600160a01b03878116600483015289811660248301529193509087169063e6e162e890604401600060405180830381600087803b15801561209057600080fd5b505af11580156120a4573d6000803e3d6000fd5b505060405163331faf7160e21b81526001600160a01b038a811660048301526000935085925089169063cc7ebdc490602401602060405180830381865afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121179190612ba5565b6121219190612e60565b91989197509095505050505050565b6000808411612141575060006101d6565b6000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a59190612ac9565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220b9190612ac9565b60405163fc57d4df60e01b81526001600160a01b038781166004830152919091169063fc57d4df90602401602060405180830381865afa158015612253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122779190612ba5565b9050600081116122bf5760405162461bcd60e51b815260206004820152601360248201527227b930b1b63290383934b1b29032b93937b91760691b60448201526064016116b9565b8361235657604051638e8f294b60e01b81526001600160a01b03868116600483015260009190841690638e8f294b906024016040805180830381865afa15801561230d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123319190612c77565b9150670de0b6b3a764000090506123488383612e77565b6123529190612e96565b9150505b8061236987670de0b6b3a7640000612e77565b6123739190612e96565b9695505050505050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b03811681146123b057600080fd5b50565b600080604083850312156123c657600080fd5b82356123d18161239b565b915060208301356123e18161239b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715612424576124246123ec565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612452576124526123ec565b604052919050565b60006001600160401b03821115612473576124736123ec565b5060051b60200190565b6000806040838503121561249057600080fd5b823561249b8161239b565b91506020838101356001600160401b038111156124b757600080fd5b8401601f810186136124c857600080fd5b80356124db6124d68261245a565b61242a565b81815260059190911b820183019083810190888311156124fa57600080fd5b928401925b828410156125215783356125128161239b565b825292840192908401906124ff565b80955050505050509250929050565b600081518084526020808501945080840160005b838110156125695781516001600160a01b031687529582019590820190600101612544565b509495945050505050565b600081518084526020808501945080840160005b8381101561256957815187529582019590820190600101612588565b600081518084526020808501808196508360051b8101915082860160005b858110156125ec5782840389526125da848351612530565b988501989350908401906001016125c2565b5091979650505050505050565b60a08152600061260c60a0830188612530565b60208382038185015261261f8289612574565b915060408483038186015261263483896125a4565b925084830360608601528287518085528385019150838160051b860101848a0160005b838110156126cd57878303601f1901855281518051808552908801908885019060005b818110156126b85783518360005b60028110156126a55782518252918d0191908d0190600101612688565b505050928a01929189019160010161267a565b50509588019593505090860190600101612657565b505087810360808901526126e1818a612574565b9d9c50505050505050505050505050565b6000602080838503121561270557600080fd5b82356001600160401b0381111561271b57600080fd5b8301601f8101851361272c57600080fd5b803561273a6124d68261245a565b81815260059190911b8201830190838101908783111561275957600080fd5b928401925b828410156127805783356127718161239b565b8252928401929084019061275e565b979650505050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156127f9578385038a52825180518087529087019087870190845b818110156127e4578351835292890192918901916001016127c8565b50509a87019a955050918501916001016127aa565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156125ec57828403895261283d84835161278b565b98850198935090840190600101612825565b60a08152600061286260a08301886125a4565b60208382038185015261287582896125a4565b915083820360408501528187518084528284019150828160051b850101838a016000805b848110156128f557878403601f19018652825180518086529088019088860190845b818110156128e05783516001600160a01b03168352928a0192918a01916001016128bb565b50509688019694505091860191600101612899565b505050868103606088015261290a818a612807565b94505050505082810360808401526129228185612807565b98975050505050505050565b60006020828403121561294057600080fd5b81356101d68161239b565b60a08152600061295e60a0830188612530565b82810360208401526129708188612530565b905082810360408401526129848187612530565b90508281036060840152612998818661278b565b90508281036080840152612922818561278b565b6000608080830160018060a01b0380891685526020881515818701526040881515818801526060858189015284895180875260a08a019150848b01965060005b81811015612a29578751805188168452868101518816878501528581015115158685015284015115158484015296850196918801916001016129ec565b50909d9c50505050505050505050505050565b606081526000612a4f6060830186612574565b82810360208481019190915285518083528682019282019060005b81811015612a8f5784516001600160a01b031683529383019391830191600101612a6a565b5050848103604086015261292281876125a4565b634e487b7160e01b600052603260045260246000fd5b8051612ac48161239b565b919050565b600060208284031215612adb57600080fd5b81516101d68161239b565b60006020808385031215612af957600080fd5b82516001600160401b03811115612b0f57600080fd5b8301601f81018513612b2057600080fd5b8051612b2e6124d68261245a565b81815260059190911b82018301908381019087831115612b4d57600080fd5b928401925b82841015612780578351612b658161239b565b82529284019290840190612b52565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612b9e57612b9e612b74565b5060010190565b600060208284031215612bb757600080fd5b5051919050565b60006020808385031215612bd157600080fd5b82516001600160401b03811115612be757600080fd5b8301601f81018513612bf857600080fd5b8051612c066124d68261245a565b81815260059190911b82018301908381019087831115612c2557600080fd5b928401925b82841015612780578351612c3d8161239b565b82529284019290840190612c2a565b80518015158114612ac457600080fd5b600060208284031215612c6e57600080fd5b6101d682612c4c565b60008060408385031215612c8a57600080fd5b612c9383612c4c565b9150602083015190509250929050565b60006020808385031215612cb657600080fd5b82516001600160401b0380821115612ccd57600080fd5b818501915085601f830112612ce157600080fd5b8151612cef6124d68261245a565b81815260059190911b83018401908481019088831115612d0e57600080fd5b8585015b83811015612e2557805185811115612d2957600080fd5b8601601f1960a0828d0382011215612d415760008081fd5b612d49612402565b8983015188811115612d5b5760008081fd5b8301603f81018e13612d6d5760008081fd5b8a81015189811115612d8157612d816123ec565b612d918c85601f8401160161242a565b935080845260408f81838501011115612daa5760008081fd5b60005b82811015612dc8578381018201518682018f01528d01612dad565b82811115612dd95760008e84880101525b50848452612de8818701612ab9565b8d85015260609450612dfb858701612ab9565b9084015250506080838101519282019290925260a090920151908201528352918601918601612d12565b5098975050505050505050565b600080600060608486031215612e4757600080fd5b8351925060208401519150604084015190509250925092565b600082821015612e7257612e72612b74565b500390565b6000816000190483118215151615612e9157612e91612b74565b500290565b600082612eb357634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205a7f63852d605bcf30f3ddf068bcb0cc276e350ef46cef53ac9a10bacc0b0c7764736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806384b3403d1161006657806384b3403d1461011957806397f35ff01461013d578063c41c2f2414610160578063c4d66de814610191578063d24eaf13146101a657600080fd5b80631ec18ec014610098578063338038fa146100be5780633fc5fab5146100e25780636412904214610106575b600080fd5b6100ab6100a63660046123b3565b6101c8565b6040519081526020015b60405180910390f35b6100d16100cc36600461247d565b6101dd565b6040516100b59594939291906125f9565b6100f56100f03660046126f2565b610786565b6040516100b595949392919061284f565b6100ab6101143660046123b3565b610a08565b61012c61012736600461292e565b610a16565b6040516100b595949392919061294b565b61015061014b36600461292e565b610f33565b6040516100b594939291906129ac565b600054610179906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b6101a461019f36600461292e565b61163b565b005b6101b96101b436600461292e565b611791565b6040516100b593929190612a3c565b60006101d683836001611b7f565b9392505050565b6060806060806060600086516001600160401b03811115610200576102006123ec565b604051908082528060200260200182016040528015610229578160200160208202803683370190505b509050600087516001600160401b03811115610247576102476123ec565b604051908082528060200260200182016040528015610270578160200160208202803683370190505b509050600088516001600160401b0381111561028e5761028e6123ec565b6040519080825280602002602001820160405280156102c157816020015b60608152602001906001900390816102ac5790505b509050600089516001600160401b038111156102df576102df6123ec565b60405190808252806020026020018201604052801561031257816020015b60608152602001906001900390816102fd5790505b50905060008a516001600160401b03811115610330576103306123ec565b604051908082528060200260200182016040528015610359578160200160208202803683370190505b50905060005b8b518110156107725760008c828151811061037c5761037c612aa3565b60200260200101519050806001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190612ac9565b8783815181106103fa576103fa612aa3565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610458573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104809190810190612ae6565b85838151811061049257610492612aa3565b60200260200101819052508482815181106104af576104af612aa3565b6020026020010151516001600160401b038111156104cf576104cf6123ec565b60405190808252806020026020018201604052801561050857816020015b6104f561237d565b8152602001906001900390816104ed5790505b5084838151811061051b5761051b612aa3565b602002602001018190525060005b85838151811061053b5761053b612aa3565b602002602001015151811015610631576105888f8388868151811061056257610562612aa3565b6020026020010151848151811061057b5761057b612aa3565b6020026020010151611e82565b86858151811061059a5761059a612aa3565b602002602001015183815181106105b3576105b3612aa3565b60200260200101516000600281106105cd576105cd612aa3565b602002018786815181106105e3576105e3612aa3565b602002602001015184815181106105fc576105fc612aa3565b602002602001015160016002811061061657610616612aa3565b6020020191909152528061062981612b8a565b915050610529565b5060405163331faf7160e21b81526001600160a01b038f8116600483015282169063cc7ebdc490602401602060405180830381865afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c9190612ba5565b8683815181106106ae576106ae612aa3565b6020026020010181815250508682815181106106cc576106cc612aa3565b60209081029190910101516040516370a0823160e01b81526001600160a01b038381166004830152909116906370a0823190602401602060405180830381865afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190612ba5565b83838151811061075457610754612aa3565b6020908102919091010152508061076a81612b8a565b91505061035f565b50939b929a50909850965090945092505050565b6060806060806060600086516001600160401b038111156107a9576107a96123ec565b6040519080825280602002602001820160405280156107dc57816020015b60608152602001906001900390816107c75790505b509050600087516001600160401b038111156107fa576107fa6123ec565b60405190808252806020026020018201604052801561082d57816020015b60608152602001906001900390816108185790505b509050600088516001600160401b0381111561084b5761084b6123ec565b60405190808252806020026020018201604052801561087e57816020015b60608152602001906001900390816108695790505b509050600089516001600160401b0381111561089c5761089c6123ec565b6040519080825280602002602001820160405280156108cf57816020015b60608152602001906001900390816108ba5790505b50905060008a516001600160401b038111156108ed576108ed6123ec565b60405190808252806020026020018201604052801561092057816020015b606081526020019060019003908161090b5790505b50905060005b8b518110156109f5576109518c828151811061094457610944612aa3565b6020026020010151610a16565b8a868151811061096357610963612aa3565b602002602001018a878151811061097c5761097c612aa3565b602002602001018a888151811061099557610995612aa3565b602002602001018a89815181106109ae576109ae612aa3565b602002602001018a8a815181106109c7576109c7612aa3565b60200260200101859052859052859052859052859052505050505080806109ed90612b8a565b915050610926565b50939a9299509097509550909350915050565b60006101d683836000611b7f565b60608060608060606000866001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a869190810190612ae6565b90506060876001600160a01b0316633605b51b6040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015610ae957506040513d6000823e601f3d908101601f19168201604052610ae69190810190612bbe565b60015b610b025750604080516000815260208101909152610b05565b90505b600081516001600160401b03811115610b2057610b206123ec565b604051908082528060200260200182016040528015610b49578160200160208202803683370190505b509050600083516001600160401b03811115610b6757610b676123ec565b604051908082528060200260200182016040528015610b9a57816020015b6060815260200190600190039081610b855790505b509050600084516001600160401b03811115610bb857610bb86123ec565b604051908082528060200260200182016040528015610beb57816020015b6060815260200190600190039081610bd65790505b50905060005b8451811015610cb157848181518110610c0c57610c0c612aa3565b60200260200101516001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c759190612ac9565b848281518110610c8757610c87612aa3565b6001600160a01b039092166020928302919091019091015280610ca981612b8a565b915050610bf1565b5060005b85518110156109f5576000868281518110610cd257610cd2612aa3565b6020026020010151905085516001600160401b03811115610cf557610cf56123ec565b604051908082528060200260200182016040528015610d1e578160200160208202803683370190505b50848381518110610d3157610d31612aa3565b602002602001018190525085516001600160401b03811115610d5557610d556123ec565b604051908082528060200260200182016040528015610d7e578160200160208202803683370190505b50838381518110610d9157610d91612aa3565b602002602001018190525060005b8651811015610f1e576000878281518110610dbc57610dbc612aa3565b6020908102919091010151604051636aa875b560e01b81526001600160a01b03858116600483015291925090821690636aa875b590602401602060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e359190612ba5565b868581518110610e4757610e47612aa3565b60200260200101518381518110610e6057610e60612aa3565b60209081029190910101526040516303d290cf60e61b81526001600160a01b03848116600483015282169063f4a433c090602401602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190612ba5565b858581518110610ee757610ee7612aa3565b60200260200101518381518110610f0057610f00612aa3565b60209081029190910101525080610f1681612b8a565b915050610d9f565b50508080610f2b90612b8a565b915050610cb5565b600080600060606000856001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9e9190612ac9565b90506000866001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190612c5c565b90506000876001600160a01b0316632f1069ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a9190612c5c565b90506000886001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110d49190810190612ae6565b90506000805b82518110156113155760008382815181106110f7576110f7612aa3565b6020908102919091010151604051638e8f294b60e01b81526001600160a01b0380831660048301529192506000918e1690638e8f294b906024016040805180830381865afa15801561114d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111719190612c77565b50905080611180575050611303565b6000826001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156111dc575060408051601f3d908101601f191682019092526111d991810190612ac9565b60015b6111e857505050611303565b90506000836001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e9190612c5c565b90506000846001600160a01b0316632f1069ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b49190612c5c565b90508a6001600160a01b0316836001600160a01b03161415806112db575089151582151514155b806112ea575088151581151514155b156112fd57866112f981612b8a565b9750505b50505050505b8061130d81612b8a565b9150506110da565b506000816001600160401b03811115611330576113306123ec565b60405190808252806020026020018201604052801561138257816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161134e5790505b5090506000805b84518110156116265760008582815181106113a6576113a6612aa3565b6020026020010151905060008e6001600160a01b0316638e8f294b836040518263ffffffff1660e01b81526004016113ed91906001600160a01b0391909116815260200190565b6040805180830381865afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d9190612c77565b5090508061143c575050611614565b6000826001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611498575060408051601f3d908101601f1916820190925261149591810190612ac9565b60015b6114a457505050611614565b90506000836001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150a9190612c5c565b90506000846001600160a01b0316632f1069ba6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190612c5c565b90508c6001600160a01b0316836001600160a01b031614158061159757508b151582151514155b806115a657508a151581151514155b1561160e576040518060800160405280866001600160a01b03168152602001846001600160a01b0316815260200183151581526020018215158152508888815181106115f4576115f4612aa3565b6020026020010181905250868061160a90612b8a565b9750505b50505050505b8061161e81612b8a565b915050611389565b50959b949a5092985091965091945050505050565b600054610100900460ff166116565760005460ff161561165a565b303b155b6116c25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156116e4576000805461ffff19166101011790555b6001600160a01b0382166117595760405162461bcd60e51b815260206004820152603660248201527f46757365506f6f6c4469726563746f727920696e7374616e63652063616e6e6f6044820152753a103132903a3432903d32b9379030b2323932b9b99760511b60648201526084016116b9565b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561178d576000805461ff00191690555b5050565b606080606060008060029054906101000a90046001600160a01b03166001600160a01b031663d88ff1f46040518163ffffffff1660e01b8152600401600060405180830381865afa1580156117ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118129190810190612ca3565b90506000805b82518110156118e35782818151811061183357611833612aa3565b6020026020010151604001516001600160a01b03166316dc15fe886040518263ffffffff1660e01b815260040161187991906001600160a01b0391909116815260200190565b602060405180830381865afa9250505080156118b2575060408051601f3d908101601f191682019092526118af91810190612c5c565b60015b6118bb576118d1565b80156118cf57826118cb81612b8a565b9350505b505b806118db81612b8a565b915050611818565b506000816001600160401b038111156118fe576118fe6123ec565b604051908082528060200260200182016040528015611927578160200160208202803683370190505b5090506000826001600160401b03811115611944576119446123ec565b60405190808252806020026020018201604052801561196d578160200160208202803683370190505b5090506000836001600160401b0381111561198a5761198a6123ec565b6040519080825280602002602001820160405280156119bd57816020015b60608152602001906001900390816119a85790505b5090506000805b8651811015611b6f5760008782815181106119e1576119e1612aa3565b6020026020010151604001519050806001600160a01b03166316dc15fe8d6040518263ffffffff1660e01b8152600401611a2a91906001600160a01b0391909116815260200190565b602060405180830381865afa925050508015611a63575060408051601f3d908101601f19168201909252611a6091810190612c5c565b60015b611a6c57611b5c565b8015611b5a5782878581518110611a8557611a85612aa3565b60200260200101818152505081868581518110611aa457611aa4612aa3565b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160a01b0316633605b51b6040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015611b2357506040513d6000823e601f3d908101601f19168201604052611b209190810190612bbe565b60015b611b2c57611b4c565b80868681518110611b3f57611b3f612aa3565b6020026020010181905250505b83611b5681612b8a565b9450505b505b5080611b6781612b8a565b9150506119c4565b5092999198509650945050505050565b604051633af9e66960e01b81526001600160a01b0384811660048301526000918291851690633af9e669906024016020604051808303816000875af1158015611bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf09190612ba5565b90506000846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190612ac9565b604051635ec88c7960e01b81526001600160a01b03888116600483015291925060009182918291851690635ec88c7990602401606060405180830381865afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca9190612e32565b92509250925082600014611d3e5760405162461bcd60e51b815260206004820152603560248201527f436f6d7074726f6c6c6572206572726f72207768656e2063616c63756c61746960448201527437339030b1b1b7bab73a103634b8bab4b234ba3c9760591b60648201526084016116b9565b8015611d52576000955050505050506101d6565b600087158015611dcf575060405163929fe9a160e01b81523360048201526001600160a01b038a8116602483015286169063929fe9a190604401602060405180830381865afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190612c5c565b155b15611ddb575084611dfd565b611de6838a8a612130565b905087158015611df557508086105b15611dfd5750845b6000896001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e619190612ba5565b905080821115611e715780611e73565b815b9b9a5050505050505050505050565b60405163331faf7160e21b81526001600160a01b038481166004830152600091829182919086169063cc7ebdc490602401602060405180830381865afa158015611ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef49190612ba5565b60405162e48b0f60e51b81526001600160a01b038681166004830152888116602483015291925090861690631c9161e090604401600060405180830381600087803b158015611f4257600080fd5b505af1158015611f56573d6000803e3d6000fd5b505060405163331faf7160e21b81526001600160a01b0389811660048301526000935084925088169063cc7ebdc490602401602060405180830381865afa158015611fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc99190612ba5565b611fd39190612e60565b60405163331faf7160e21b81526001600160a01b0389811660048301529192509087169063cc7ebdc490602401602060405180830381865afa15801561201d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120419190612ba5565b604051631cdc2c5d60e31b81526001600160a01b03878116600483015289811660248301529193509087169063e6e162e890604401600060405180830381600087803b15801561209057600080fd5b505af11580156120a4573d6000803e3d6000fd5b505060405163331faf7160e21b81526001600160a01b038a811660048301526000935085925089169063cc7ebdc490602401602060405180830381865afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121179190612ba5565b6121219190612e60565b91989197509095505050505050565b6000808411612141575060006101d6565b6000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a59190612ac9565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220b9190612ac9565b60405163fc57d4df60e01b81526001600160a01b038781166004830152919091169063fc57d4df90602401602060405180830381865afa158015612253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122779190612ba5565b9050600081116122bf5760405162461bcd60e51b815260206004820152601360248201527227b930b1b63290383934b1b29032b93937b91760691b60448201526064016116b9565b8361235657604051638e8f294b60e01b81526001600160a01b03868116600483015260009190841690638e8f294b906024016040805180830381865afa15801561230d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123319190612c77565b9150670de0b6b3a764000090506123488383612e77565b6123529190612e96565b9150505b8061236987670de0b6b3a7640000612e77565b6123739190612e96565b9695505050505050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b03811681146123b057600080fd5b50565b600080604083850312156123c657600080fd5b82356123d18161239b565b915060208301356123e18161239b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715612424576124246123ec565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612452576124526123ec565b604052919050565b60006001600160401b03821115612473576124736123ec565b5060051b60200190565b6000806040838503121561249057600080fd5b823561249b8161239b565b91506020838101356001600160401b038111156124b757600080fd5b8401601f810186136124c857600080fd5b80356124db6124d68261245a565b61242a565b81815260059190911b820183019083810190888311156124fa57600080fd5b928401925b828410156125215783356125128161239b565b825292840192908401906124ff565b80955050505050509250929050565b600081518084526020808501945080840160005b838110156125695781516001600160a01b031687529582019590820190600101612544565b509495945050505050565b600081518084526020808501945080840160005b8381101561256957815187529582019590820190600101612588565b600081518084526020808501808196508360051b8101915082860160005b858110156125ec5782840389526125da848351612530565b988501989350908401906001016125c2565b5091979650505050505050565b60a08152600061260c60a0830188612530565b60208382038185015261261f8289612574565b915060408483038186015261263483896125a4565b925084830360608601528287518085528385019150838160051b860101848a0160005b838110156126cd57878303601f1901855281518051808552908801908885019060005b818110156126b85783518360005b60028110156126a55782518252918d0191908d0190600101612688565b505050928a01929189019160010161267a565b50509588019593505090860190600101612657565b505087810360808901526126e1818a612574565b9d9c50505050505050505050505050565b6000602080838503121561270557600080fd5b82356001600160401b0381111561271b57600080fd5b8301601f8101851361272c57600080fd5b803561273a6124d68261245a565b81815260059190911b8201830190838101908783111561275957600080fd5b928401925b828410156127805783356127718161239b565b8252928401929084019061275e565b979650505050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156127f9578385038a52825180518087529087019087870190845b818110156127e4578351835292890192918901916001016127c8565b50509a87019a955050918501916001016127aa565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156125ec57828403895261283d84835161278b565b98850198935090840190600101612825565b60a08152600061286260a08301886125a4565b60208382038185015261287582896125a4565b915083820360408501528187518084528284019150828160051b850101838a016000805b848110156128f557878403601f19018652825180518086529088019088860190845b818110156128e05783516001600160a01b03168352928a0192918a01916001016128bb565b50509688019694505091860191600101612899565b505050868103606088015261290a818a612807565b94505050505082810360808401526129228185612807565b98975050505050505050565b60006020828403121561294057600080fd5b81356101d68161239b565b60a08152600061295e60a0830188612530565b82810360208401526129708188612530565b905082810360408401526129848187612530565b90508281036060840152612998818661278b565b90508281036080840152612922818561278b565b6000608080830160018060a01b0380891685526020881515818701526040881515818801526060858189015284895180875260a08a019150848b01965060005b81811015612a29578751805188168452868101518816878501528581015115158685015284015115158484015296850196918801916001016129ec565b50909d9c50505050505050505050505050565b606081526000612a4f6060830186612574565b82810360208481019190915285518083528682019282019060005b81811015612a8f5784516001600160a01b031683529383019391830191600101612a6a565b5050848103604086015261292281876125a4565b634e487b7160e01b600052603260045260246000fd5b8051612ac48161239b565b919050565b600060208284031215612adb57600080fd5b81516101d68161239b565b60006020808385031215612af957600080fd5b82516001600160401b03811115612b0f57600080fd5b8301601f81018513612b2057600080fd5b8051612b2e6124d68261245a565b81815260059190911b82018301908381019087831115612b4d57600080fd5b928401925b82841015612780578351612b658161239b565b82529284019290840190612b52565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612b9e57612b9e612b74565b5060010190565b600060208284031215612bb757600080fd5b5051919050565b60006020808385031215612bd157600080fd5b82516001600160401b03811115612be757600080fd5b8301601f81018513612bf857600080fd5b8051612c066124d68261245a565b81815260059190911b82018301908381019087831115612c2557600080fd5b928401925b82841015612780578351612c3d8161239b565b82529284019290840190612c2a565b80518015158114612ac457600080fd5b600060208284031215612c6e57600080fd5b6101d682612c4c565b60008060408385031215612c8a57600080fd5b612c9383612c4c565b9150602083015190509250929050565b60006020808385031215612cb657600080fd5b82516001600160401b0380821115612ccd57600080fd5b818501915085601f830112612ce157600080fd5b8151612cef6124d68261245a565b81815260059190911b83018401908481019088831115612d0e57600080fd5b8585015b83811015612e2557805185811115612d2957600080fd5b8601601f1960a0828d0382011215612d415760008081fd5b612d49612402565b8983015188811115612d5b5760008081fd5b8301603f81018e13612d6d5760008081fd5b8a81015189811115612d8157612d816123ec565b612d918c85601f8401160161242a565b935080845260408f81838501011115612daa5760008081fd5b60005b82811015612dc8578381018201518682018f01528d01612dad565b82811115612dd95760008e84880101525b50848452612de8818701612ab9565b8d85015260609450612dfb858701612ab9565b9084015250506080838101519282019290925260a090920151908201528352918601918601612d12565b5098975050505050505050565b600080600060608486031215612e4757600080fd5b8351925060208401519150604084015190509250925092565b600082821015612e7257612e72612b74565b500390565b6000816000190483118215151615612e9157612e91612b74565b500290565b600082612eb357634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205a7f63852d605bcf30f3ddf068bcb0cc276e350ef46cef53ac9a10bacc0b0c7764736f6c634300080b0033",
  "implementation": "0x7CfB8Aef9bac7358186dC78408A5E81Cb3Ec9bDe",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "kind": "dev",
    "methods": {
      "getMaxBorrow(address,address)": {
        "params": {
          "account": "The account to determine liquidity for.",
          "cTokenModify": "The market to hypothetically borrow in."
        },
        "returns": {
          "_0": "Maximum borrow amount."
        }
      },
      "getMaxRedeem(address,address)": {
        "params": {
          "account": "The account to determine liquidity for.",
          "cTokenModify": "The market to hypothetically redeem in."
        },
        "returns": {
          "_0": "Maximum redeem amount."
        }
      },
      "getPoolOwnership(address)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state."
      },
      "getRewardSpeedsByPool(address)": {
        "params": {
          "comptroller": "The Fuse pool Comptroller to check."
        }
      },
      "getRewardSpeedsByPools(address[])": {
        "params": {
          "comptrollers": "The Fuse pool Comptrollers to check."
        }
      },
      "getRewardsDistributorsBySupplier(address)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive."
      },
      "getUnclaimedRewardsByDistributors(address,address[])": {
        "params": {
          "distributors": "The `RewardsDistributor` contracts to check.",
          "holder": "The address to check."
        },
        "returns": {
          "_0": "For each of `distributors`: total quantity of unclaimed rewards, array of cTokens, array of unaccrued (unclaimed) supply-side and borrow-side rewards per cToken, and quantity of funds available in the distributor."
        }
      }
    },
    "title": "FusePoolLensSecondary",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "directory()": {
        "notice": "`FusePoolDirectory` contract object."
      },
      "getMaxBorrow(address,address)": {
        "notice": "Determine the maximum borrow amount of a cToken."
      },
      "getMaxRedeem(address,address)": {
        "notice": "Determine the maximum redeem amount of a cToken."
      },
      "getPoolOwnership(address)": {
        "notice": "Returns the admin, admin rights, Fuse admin (constant), Fuse admin rights, and an array of cTokens with differing properties."
      },
      "getRewardSpeedsByPool(address)": {
        "notice": "Returns an array of all markets, an array of all `RewardsDistributor` contracts, an array of reward token addresses for each `RewardsDistributor`, an array of supply speeds for each distributor for each, and their borrow speeds."
      },
      "getRewardSpeedsByPools(address[])": {
        "notice": "For each `Comptroller`, returns an array of all markets, an array of all `RewardsDistributor` contracts, an array of reward token addresses for each `RewardsDistributor`, an array of supply speeds for each distributor for each, and their borrow speeds."
      },
      "getRewardsDistributorsBySupplier(address)": {
        "notice": "Returns arrays of indexes, `Comptroller` proxy contracts, and `RewardsDistributor` contracts for Fuse pools supplied to by `account`."
      },
      "getUnclaimedRewardsByDistributors(address,address[])": {
        "notice": "Returns all unclaimed rewards accrued by the `holder` on `distributors`."
      },
      "initialize(address)": {
        "notice": "Constructor to set the `FusePoolDirectory` contract object."
      }
    },
    "notice": "FusePoolLensSecondary returns data on Fuse interest rate pools in mass for viewing by dApps, bots, etc.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 210,
        "contract": "contracts/FusePoolLensSecondary.sol:FusePoolLensSecondary",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/FusePoolLensSecondary.sol:FusePoolLensSecondary",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5926,
        "contract": "contracts/FusePoolLensSecondary.sol:FusePoolLensSecondary",
        "label": "directory",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(FusePoolDirectory)3528"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FusePoolDirectory)3528": {
        "encoding": "inplace",
        "label": "contract FusePoolDirectory",
        "numberOfBytes": "20"
      }
    }
  }
}