{
  "address": "0xB6165FE14249B035526ae60248cB42f81Fc171b4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [],
      "name": "BTC_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V2_ROUTER_02",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V2_ROUTER_02_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "W_NATIVE",
      "outputs": [
        {
          "internalType": "contract IW_NATIVE",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "W_NATIVE_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wtoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_btcToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_uniswapPairInitHashCode",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "pancakeCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "underlyingCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingCollateralSeized",
          "type": "uint256"
        },
        {
          "internalType": "contract IRedemptionStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "redeemCustomCollateral",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "contract ICEther",
          "name": "cEther",
          "type": "address"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20Collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minOutputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeSeizedTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        }
      ],
      "name": "safeLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20",
          "type": "address"
        },
        {
          "internalType": "contract ICToken",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minOutputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeSeizedTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        }
      ],
      "name": "safeLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract ICEther",
          "name": "cEther",
          "type": "address"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20Collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minProfitAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeProfitTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2RouterForCollateral",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "ethToCoinbase",
          "type": "uint256"
        }
      ],
      "name": "safeLiquidateToEthWithFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20",
          "type": "address"
        },
        {
          "internalType": "contract ICToken",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minProfitAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeProfitTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2RouterForBorrow",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2RouterForCollateral",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "ethToCoinbase",
          "type": "uint256"
        }
      ],
      "name": "safeLiquidateToTokensWithFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV2Call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialLogic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    }
  ],
  "transactionHash": "0x92e0a53feca64383d55d067a618f7d5168bb736ba20c4b3465f66f49d2957c6c",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 6,
    "gasUsed": "4671929",
    "logsBloom": "0x
    "blockHash": "0x25b94a344aa54b2c5795c7b8c50ecb636190758d1ba7d44ea790272266e18c02",
    "transactionHash": "0x92e0a53feca64383d55d067a618f7d5168bb736ba20c4b3465f66f49d2957c6c",
    "logs": [],
    "blockNumber": 17416677,
    "cumulativeGasUsed": "6500230",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "614790565b8c7986374ea2a0c06a77bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BTC_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER_02\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER_02_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"W_NATIVE\",\"outputs\":[{\"internalType\":\"contract IW_NATIVE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"W_NATIVE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btcToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_uniswapPairInitHashCode\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"underlyingCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingCollateralSeized\",\"type\":\"uint256\"},{\"internalType\":\"contract IRedemptionStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"redeemCustomCollateral\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ICEther\",\"name\":\"cEther\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20Collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeSeizedTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"}],\"name\":\"safeLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeSeizedTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"}],\"name\":\"safeLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ICEther\",\"name\":\"cEther\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20Collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minProfitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeProfitTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2RouterForCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"ethToCoinbase\",\"type\":\"uint256\"}],\"name\":\"safeLiquidateToEthWithFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minProfitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeProfitTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2RouterForBorrow\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2RouterForCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"ethToCoinbase\",\"type\":\"uint256\"}],\"name\":\"safeLiquidateToTokensWithFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"details\":\"Do not transfer NATIVE or tokens directly to this address. Only send NATIVE here when using a method, and only approve tokens for transfer to here when using a method. Direct NATIVE transfers will be rejected and direct token transfers will be lost.\",\"kind\":\"dev\",\"methods\":{\"redeemCustomCollateral(address,uint256,address,bytes)\":{\"details\":\"Redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap). Public visibility because we have to call this function externally if called from a payable FuseSafeLiquidator function (for some reason delegatecall fails when called with msg.value > 0).\"},\"safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20Collateral\":\"The cErc20 collateral contract to be liquidated.\",\"cEther\":\"The borrowed cEther contract to repay.\",\"exchangeSeizedTo\":\"If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\",\"minOutputAmount\":\"The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2Router\":\"The UniswapV2Router to use to convert the seized underlying collateral.\"}},\"safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20\":\"The borrowed cErc20 to repay.\",\"cTokenCollateral\":\"The cToken collateral to be liquidated.\",\"exchangeSeizedTo\":\"If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\",\"minOutputAmount\":\"The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"repayAmount\":\"The amount to repay to liquidate the unhealthy loan.\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2Router\":\"The UniswapV2Router to use to convert the seized underlying collateral.\"}},\"safeLiquidateToEthWithFlashLoan(address,uint256,address,address,uint256,address,address,address[],bytes[],uint256)\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20Collateral\":\"The CErc20 collateral contract to be liquidated.\",\"cEther\":\"The borrowed CEther contract to repay.\",\"exchangeProfitTo\":\"If set to an address other than `cErc20Collateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\",\"minProfitAmount\":\"The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"repayAmount\":\"The NATIVE amount to repay to liquidate the unhealthy loan.\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2RouterForCollateral\":\"The UniswapV2Router to use to convert the underlying collateral to NATIVE.\"}},\"safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20\":\"The borrowed CErc20 contract to repay.\",\"cTokenCollateral\":\"The cToken collateral contract to be liquidated.\",\"exchangeProfitTo\":\"If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\",\"minProfitAmount\":\"The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"repayAmount\":\"The amount to repay to liquidate the unhealthy loan.\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2RouterForBorrow\":\"The UniswapV2Router to use to convert the NATIVE to the underlying borrow (and flashloan the underlying borrow for NATIVE).\",\"uniswapV2RouterForCollateral\":\"The UniswapV2Router to use to convert the underlying collateral to NATIVE.\"}},\"uniswapV2Call(address,uint256,uint256,bytes)\":{\"details\":\"Callback function for Uniswap flashloans.\"}},\"stateVariables\":{\"BTC_TOKEN\":{\"details\":\"Wrapped BTC token to use for flash loans\"},\"PAIR_INIT_HASH_CODE\":{\"details\":\"Wrapped BTC token to use for flash loans\"},\"STABLE_TOKEN\":{\"details\":\"Stable token to use for flash loans\"},\"UNISWAP_V2_ROUTER_02\":{\"details\":\"UniswapV2Router02 contract object.\"},\"UNISWAP_V2_ROUTER_02_ADDRESS\":{\"details\":\"UniswapV2Router02 contract address.\"},\"W_NATIVE\":{\"details\":\"W_NATIVE contract object.\"},\"W_NATIVE_ADDRESS\":{\"details\":\"W_NATIVE contract address.\"},\"_liquidatorProfitExchangeSource\":{\"details\":\"Cached liquidator profit exchange source. ERC20 token address or the zero address for NATIVE. For use in `safeLiquidateToTokensWithFlashLoan`/`safeLiquidateToEthWithFlashLoan` after it is set by `postFlashLoanTokens`/`postFlashLoanWeth`.\"}},\"title\":\"FuseSafeLiquidator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])\":{\"notice\":\"Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\"},\"safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])\":{\"notice\":\"Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\"},\"safeLiquidateToEthWithFlashLoan(address,uint256,address,address,uint256,address,address,address[],bytes[],uint256)\":{\"notice\":\"Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in NATIVE profit is seized.\"},\"safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)\":{\"notice\":\"Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in NATIVE profit is seized.\"}},\"notice\":\"FuseSafeLiquidator safely liquidates unhealthy borrowers (with flashloan support).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FuseSafeLiquidator.sol\":\"FuseSafeLiquidator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/FuseSafeLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./liquidators/IRedemptionStrategy.sol\\\";\\n\\nimport \\\"./external/compound/ICToken.sol\\\";\\nimport \\\"./external/compound/ICErc20.sol\\\";\\nimport \\\"./external/compound/ICEther.sol\\\";\\n\\nimport \\\"./external/aave/IW_NATIVE.sol\\\";\\n\\nimport \\\"./external/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV2Callee.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"./external/uniswap/UniswapV2Library.sol\\\";\\nimport \\\"./external/pcs/PancakeLibrary.sol\\\";\\nimport \\\"./external/pcs/IPancakePair.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title FuseSafeLiquidator\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice FuseSafeLiquidator safely liquidates unhealthy borrowers (with flashloan support).\\n * @dev Do not transfer NATIVE or tokens directly to this address. Only send NATIVE here when using a method, and only approve tokens for transfer to here when using a method. Direct NATIVE transfers will be rejected and direct token transfers will be lost.\\n */\\ncontract FuseSafeLiquidator is Initializable, IUniswapV2Callee {\\n  using AddressUpgradeable for address payable;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /**\\n   * @dev W_NATIVE contract address.\\n   */\\n  address public W_NATIVE_ADDRESS;\\n\\n  /**\\n   * @dev W_NATIVE contract object.\\n   */\\n  IW_NATIVE public W_NATIVE;\\n\\n  /**\\n   * @dev UniswapV2Router02 contract address.\\n   */\\n  address public UNISWAP_V2_ROUTER_02_ADDRESS;\\n\\n  /**\\n   * @dev Stable token to use for flash loans\\n   */\\n  address public STABLE_TOKEN;\\n\\n  /**\\n   * @dev Wrapped BTC token to use for flash loans\\n   */\\n  address public BTC_TOKEN;\\n\\n  /**\\n   * @dev Wrapped BTC token to use for flash loans\\n   */\\n  bytes PAIR_INIT_HASH_CODE;\\n\\n  /**\\n   * @dev UniswapV2Router02 contract object.\\n   */\\n  IUniswapV2Router02 public UNISWAP_V2_ROUTER_02;\\n\\n  /**\\n   * @dev Cached liquidator profit exchange source.\\n   * ERC20 token address or the zero address for NATIVE.\\n   * For use in `safeLiquidateToTokensWithFlashLoan`/`safeLiquidateToEthWithFlashLoan` after it is set by `postFlashLoanTokens`/`postFlashLoanWeth`.\\n   */\\n  address private _liquidatorProfitExchangeSource;\\n\\n  function initialize(\\n    address _wtoken,\\n    address _uniswapV2router,\\n    address _stableToken,\\n    address _btcToken,\\n    bytes memory _uniswapPairInitHashCode\\n  ) external initializer {\\n    require(_uniswapV2router != address(0), \\\"UniswapV2Factory not defined.\\\");\\n    W_NATIVE_ADDRESS = _wtoken;\\n    UNISWAP_V2_ROUTER_02_ADDRESS = _uniswapV2router;\\n    STABLE_TOKEN = _stableToken;\\n    BTC_TOKEN = _btcToken;\\n    W_NATIVE = IW_NATIVE(W_NATIVE_ADDRESS);\\n    UNISWAP_V2_ROUTER_02 = IUniswapV2Router02(UNISWAP_V2_ROUTER_02_ADDRESS);\\n    PAIR_INIT_HASH_CODE = _uniswapPairInitHashCode;\\n  }\\n\\n  /**\\n   * @dev Internal function to approve unlimited tokens of `erc20Contract` to `to`.\\n   */\\n  function safeApprove(\\n    IERC20Upgradeable token,\\n    address to,\\n    uint256 minAmount\\n  ) private {\\n    uint256 allowance = token.allowance(address(this), to);\\n\\n    if (allowance < minAmount) {\\n      if (allowance > 0) token.safeApprove(to, 0);\\n      token.safeApprove(to, type(uint256).max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to exchange the entire balance of `from` to at least `minOutputAmount` of `to`.\\n   * @param from The input ERC20 token address (or the zero address if NATIVE) to exchange from.\\n   * @param to The output ERC20 token address (or the zero address if NATIVE) to exchange to.\\n   * @param minOutputAmount The minimum output amount of `to` necessary to complete the exchange without reversion.\\n   * @param uniswapV2Router The UniswapV2Router02 to use.\\n   */\\n  function exchangeAllEthOrTokens(\\n    address from,\\n    address to,\\n    uint256 minOutputAmount,\\n    IUniswapV2Router02 uniswapV2Router\\n  ) private {\\n    if (to == from) return;\\n\\n    // From NATIVE, W_NATIVE, or something else?\\n    if (from == address(0)) {\\n      if (to == W_NATIVE_ADDRESS) {\\n        // Deposit all NATIVE to W_NATIVE\\n        W_NATIVE.deposit{ value: address(this).balance }();\\n      } else {\\n        // Exchange from NATIVE to tokens\\n        uniswapV2Router.swapExactETHForTokens{ value: address(this).balance }(\\n          minOutputAmount,\\n          array(W_NATIVE_ADDRESS, to),\\n          address(this),\\n          block.timestamp\\n        );\\n      }\\n    } else if (from == W_NATIVE_ADDRESS && to == address(0)) {\\n      // Withdraw all W_NATIVE to NATIVE\\n      W_NATIVE.withdraw(IERC20Upgradeable(W_NATIVE_ADDRESS).balanceOf(address(this)));\\n    } else {\\n      // Approve input tokens\\n      IERC20Upgradeable fromToken = IERC20Upgradeable(from);\\n      uint256 inputBalance = fromToken.balanceOf(address(this));\\n      safeApprove(fromToken, address(uniswapV2Router), inputBalance);\\n\\n      // Exchange from tokens to NATIVE or tokens\\n      if (to == address(0))\\n        uniswapV2Router.swapExactTokensForETH(\\n          inputBalance,\\n          minOutputAmount,\\n          array(from, W_NATIVE_ADDRESS),\\n          address(this),\\n          block.timestamp\\n        );\\n      else\\n        uniswapV2Router.swapExactTokensForTokens(\\n          inputBalance,\\n          minOutputAmount,\\n          from == W_NATIVE_ADDRESS || to == W_NATIVE_ADDRESS ? array(from, to) : array(from, W_NATIVE_ADDRESS, to),\\n          address(this),\\n          block.timestamp\\n        ); // Put W_NATIVE in the middle of the path if not already a part of the path\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to exchange the entire balance of `from` to at least `minOutputAmount` of `to`.\\n   * @param from The input ERC20 token address (or the zero address if NATIVE) to exchange from.\\n   * @param outputAmount The output amount of NATIVE.\\n   * @param uniswapV2Router The UniswapV2Router02 to use.\\n   */\\n  function exchangeToExactEth(\\n    address from,\\n    uint256 outputAmount,\\n    IUniswapV2Router02 uniswapV2Router\\n  ) private {\\n    if (from == address(0)) return;\\n\\n    // From W_NATIVE something else?\\n    if (from == W_NATIVE_ADDRESS) {\\n      // Withdraw W_NATIVE to NATIVE\\n      W_NATIVE.withdraw(outputAmount);\\n    } else {\\n      // Approve input tokens\\n      IERC20Upgradeable fromToken = IERC20Upgradeable(from);\\n      uint256 inputBalance = fromToken.balanceOf(address(this));\\n      safeApprove(fromToken, address(uniswapV2Router), inputBalance);\\n\\n      // Exchange from tokens to NATIVE\\n      uniswapV2Router.swapTokensForExactETH(\\n        outputAmount,\\n        inputBalance,\\n        array(from, W_NATIVE_ADDRESS),\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\\n   * @param borrower The borrower's Ethereum address.\\n   * @param repayAmount The amount to repay to liquidate the unhealthy loan.\\n   * @param cErc20 The borrowed cErc20 to repay.\\n   * @param cTokenCollateral The cToken collateral to be liquidated.\\n   * @param minOutputAmount The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\\n   * @param exchangeSeizedTo If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\\n   * @param uniswapV2Router The UniswapV2Router to use to convert the seized underlying collateral.\\n   * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n   */\\n  function safeLiquidate(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICToken cTokenCollateral,\\n    uint256 minOutputAmount,\\n    address exchangeSeizedTo,\\n    IUniswapV2Router02 uniswapV2Router,\\n    IRedemptionStrategy[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) external returns (uint256) {\\n    // Transfer tokens in, approve to cErc20, and liquidate borrow\\n    require(repayAmount > 0, \\\"Repay amount (transaction value) must be greater than 0.\\\");\\n    IERC20Upgradeable underlying = IERC20Upgradeable(cErc20.underlying());\\n    underlying.safeTransferFrom(msg.sender, address(this), repayAmount);\\n    safeApprove(underlying, address(cErc20), repayAmount);\\n    require(cErc20.liquidateBorrow(borrower, repayAmount, cTokenCollateral) == 0, \\\"Liquidation failed.\\\");\\n\\n    // Redeem seized cToken collateral if necessary\\n    if (exchangeSeizedTo != address(cTokenCollateral)) {\\n      uint256 seizedCTokenAmount = cTokenCollateral.balanceOf(address(this));\\n\\n      if (seizedCTokenAmount > 0) {\\n        uint256 redeemResult = cTokenCollateral.redeem(seizedCTokenAmount);\\n        require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n        // If cTokenCollateral is CEther\\n        if (cTokenCollateral.isCEther()) {\\n          // Exchange redeemed NATIVE collateral if necessary\\n          exchangeAllEthOrTokens(address(0), exchangeSeizedTo, minOutputAmount, uniswapV2Router);\\n        } else {\\n          // Redeem custom collateral if liquidation strategy is set\\n          IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(ICErc20(address(cTokenCollateral)).underlying());\\n\\n          if (redemptionStrategies.length > 0) {\\n            require(\\n              redemptionStrategies.length == strategyData.length,\\n              \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\"\\n            );\\n            uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n            for (uint256 i = 0; i < redemptionStrategies.length; i++)\\n              (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(\\n                underlyingCollateral,\\n                underlyingCollateralSeized,\\n                redemptionStrategies[i],\\n                strategyData[i]\\n              );\\n          }\\n\\n          // Exchange redeemed token collateral if necessary\\n          exchangeAllEthOrTokens(address(underlyingCollateral), exchangeSeizedTo, minOutputAmount, uniswapV2Router);\\n        }\\n      }\\n    }\\n\\n    // Transfer seized amount to sender\\n    return transferSeizedFunds(exchangeSeizedTo, minOutputAmount);\\n  }\\n\\n  /**\\n   * @notice Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\\n   * @param borrower The borrower's Ethereum address.\\n   * @param cEther The borrowed cEther contract to repay.\\n   * @param cErc20Collateral The cErc20 collateral contract to be liquidated.\\n   * @param minOutputAmount The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\\n   * @param exchangeSeizedTo If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\\n   * @param uniswapV2Router The UniswapV2Router to use to convert the seized underlying collateral.\\n   * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n   */\\n  function safeLiquidate(\\n    address borrower,\\n    ICEther cEther,\\n    ICErc20 cErc20Collateral,\\n    uint256 minOutputAmount,\\n    address exchangeSeizedTo,\\n    IUniswapV2Router02 uniswapV2Router,\\n    IRedemptionStrategy[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) external payable returns (uint256) {\\n    // Liquidate NATIVE borrow\\n    require(msg.value > 0, \\\"Repay amount (transaction value) must be greater than 0.\\\");\\n    cEther.liquidateBorrow{ value: msg.value }(borrower, ICToken(cErc20Collateral));\\n\\n    // Redeem seized cToken collateral if necessary\\n    if (exchangeSeizedTo != address(cErc20Collateral)) {\\n      uint256 seizedCTokenAmount = cErc20Collateral.balanceOf(address(this));\\n\\n      if (seizedCTokenAmount > 0) {\\n        uint256 redeemResult = cErc20Collateral.redeem(seizedCTokenAmount);\\n        require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n        // Redeem custom collateral if liquidation strategy is set\\n        IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(cErc20Collateral.underlying());\\n\\n        if (redemptionStrategies.length > 0) {\\n          require(\\n            redemptionStrategies.length == strategyData.length,\\n            \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\"\\n          );\\n          uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n          for (uint256 i = 0; i < redemptionStrategies.length; i++)\\n            (underlyingCollateral, underlyingCollateralSeized) = this.redeemCustomCollateral(\\n              underlyingCollateral,\\n              underlyingCollateralSeized,\\n              redemptionStrategies[i],\\n              strategyData[i]\\n            ); // redeemCustomCollateral called externally because this safeLiquidate function is payable (for some reason delegatecall fails when called with msg.value > 0)\\n        }\\n\\n        // Exchange redeemed collateral if necessary\\n        exchangeAllEthOrTokens(address(underlyingCollateral), exchangeSeizedTo, minOutputAmount, uniswapV2Router);\\n      }\\n    }\\n\\n    // Transfer seized amount to sender\\n    return transferSeizedFunds(exchangeSeizedTo, minOutputAmount);\\n  }\\n\\n  /**\\n   * @dev Transfers seized funds to the sender.\\n   * @param erc20Contract The address of the token to transfer.\\n   * @param minOutputAmount The minimum amount to transfer.\\n   */\\n  function transferSeizedFunds(address erc20Contract, uint256 minOutputAmount) internal returns (uint256) {\\n    uint256 seizedOutputAmount;\\n\\n    if (erc20Contract == address(0)) {\\n      seizedOutputAmount = address(this).balance;\\n      require(seizedOutputAmount >= minOutputAmount, \\\"Minimum NATIVE output amount not satisfied.\\\");\\n\\n      if (seizedOutputAmount > 0) {\\n        (bool success, ) = msg.sender.call{ value: seizedOutputAmount }(\\\"\\\");\\n        require(success, \\\"Failed to transfer output NATIVE to msg.sender.\\\");\\n      }\\n    } else {\\n      IERC20Upgradeable token = IERC20Upgradeable(erc20Contract);\\n      seizedOutputAmount = token.balanceOf(address(this));\\n      require(seizedOutputAmount >= minOutputAmount, \\\"Minimum token output amount not satified.\\\");\\n      if (seizedOutputAmount > 0) token.safeTransfer(msg.sender, seizedOutputAmount);\\n    }\\n\\n    return seizedOutputAmount;\\n  }\\n\\n  /**\\n   * @notice Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in NATIVE profit is seized.\\n   * @param borrower The borrower's Ethereum address.\\n   * @param repayAmount The amount to repay to liquidate the unhealthy loan.\\n   * @param cErc20 The borrowed CErc20 contract to repay.\\n   * @param cTokenCollateral The cToken collateral contract to be liquidated.\\n   * @param minProfitAmount The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\\n   * @param exchangeProfitTo If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\\n   * @param uniswapV2RouterForBorrow The UniswapV2Router to use to convert the NATIVE to the underlying borrow (and flashloan the underlying borrow for NATIVE).\\n   * @param uniswapV2RouterForCollateral The UniswapV2Router to use to convert the underlying collateral to NATIVE.\\n   * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n   */\\n  function safeLiquidateToTokensWithFlashLoan(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICToken cTokenCollateral,\\n    uint256 minProfitAmount,\\n    address exchangeProfitTo,\\n    IUniswapV2Router02 uniswapV2RouterForBorrow,\\n    IUniswapV2Router02 uniswapV2RouterForCollateral,\\n    IRedemptionStrategy[] memory redemptionStrategies,\\n    bytes[] memory strategyData,\\n    uint256 ethToCoinbase\\n  ) external returns (uint256) {\\n    // Input validation\\n    require(repayAmount > 0, \\\"Repay amount must be greater than 0.\\\");\\n\\n    // Flashloan via Uniswap (scoping `underlyingBorrow` variable to avoid \\\"stack too deep\\\" compiler error)\\n    IUniswapV2Pair pair;\\n    bool token0IsUnderlyingBorrow;\\n    {\\n      address underlyingBorrow = cErc20.underlying();\\n      pair = IUniswapV2Pair(\\n        IUniswapV2Factory(uniswapV2RouterForBorrow.factory()).getPair(underlyingBorrow, W_NATIVE_ADDRESS)\\n      );\\n      token0IsUnderlyingBorrow = pair.token0() == underlyingBorrow;\\n    }\\n    pair.swap(\\n      token0IsUnderlyingBorrow ? repayAmount : 0,\\n      !token0IsUnderlyingBorrow ? repayAmount : 0,\\n      address(this),\\n      msg.data\\n    );\\n\\n    // Exchange profit, send NATIVE to coinbase if necessary, and transfer seized funds\\n    return distributeProfit(exchangeProfitTo, minProfitAmount, ethToCoinbase);\\n  }\\n\\n  /**\\n   * @notice Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in NATIVE profit is seized.\\n   * @param borrower The borrower's Ethereum address.\\n   * @param repayAmount The NATIVE amount to repay to liquidate the unhealthy loan.\\n   * @param cEther The borrowed CEther contract to repay.\\n   * @param cErc20Collateral The CErc20 collateral contract to be liquidated.\\n   * @param minProfitAmount The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\\n   * @param exchangeProfitTo If set to an address other than `cErc20Collateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).\\n   * @param uniswapV2RouterForCollateral The UniswapV2Router to use to convert the underlying collateral to NATIVE.\\n   * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n   */\\n//\\n//  function safeLiquidateToEthWithFlashLoan(\\n//    address borrower,\\n//    uint256 repayAmount,\\n//    CEther cEther,\\n//    CErc20 cErc20Collateral,\\n//    uint256 minProfitAmount,\\n//    address exchangeProfitTo,\\n//    IUniswapV2Router02 uniswapV2RouterForCollateral,\\n//    IRedemptionStrategy[] memory redemptionStrategies,\\n//    bytes[] memory strategyData,\\n//    uint256 ethToCoinbase\\n//  ) external returns (uint256) {\\n//\\n//    // Input validation\\n//    require(repayAmount > 0, \\\"Repay amount must be greater than 0.\\\");\\n//\\n//    // Flashloan via Uniswap\\n//    IUniswapV2Pair pair = IUniswapV2Pair(\\n//      UniswapV2Library.pairFor(\\n//        UNISWAP_V2_ROUTER_02.factory(),\\n//          address(uniswapV2RouterForCollateral) == UNISWAP_V2_ROUTER_02_ADDRESS && cErc20Collateral.underlying() == 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 ? 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 : 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,\\n//          WETH_ADDRESS)\\n//    ); // Use USDC unless collateral is USDC, in which case we use WBTC to avoid a reentrancy error when exchanging the collateral to repay the borrow\\n//    address token0 = pair.token0();\\n//    pair.swap(\\n//      token0 == WETH_ADDRESS ? repayAmount : 0,\\n//        token0 != WETH_ADDRESS ? repayAmount : 0,\\n//        address(this),\\n//        msg.data\\n//    );\\n//\\n//    // Exchange profit, send ETH to coinbase if necessary, and transfer seized funds\\n//    return distributeProfit(exchangeProfitTo, minProfitAmount, ethToCoinbase);\\n//  }\\n\\n  function safeLiquidateToEthWithFlashLoan(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICEther cEther,\\n    ICErc20 cErc20Collateral,\\n    uint256 minProfitAmount,\\n    address exchangeProfitTo,\\n    IUniswapV2Router02 uniswapV2RouterForCollateral,\\n    IRedemptionStrategy[] memory redemptionStrategies,\\n    bytes[] memory strategyData,\\n    uint256 ethToCoinbase\\n  ) external returns (uint256) {\\n    // Input validation\\n    require(repayAmount > 0, \\\"Repay amount must be greater than 0.\\\");\\n\\n    // Flashloan via Uniswap\\n    // Use STABLE_TOKEN unless collateral is STABLE_TOKEN, in which case we use WBTC to avoid a reentrancy error\\n    // when exchanging the collateral to repay the borrow\\n\\n    console.log(UNISWAP_V2_ROUTER_02_ADDRESS);\\n    console.log(cErc20Collateral.underlying());\\n    console.log(BTC_TOKEN);\\n    console.log(STABLE_TOKEN);\\n    console.log(UNISWAP_V2_ROUTER_02.factory());\\n\\n    IPancakePair pair = IPancakePair(\\n      PancakeLibrary.pairFor(\\n        UNISWAP_V2_ROUTER_02.factory(),\\n        address(uniswapV2RouterForCollateral) == UNISWAP_V2_ROUTER_02_ADDRESS &&\\n          cErc20Collateral.underlying() == STABLE_TOKEN\\n          ? BTC_TOKEN\\n          : STABLE_TOKEN,\\n        W_NATIVE_ADDRESS,\\n        PAIR_INIT_HASH_CODE\\n      )\\n    );\\n\\n\\n    console.log(address(pair));\\n    address token0 = pair.token0();\\n    console.log(token0);\\n\\n    pair.swap(\\n      token0 == W_NATIVE_ADDRESS ? repayAmount : 0,\\n        token0 != W_NATIVE_ADDRESS ? repayAmount : 0,\\n        address(this),\\n        msg.data\\n    );\\n\\n    // Exchange profit, send NATIVE to coinbase if necessary, and transfer seized funds\\n    return distributeProfit(exchangeProfitTo, minProfitAmount, ethToCoinbase);\\n  }\\n\\n  /**\\n   * Exchange profit, send NATIVE to coinbase if necessary, and transfer seized funds to sender.\\n   */\\n  function distributeProfit(\\n    address exchangeProfitTo,\\n    uint256 minProfitAmount,\\n    uint256 ethToCoinbase\\n  ) private returns (uint256) {\\n    if (exchangeProfitTo == address(0)) {\\n      // Exchange profit if necessary\\n      exchangeAllEthOrTokens(\\n        _liquidatorProfitExchangeSource,\\n        exchangeProfitTo,\\n        minProfitAmount + ethToCoinbase,\\n        UNISWAP_V2_ROUTER_02\\n      );\\n\\n      // Transfer NATIVE to block.coinbase if requested\\n      if (ethToCoinbase > 0) block.coinbase.call{ value: ethToCoinbase }(\\\"\\\");\\n\\n      // Transfer profit to msg.sender\\n      return transferSeizedFunds(exchangeProfitTo, minProfitAmount);\\n    } else {\\n      // Transfer NATIVE to block.coinbase if requested\\n      if (ethToCoinbase > 0) {\\n        exchangeToExactEth(_liquidatorProfitExchangeSource, ethToCoinbase, UNISWAP_V2_ROUTER_02);\\n        block.coinbase.call{ value: ethToCoinbase }(\\\"\\\");\\n      }\\n\\n      // Exchange profit if necessary\\n      exchangeAllEthOrTokens(\\n        _liquidatorProfitExchangeSource,\\n        exchangeProfitTo,\\n        minProfitAmount + ethToCoinbase,\\n        UNISWAP_V2_ROUTER_02\\n      );\\n\\n      // Transfer profit to msg.sender\\n      return transferSeizedFunds(exchangeProfitTo, minProfitAmount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Receives NATIVE from liquidations and flashloans.\\n   * Requires that `msg.sender` is W_NATIVE, a CToken, or a Uniswap V2 Router, or another contract.\\n   */\\n  receive() external payable {\\n    require(payable(msg.sender).isContract(), \\\"Sender is not a contract.\\\");\\n  }\\n\\n  /**\\n   * @dev Callback function for Uniswap flashloans.\\n   */\\n  function uniswapV2Call(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external override {\\n    address cToken = abi.decode(data[68:100], (address));\\n\\n    // Liquidate unhealthy borrow, exchange seized collateral, return flashloaned funds, and exchange profit\\n    if (ICToken(cToken).isCEther()) {\\n      // Decode params\\n      (\\n        address borrower,\\n        uint256 repayAmount,\\n        ,\\n        address cTokenCollateral,\\n        uint256 minProfitAmount,\\n        address exchangeProfitTo,\\n        IUniswapV2Router02 uniswapV2Router,\\n        address[] memory redemptionStrategies,\\n        bytes[] memory strategyData\\n      ) = abi.decode(\\n          data[4:],\\n          (address, uint256, address, address, uint256, address, IUniswapV2Router02, address[], bytes[])\\n        );\\n\\n      // Calculate flashloan return amount\\n      uint256 flashLoanReturnAmount = (repayAmount * 1000) / 997;\\n      if ((repayAmount * 1000) % 997 > 0) flashLoanReturnAmount++; // Round up if division resulted in a remainder\\n\\n      // Post W_NATIVE flashloan\\n      // Cache liquidation profit token (or the zero address for NATIVE) for use as source for exchange later\\n      _liquidatorProfitExchangeSource = postFlashLoanWeth(\\n        borrower,\\n        repayAmount,\\n        ICEther(cToken),\\n        ICErc20(cTokenCollateral),\\n        minProfitAmount,\\n        exchangeProfitTo,\\n        flashLoanReturnAmount,\\n        uniswapV2Router,\\n        redemptionStrategies,\\n        strategyData\\n      );\\n    } else {\\n      // Decode params\\n      (\\n        address borrower,\\n        uint256 repayAmount,\\n        ,\\n        address cTokenCollateral,\\n        uint256 minProfitAmount,\\n        address exchangeProfitTo,\\n        IUniswapV2Router02 uniswapV2RouterForBorrow,\\n        IUniswapV2Router02 uniswapV2RouterForCollateral,\\n        address[] memory redemptionStrategies,\\n        bytes[] memory strategyData\\n      ) = abi.decode(\\n          data[4:],\\n          (\\n            address,\\n            uint256,\\n            address,\\n            address,\\n            uint256,\\n            address,\\n            IUniswapV2Router02,\\n            IUniswapV2Router02,\\n            address[],\\n            bytes[]\\n          )\\n        );\\n\\n      // Calculate flashloan return amount\\n      uint256 flashLoanReturnAmount = (repayAmount * 1000) / 997;\\n      if ((repayAmount * 1000) % 997 > 0) flashLoanReturnAmount++; // Round up if division resulted in a remainder\\n\\n      // Post token flashloan\\n      // Cache liquidation profit token (or the zero address for NATIVE) for use as source for exchange later\\n      _liquidatorProfitExchangeSource = postFlashLoanTokens(\\n        borrower,\\n        repayAmount,\\n        ICErc20(cToken),\\n        ICToken(cTokenCollateral),\\n        minProfitAmount,\\n        exchangeProfitTo,\\n        flashLoanReturnAmount,\\n        uniswapV2RouterForBorrow,\\n        uniswapV2RouterForCollateral,\\n        redemptionStrategies,\\n        strategyData\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Fetches and sorts the reserves for a pair.\\n   * Original code from PancakeLibrary.\\n   */\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) private view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(tokenA, tokenB))\\n      .getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  /**\\n   * @dev Performs chained getAmountIn calculations on any number of pairs.\\n   * Original code from PancakeLibrary.\\n   */\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) private view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"PancakeLibrary: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n      amounts[i - 1] = PancakeLibrary.getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  /**\\n   * @dev Liquidate unhealthy NATIVE borrow, exchange seized collateral, return flashloaned funds, and exchange profit.\\n   */\\n  function postFlashLoanWeth(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICEther cEther,\\n    ICErc20 cErc20Collateral,\\n    uint256 minProfitAmount,\\n    address exchangeProfitTo,\\n    uint256 flashLoanReturnAmount,\\n    IUniswapV2Router02 uniswapV2Router,\\n    address[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) private returns (address) {\\n    // Unwrap W_NATIVE\\n    W_NATIVE.withdraw(repayAmount);\\n\\n    // Liquidate NATIVE borrow using flashloaned NATIVE\\n    cEther.liquidateBorrow{ value: repayAmount }(borrower, ICToken(cErc20Collateral));\\n\\n    // Redeem seized cTokens for underlying asset\\n    uint256 seizedCTokenAmount = cErc20Collateral.balanceOf(address(this));\\n    require(seizedCTokenAmount > 0, \\\"No cTokens seized.\\\");\\n    uint256 redeemResult = cErc20Collateral.redeem(seizedCTokenAmount);\\n    require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n    // Repay flashloan\\n    return\\n      repayWethFlashLoan(\\n        repayAmount,\\n        cErc20Collateral,\\n        exchangeProfitTo,\\n        flashLoanReturnAmount,\\n        uniswapV2Router,\\n        redemptionStrategies,\\n        strategyData\\n      );\\n  }\\n\\n  /**\\n   * @dev Repays W_NATIVE flashloans.\\n   */\\n  function repayWethFlashLoan(\\n    uint256 repayAmount,\\n    ICErc20 cErc20Collateral,\\n    address exchangeProfitTo,\\n    uint256 flashLoanReturnAmount,\\n    IUniswapV2Router02 uniswapV2Router,\\n    address[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) private returns (address) {\\n    // Check underlying collateral seized\\n    IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(cErc20Collateral.underlying());\\n    uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n\\n    // Redeem custom collateral if liquidation strategy is set\\n    if (redemptionStrategies.length > 0) {\\n      require(\\n        redemptionStrategies.length == strategyData.length,\\n        \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\"\\n      );\\n      for (uint256 i = 0; i < redemptionStrategies.length; i++)\\n        (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(\\n          underlyingCollateral,\\n          underlyingCollateralSeized,\\n          IRedemptionStrategy(redemptionStrategies[i]),\\n          strategyData[i]\\n        );\\n    }\\n\\n    // Check side of the flashloan to repay: if input token (underlying collateral) is part of flashloan, repay it (to avoid reentracy error); otherwise, convert to W_NATIVE and repay W_NATIVE\\n    if (\\n      address(uniswapV2Router) == UNISWAP_V2_ROUTER_02_ADDRESS &&\\n      address(underlyingCollateral) ==\\n      (\\n        cErc20Collateral.underlying() == 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n          ? 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\\n          : 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n      )\\n    ) {\\n      // Get tokens required to repay flashloan and repay flashloan in non-W_NATIVE tokens\\n      uint256 tokensRequired = getAmountsIn(\\n        uniswapV2Router.factory(),\\n        repayAmount,\\n        array(address(underlyingCollateral), W_NATIVE_ADDRESS)\\n      )[0];\\n      require(tokensRequired <= underlyingCollateralSeized, \\\"Flashloan return amount greater than seized collateral.\\\");\\n      require(\\n        underlyingCollateral.transfer(msg.sender, tokensRequired),\\n        \\\"Failed to transfer non-W_NATIVE tokens back to flashlender.\\\"\\n      );\\n    } else {\\n      // If underlying collateral is not already W_NATIVE, convert it to W_NATIVE\\n      if (address(underlyingCollateral) != W_NATIVE_ADDRESS) {\\n        // If underlying collateral is NATIVE, deposit to W_NATIVE; if token, exchange to W_NATIVE\\n        if (address(underlyingCollateral) == address(0)) {\\n          // Deposit NATIVE to W_NATIVE to repay flashloan\\n          W_NATIVE.deposit{ value: flashLoanReturnAmount }();\\n        } else {\\n          // Approve to Uniswap router\\n          safeApprove(underlyingCollateral, address(uniswapV2Router), underlyingCollateralSeized);\\n\\n          // Swap collateral tokens for W_NATIVE via Uniswap router\\n          if (exchangeProfitTo == address(underlyingCollateral))\\n            uniswapV2Router.swapTokensForExactTokens(\\n              flashLoanReturnAmount,\\n              underlyingCollateralSeized,\\n              array(address(underlyingCollateral), W_NATIVE_ADDRESS),\\n              address(this),\\n              block.timestamp\\n            );\\n          else {\\n            uniswapV2Router.swapExactTokensForTokens(\\n              underlyingCollateralSeized,\\n              flashLoanReturnAmount,\\n              array(address(underlyingCollateral), W_NATIVE_ADDRESS),\\n              address(this),\\n              block.timestamp\\n            );\\n            underlyingCollateral = IERC20Upgradeable(W_NATIVE_ADDRESS);\\n          }\\n        }\\n      }\\n\\n      // Repay flashloan in W_NATIVE\\n      require(\\n        flashLoanReturnAmount <= IERC20Upgradeable(W_NATIVE_ADDRESS).balanceOf(address(this)),\\n        \\\"Flashloan return amount greater than W_NATIVE exchanged from seized collateral.\\\"\\n      );\\n      require(W_NATIVE.transfer(msg.sender, flashLoanReturnAmount), \\\"Failed to transfer W_NATIVE back to flashlender.\\\");\\n    }\\n\\n    // Return the profited token\\n    return address(underlyingCollateral);\\n  }\\n\\n  /**\\n   * @dev Liquidate unhealthy token borrow, exchange seized collateral, return flashloaned funds, and exchange profit.\\n   */\\n  function postFlashLoanTokens(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICToken cTokenCollateral,\\n    uint256 minProfitAmount,\\n    address exchangeProfitTo,\\n    uint256 flashLoanReturnAmount,\\n    IUniswapV2Router02 uniswapV2RouterForBorrow,\\n    IUniswapV2Router02 uniswapV2RouterForCollateral,\\n    address[] memory redemptionStrategies,\\n    bytes[] memory strategyData\\n  ) private returns (address) {\\n    // Approve repayAmount to cErc20\\n    IERC20Upgradeable underlyingBorrow = IERC20Upgradeable(cErc20.underlying());\\n    safeApprove(underlyingBorrow, address(cErc20), repayAmount);\\n\\n    // Liquidate NATIVE borrow using flashloaned NATIVE\\n    require(cErc20.liquidateBorrow(borrower, repayAmount, cTokenCollateral) == 0, \\\"Liquidation failed.\\\");\\n\\n    // Redeem seized cTokens for underlying asset\\n    uint256 seizedCTokenAmount = cTokenCollateral.balanceOf(address(this));\\n    require(seizedCTokenAmount > 0, \\\"No cTokens seized.\\\");\\n    uint256 redeemResult = cTokenCollateral.redeem(seizedCTokenAmount);\\n    require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n    // Repay flashloan\\n    return\\n      repayTokenFlashLoan(\\n        repayAmount,\\n        cTokenCollateral,\\n        exchangeProfitTo,\\n        flashLoanReturnAmount,\\n        uniswapV2RouterForBorrow,\\n        uniswapV2RouterForCollateral,\\n        redemptionStrategies,\\n        strategyData,\\n        underlyingBorrow\\n      );\\n  }\\n\\n  /**\\n   * @dev Repays token flashloans.\\n   */\\n  function repayTokenFlashLoan(\\n    uint256 repayAmount,\\n    ICToken cTokenCollateral,\\n    address exchangeProfitTo,\\n    uint256 flashLoanReturnAmount,\\n    IUniswapV2Router02 uniswapV2RouterForBorrow,\\n    IUniswapV2Router02 uniswapV2RouterForCollateral,\\n    address[] memory redemptionStrategies,\\n    bytes[] memory strategyData,\\n    IERC20Upgradeable underlyingBorrow\\n  ) private returns (address) {\\n    // Swap cTokenCollateral for cErc20 via Uniswap\\n    if (cTokenCollateral.isCEther()) {\\n      // Get flashloan repay amount in terms of W_NATIVE collateral via Uniswap router\\n      // uniswapV2RouterForCollateral is ignored because it should be the same as uniswapV2RouterForBorrow\\n      uint256 underlyingCollateralSeized = address(this).balance;\\n      uint256 wethRequired = getAmountsIn(\\n        uniswapV2RouterForBorrow.factory(),\\n        repayAmount,\\n        array(W_NATIVE_ADDRESS, address(underlyingBorrow))\\n      )[0];\\n\\n      // Repay flashloan\\n      require(wethRequired <= underlyingCollateralSeized, \\\"Seized NATIVE collateral not enough to repay flashloan.\\\");\\n      W_NATIVE.deposit{ value: wethRequired }();\\n      require(\\n        W_NATIVE.transfer(msg.sender, wethRequired),\\n        \\\"Failed to repay Uniswap flashloan with W_NATIVE exchanged from seized collateral.\\\"\\n      );\\n\\n      // Return the profited token (NATIVE)\\n      return address(0);\\n    } else {\\n      // Check underlying collateral seized\\n      IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(ICErc20(address(cTokenCollateral)).underlying());\\n      uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n\\n      // Redeem custom collateral if liquidation strategy is set\\n      if (redemptionStrategies.length > 0) {\\n        require(\\n          redemptionStrategies.length == strategyData.length,\\n          \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\"\\n        );\\n        for (uint256 i = 0; i < redemptionStrategies.length; i++)\\n          (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(\\n            underlyingCollateral,\\n            underlyingCollateralSeized,\\n            IRedemptionStrategy(redemptionStrategies[i]),\\n            strategyData[i]\\n          );\\n      }\\n\\n      // Check which side of the flashloan to repay\\n      if (address(underlyingCollateral) == address(underlyingBorrow)) {\\n        // Repay flashloan on borrow side with collateral\\n        require(\\n          flashLoanReturnAmount <= underlyingBorrow.balanceOf(address(this)),\\n          \\\"Token flashloan return amount greater than tokens exchanged from seized collateral.\\\"\\n        );\\n        require(\\n          underlyingBorrow.transfer(msg.sender, flashLoanReturnAmount),\\n          \\\"Failed to repay token flashloan on borrow (non-W_NATIVE) side.\\\"\\n        );\\n\\n        // Return the profited token (same as collateral and borrow)\\n        return address(underlyingCollateral);\\n      } else {\\n        // Get W_NATIVE required to repay flashloan\\n        uint256 wethRequired = getAmountsIn(\\n          uniswapV2RouterForBorrow.factory(),\\n          repayAmount,\\n          array(W_NATIVE_ADDRESS, address(underlyingBorrow))\\n        )[0];\\n\\n        if (address(underlyingCollateral) != W_NATIVE_ADDRESS) {\\n          // Approve to Uniswap router\\n          safeApprove(underlyingCollateral, address(uniswapV2RouterForCollateral), underlyingCollateralSeized);\\n\\n          // Swap collateral tokens for W_NATIVE to be repaid via Uniswap router\\n          if (exchangeProfitTo == address(underlyingCollateral))\\n            uniswapV2RouterForCollateral.swapTokensForExactTokens(\\n              wethRequired,\\n              underlyingCollateralSeized,\\n              array(address(underlyingCollateral), W_NATIVE_ADDRESS),\\n              address(this),\\n              block.timestamp\\n            );\\n          else\\n            uniswapV2RouterForCollateral.swapExactTokensForTokens(\\n              underlyingCollateralSeized,\\n              wethRequired,\\n              array(address(underlyingCollateral), W_NATIVE_ADDRESS),\\n              address(this),\\n              block.timestamp\\n            );\\n        }\\n\\n        // Repay flashloan\\n        require(\\n          wethRequired <= IERC20Upgradeable(W_NATIVE_ADDRESS).balanceOf(address(this)),\\n          \\\"Not enough W_NATIVE exchanged from seized collateral to repay flashloan.\\\"\\n        );\\n        require(\\n          W_NATIVE.transfer(msg.sender, wethRequired),\\n          \\\"Failed to repay Uniswap flashloan with W_NATIVE exchanged from seized collateral.\\\"\\n        );\\n\\n        // Return the profited token (underlying collateral if same as exchangeProfitTo; otherwise, W_NATIVE)\\n        return exchangeProfitTo == address(underlyingCollateral) ? address(underlyingCollateral) : W_NATIVE_ADDRESS;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * Public visibility because we have to call this function externally if called from a payable FuseSafeLiquidator function (for some reason delegatecall fails when called with msg.value > 0).\\n   */\\n  function redeemCustomCollateral(\\n    IERC20Upgradeable underlyingCollateral,\\n    uint256 underlyingCollateralSeized,\\n    IRedemptionStrategy strategy,\\n    bytes memory strategyData\\n  ) public returns (IERC20Upgradeable, uint256) {\\n    bytes memory returndata = _functionDelegateCall(\\n      address(strategy),\\n      abi.encodeWithSelector(strategy.redeem.selector, underlyingCollateral, underlyingCollateralSeized, strategyData)\\n    );\\n    return abi.decode(returndata, (IERC20Upgradeable, uint256));\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], but performing a delegate call.\\n   * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L37\\n   */\\n  function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n    require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Used by `_functionDelegateCall` to verify the result of a delegate call.\\n   * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L45\\n   */\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an array containing the parameters supplied.\\n   */\\n  function array(uint256 a) private pure returns (uint256[] memory) {\\n    uint256[] memory arr = new uint256[](1);\\n    arr[0] = a;\\n    return arr;\\n  }\\n\\n  /**\\n   * @dev Returns an array containing the parameters supplied.\\n   */\\n  function array(address a) private pure returns (address[] memory) {\\n    address[] memory arr = new address[](1);\\n    arr[0] = a;\\n    return arr;\\n  }\\n\\n  /**\\n   * @dev Returns an array containing the parameters supplied.\\n   */\\n  function array(address a, address b) private pure returns (address[] memory) {\\n    address[] memory arr = new address[](2);\\n    arr[0] = a;\\n    arr[1] = b;\\n    return arr;\\n  }\\n\\n  /**\\n   * @dev Returns an array containing the parameters supplied.\\n   */\\n  function array(\\n    address a,\\n    address b,\\n    address c\\n  ) private pure returns (address[] memory) {\\n    address[] memory arr = new address[](3);\\n    arr[0] = a;\\n    arr[1] = b;\\n    arr[2] = c;\\n    return arr;\\n  }\\n}\\n\",\"keccak256\":\"0xea98b253c3504f359d6e69c365d376daafa250d8ece65fc309dd9c9f73285f49\",\"license\":\"UNLICENSED\"},\"contracts/external/aave/IW_NATIVE.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IW_NATIVE {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transfer(address dst, uint256 wad) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc7bff238e380cf820290f17ddff540ed587ed164f3587da31dc6837674b8780e\",\"license\":\"agpl-3.0\"},\"contracts/external/compound/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICErc20 is ICToken {\\n  function underlying() external view returns (address);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICToken cTokenCollateral\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4174a86be37f5d7b0e1f02af3f81dfbc22ae8e7598cf9203169133372f2cde7\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICEther.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CEther Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICEther is ICToken {\\n  function liquidateBorrow(address borrower, ICToken cTokenCollateral) external payable;\\n}\\n\",\"keccak256\":\"0x6e18cb5ffd00a80880e535905da6adc63badd917a182d21522510a73ec50f455\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface ICToken {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function fuseAdminHasRights() external view returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function comptroller() external view returns (address);\\n\\n  function adminFeeMantissa() external view returns (uint256);\\n\\n  function fuseFeeMantissa() external view returns (uint256);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalAdminFees() external view returns (uint256);\\n\\n  function totalFuseFees() external view returns (uint256);\\n\\n  function isCToken() external view returns (bool);\\n\\n  function isCEther() external view returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function totalBorrowsCurrent() external returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view returns (uint256);\\n\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf3d448eb93652645ae9fd32453be4651f664d00d218f1d0e4fe181a2a39a27f\",\"license\":\"BSD-3-Clause\"},\"contracts/external/pcs/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IPancakePair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x906adea611b1c914a52fa355abe1c5cc2b97cb305ec74d22e787163a2099b317\",\"license\":\"GPL-3.0-only\"},\"contracts/external/pcs/PancakeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IPancakePair.sol\\\";\\n\\nlibrary PancakeLibrary {\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n    require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    bytes memory initHashCode\\n  ) internal pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(\\n      uint160(\\n        uint256(\\n          keccak256(abi.encodePacked(hex\\\"ff\\\", factory, keccak256(abi.encodePacked(token0, token1)), initHashCode))\\n        )\\n      )\\n    );\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    bytes memory initHashCode\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    pairFor(factory, tokenA, tokenB, initHashCode);\\n    (uint256 reserve0, uint256 reserve1, ) = IPancakePair(pairFor(factory, tokenA, tokenB, initHashCode)).getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"PancakeLibrary: INSUFFICIENT_AMOUNT\\\");\\n    require(reserveA > 0 && reserveB > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n    amountB = (amountA * reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n    uint256 amountInWithFee = amountIn * 9975;\\n    uint256 numerator = amountInWithFee * reserveOut;\\n    uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n    uint256 numerator = reserveIn * amountOut * 1000;\\n    uint256 denominator = (reserveOut - amountOut) * 997;\\n    amountIn = numerator / denominator + 1;\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path,\\n    bytes memory initHashCode\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"PancakeLibrary: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1], initHashCode);\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path,\\n    bytes memory initHashCode\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"PancakeLibrary: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i], initHashCode);\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7725d701a062d1afc1323949943a5e6dcc6a6cd907ae12b62a9adc96b23326db\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Callee {\\n  function uniswapV2Call(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf03775d505749a6d8ffd4b50e19478cacfe83c8e6fb0881e1b442505f958029a\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xcad1373d47c15a77f0fe29698181bb643d4eb4cc870fdeb40b7e081ebffb598a\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xc30635313c081ea723c128678f4d45c48aac88080d91578e8c4374774d26cba2\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x62d8aba76a668ee9cc44e89f8b5bca363bd9682e725bf0c8780b0473daec590b\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb43a52d7a8eb3895ddfdfbf97490d1c3e8d3630b69be8ab4dc4591e0b1de546d\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex\\\"ff\\\",\\n              factory,\\n              keccak256(abi.encodePacked(token0, token1)),\\n              hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n    require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n    amountB = (amountA * reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n    uint256 amountInWithFee = amountIn * 997;\\n    uint256 numerator = amountInWithFee * reserveOut;\\n    uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n    uint256 numerator = reserveIn * amountOut * 1000;\\n    uint256 denominator = (reserveOut - amountOut) * 997;\\n    amountIn = numerator / denominator + 1;\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb2d712cb86e4df512a5d185ad4c99c9c5f8b20784b9996fd88d89905caa57fb3\",\"license\":\"GPL-3.0-only\"},\"contracts/liquidators/IRedemptionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IRedemptionStrategy\\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface IRedemptionStrategy {\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n}\\n\",\"keccak256\":\"0x9b49bb83d75a1f2d241cc6052fca842336cf54966476f2ddffbbe804bc713bbb\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615367806100206000396000f3fe6080604052600436106100c65760003560e01c806381738f131161007f578063b596625811610059578063b596625814610269578063b798d3ff146102a8578063ba8bca5a146102c8578063c8348b54146102e857600080fd5b806381738f1314610203578063a68ee11914610229578063a94c12bc1461024957600080fd5b80630d1b27631461012557806310d1e85c1461014b5780634a9364171461016b578063700d5dd71461018b5780637754f887146101ab578063789fc9ad146101e357600080fd5b3661012057333b61011e5760405162461bcd60e51b815260206004820152601960248201527f53656e646572206973206e6f74206120636f6e74726163742e0000000000000060448201526064015b60405180910390fd5b005b600080fd5b61013861013336600461454b565b610308565b6040519081526020015b60405180910390f35b34801561015757600080fd5b5061011e610166366004614615565b610698565b34801561017757600080fd5b5061011e6101863660046146aa565b6108ac565b34801561019757600080fd5b506101386101a6366004614731565b610a4e565b3480156101b757600080fd5b506003546101cb906001600160a01b031681565b6040516001600160a01b039091168152602001610142565b3480156101ef57600080fd5b506004546101cb906001600160a01b031681565b34801561020f57600080fd5b506000546101cb906201000090046001600160a01b031681565b34801561023557600080fd5b5061013861024436600461481d565b610ccf565b34801561025557600080fd5b506002546101cb906001600160a01b031681565b34801561027557600080fd5b506102896102843660046148eb565b611152565b604080516001600160a01b039093168352602083019190915201610142565b3480156102b457600080fd5b506001546101cb906001600160a01b031681565b3480156102d457600080fd5b506006546101cb906001600160a01b031681565b3480156102f457600080fd5b50610138610303366004614956565b6111d3565b60008034116103295760405162461bcd60e51b815260040161011590614a2b565b604051635572051560e11b81526001600160a01b038a81166004830152888116602483015289169063aae40a2a9034906044016000604051808303818588803b15801561037557600080fd5b505af1158015610389573d6000803e3d6000fd5b5050505050866001600160a01b0316856001600160a01b031614610681576040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104129190614a88565b9050801561067f5760405163db006a7560e01b8152600481018290526000906001600160a01b038a169063db006a75906024016020604051808303816000875af1158015610464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104889190614a88565b905080156104a85760405162461bcd60e51b815260040161011590614aa1565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190614aff565b8651909150156106705784518651146105375760405162461bcd60e51b815260040161011590614b1c565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190614a88565b905060005b875181101561066d57306001600160a01b031663b596625884848b85815181106105d3576105d3614b9f565b60200260200101518b86815181106105ed576105ed614b9f565b60200260200101516040518563ffffffff1660e01b81526004016106149493929190614c0d565b60408051808303816000875af1158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190614c40565b90935091508061066581614c84565b9150506105a7565b50505b61067c81898b8a6115fe565b50505b505b61068b8587611a62565b9998505050505050505050565b60006106a8606460448486614c9f565b8101906106b59190614cc9565b9050806001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190614ce6565b156107e1576000808080808080806107348a6004818e614c9f565b8101906107419190614d6c565b985098509850985098509850509750975060006103e5886103e86107659190614e06565b61076f9190614e3b565b905060006103e56107828a6103e8614e06565b61078c9190614e4f565b11156107a0578061079c81614c84565b9150505b6107b289898c8a8a8a878b8b8b611c87565b600780546001600160a01b0319166001600160a01b0392909216919091179055506108a4975050505050505050565b600080808080808080806107f88b6004818f614c9f565b8101906108059190614e63565b9950995099509950995099509950509850985060006103e5896103e861082b9190614e06565b6108359190614e3b565b905060006103e56108488b6103e8614e06565b6108529190614e4f565b1115610866578061086281614c84565b9150505b6108798a8a8d8b8b8b878c8c8c8c611e9a565b600780546001600160a01b0319166001600160a01b0392909216919091179055505050505050505050505b505050505050565b600054610100900460ff166108c75760005460ff16156108cb565b303b155b61092e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610115565b600054610100900460ff16158015610950576000805461ffff19166101011790555b6001600160a01b0385166109a65760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632466163746f7279206e6f7420646566696e65642e0000006044820152606401610115565b6000805462010000600160b01b031916620100006001600160a01b0389811682029290921792839055600280546001600160a01b03199081168a85169081179092556003805482168a86161790556004805482168986161790556001805493909504909316918316919091179092556006805490911690911790558151610a349060059060208501906142c2565b5080156108a4576000805461ff0019169055505050505050565b6000808b11610a6f5760405162461bcd60e51b815260040161011590614f3f565b60008060008c6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190614aff565b9050886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190614aff565b60005460405163e6a4390560e01b81526001600160a01b038481166004830152620100009092048216602482015291169063e6a4390590604401602060405180830381865afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb59190614aff565b9250806001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c239190614aff565b6001600160a01b031614915050816001600160a01b031663022c0d9f82610c4b576000610c4d565b8e5b8315610c5a576000610c5c565b8f5b306000366040518663ffffffff1660e01b8152600401610c80959493929190614f83565b600060405180830381600087803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b50505050610cbd898b8661212e565b9e9d5050505050505050505050505050565b6000808911610cf05760405162461bcd60e51b815260040161011590614a2b565b6000886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d549190614aff565b9050610d6b6001600160a01b03821633308d612252565b610d76818a8c6122bd565b604051637af1e23160e11b81526001600160a01b038c81166004830152602482018c905289811660448301528a169063f5e3c462906064016020604051808303816000875af1158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df19190614a88565b15610e345760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b6044820152606401610115565b876001600160a01b0316866001600160a01b031614611139576040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a0823190602401602060405180830381865afa158015610e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb89190614a88565b905080156111375760405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2e9190614a88565b90508015610f4e5760405162461bcd60e51b815260040161011590614aa1565b896001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb09190614ce6565b15610fc757610fc26000898b8a6115fe565b611135565b60008a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b9190614aff565b8751909150156111275785518751146110565760405162461bcd60e51b815260040161011590614b1c565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561109d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c19190614a88565b905060005b88518110156111245761110d83838b84815181106110e6576110e6614b9f565b60200260200101518b858151811061110057611100614b9f565b6020026020010151611152565b90935091508061111c81614c84565b9150506110c6565b50505b611133818a8c8b6115fe565b505b505b505b6111438688611a62565b9b9a5050505050505050505050565b60008060006111af856310badf4e60e01b89898860405160240161117893929190614fd2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261236c565b9050808060200190518101906111c59190614c40565b925092505094509492505050565b6000808a116111f45760405162461bcd60e51b815260040161011590614f3f565b600254611209906001600160a01b0316612460565b611273886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561124a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126e9190614aff565b612460565b600454611288906001600160a01b0316612460565b60035461129d906001600160a01b0316612460565b6006546040805163c45a015560e01b815290516112e8926001600160a01b03169163c45a01559160048083019260209291908290030181865afa15801561124a573d6000803e3d6000fd5b60006114bf600660009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113649190614aff565b6002546001600160a01b0389811691161480156113f7575060035460408051636f307dc360e01b815290516001600160a01b03928316928e1691636f307dc39160048083019260209291908290030181865afa1580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec9190614aff565b6001600160a01b0316145b61140c576003546001600160a01b0316611419565b6004546001600160a01b03165b600060029054906101000a90046001600160a01b03166005805461143c90614ff9565b80601f016020809104026020016040519081016040528092919081815260200182805461146890614ff9565b80156114b55780601f1061148a576101008083540402835291602001916114b5565b820191906000526020600020905b81548152906001019060200180831161149857829003601f168201915b50505050506124ab565b90506114ca81612460565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561150a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152e9190614aff565b905061153981612460565b6000546001600160a01b038084169163022c0d9f91848116620100009092041614611565576000611567565b8d5b6000546001600160a01b038581166201000090920416141561158a57600061158c565b8e5b306000366040518663ffffffff1660e01b81526004016115b0959493929190614f83565b600060405180830381600087803b1580156115ca57600080fd5b505af11580156115de573d6000803e3d6000fd5b505050506115ed888a8661212e565b9d9c50505050505050505050505050565b836001600160a01b0316836001600160a01b0316141561161d57611a5c565b6001600160a01b038416611753576000546001600160a01b03848116620100009092041614156116b557600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b5050505050611a5c565b806001600160a01b0316637ff36ab547846116e5600060029054906101000a90046001600160a01b031688612536565b30426040518663ffffffff1660e01b81526004016117069493929190615078565b60006040518083038185885af1158015611724573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261174d91908101906150ad565b50611a5c565b6000546001600160a01b03858116620100009092041614801561177d57506001600160a01b038316155b15611854576001546000546040516370a0823160e01b81523060048201526001600160a01b0392831692632e1a7d4d9262010000900416906370a0823190602401602060405180830381865afa1580156117db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ff9190614a88565b6040518263ffffffff1660e01b815260040161181d91815260200190565b600060405180830381600087803b15801561183757600080fd5b505af115801561184b573d6000803e3d6000fd5b50505050611a5c565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c19190614a88565b90506118ce8284836122bd565b6001600160a01b03851661197b57826001600160a01b03166318cbafe5828661190c8a600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b815260040161192e959493929190615132565b6000604051808303816000875af115801561194d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261197591908101906150ad565b506108a4565b6000546001600160a01b03808516916338ed173991849188918b8116620100009092041614806119be57506000546001600160a01b038a81166201000090920416145b6119e5576000546119e0908b906201000090046001600160a01b03168b6125c3565b6119ef565b6119ef8a8a612536565b30426040518663ffffffff1660e01b8152600401611a11959493929190615132565b6000604051808303816000875af1158015611a30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a5891908101906150ad565b5050505b50505050565b6000806001600160a01b038416611b9657504782811015611ad95760405162461bcd60e51b815260206004820152602b60248201527f4d696e696d756d204e4154495645206f757470757420616d6f756e74206e6f7460448201526a1039b0ba34b9b334b2b21760a91b6064820152608401610115565b8015611b9157604051600090339083908381818185875af1925050503d8060008114611b21576040519150601f19603f3d011682016040523d82523d6000602084013e611b26565b606091505b5050905080611b8f5760405162461bcd60e51b815260206004820152602f60248201527f4661696c656420746f207472616e73666572206f7574707574204e415449564560448201526e103a379036b9b39739b2b73232b91760891b6064820152608401610115565b505b611c80565b6040516370a0823160e01b815230600482015284906001600160a01b038216906370a0823190602401602060405180830381865afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c009190614a88565b915083821015611c645760405162461bcd60e51b815260206004820152602960248201527f4d696e696d756d20746f6b656e206f757470757420616d6f756e74206e6f742060448201526839b0ba34b334b2b21760b91b6064820152608401610115565b8115611c7e57611c7e6001600160a01b0382163384612686565b505b9392505050565b600154604051632e1a7d4d60e01b8152600481018b90526000916001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611cce57600080fd5b505af1158015611ce2573d6000803e3d6000fd5b5050604051635572051560e11b81526001600160a01b038e811660048301528b811660248301528c16925063aae40a2a91508c906044016000604051808303818588803b158015611d3257600080fd5b505af1158015611d46573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093506001600160a01b038c1692506370a082319150602401602060405180830381865afa158015611d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db69190614a88565b905060008111611dfd5760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b6044820152606401610115565b60405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015611e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6b9190614a88565b90508015611e8b5760405162461bcd60e51b815260040161011590614aa1565b6115ed8c8b8a8a8a8a8a6126bb565b6000808a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eff9190614aff565b9050611f0c818c8e6122bd565b604051637af1e23160e11b81526001600160a01b038e81166004830152602482018e90528b811660448301528c169063f5e3c462906064016020604051808303816000875af1158015611f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f879190614a88565b15611fca5760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b6044820152606401610115565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a0823190602401602060405180830381865afa158015612011573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120359190614a88565b90506000811161207c5760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b6044820152606401610115565b60405163db006a7560e01b8152600481018290526000906001600160a01b038d169063db006a75906024016020604051808303816000875af11580156120c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ea9190614a88565b9050801561210a5760405162461bcd60e51b815260040161011590614aa1565b61211b8e8d8c8c8c8c8c8c8b612ef5565b9f9e505050505050505050505050505050565b60006001600160a01b0384166121ca5760075461216a906001600160a01b031685612159858761516e565b6006546001600160a01b03166115fe565b81156121b95760405141908390600081818185875af1925050503d80600081146121b0576040519150601f19603f3d011682016040523d82523d6000602084013e6121b5565b606091505b5050505b6121c38484611a62565b9050611c80565b8115612237576007546006546121ee916001600160a01b03908116918591166138c3565b60405141908390600081818185875af1925050503d806000811461222e576040519150601f19603f3d011682016040523d82523d6000602084013e612233565b606091505b5050505b6007546121b9906001600160a01b031685612159858761516e565b6040516001600160a01b0380851660248301528316604482015260648101829052611a5c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613a5f565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801561230d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123319190614a88565b905081811015611a5c578015612356576123566001600160a01b038516846000613b31565b611a5c6001600160a01b03851684600019613b31565b60606001600160a01b0383163b6123d45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610115565b600080846001600160a01b0316846040516123ef9190615186565b600060405180830381855af49150503d806000811461242a576040519150601f19603f3d011682016040523d82523d6000602084013e61242f565b606091505b5091509150612457828260405180606001604052806027815260200161530b60279139613c46565b95945050505050565b6040516001600160a01b03821660248201526124a89060440160408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b179052613c7f565b50565b60008060006124ba8686613ca0565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152919350915087906048016040516020818303038152906040528051906020012085604051602001612513939291906151a2565b60408051601f198184030181529190528051602090910120979650505050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050838160008151811061256f5761256f614b9f565b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106125a3576125a3614b9f565b6001600160a01b0390921660209283029190910190910152905092915050565b604080516003808252608082019092526060916000919060208201848036833701905050905084816000815181106125fd576125fd614b9f565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061263157612631614b9f565b60200260200101906001600160a01b031690816001600160a01b031681525050828160028151811061266557612665614b9f565b6001600160a01b039092166020928302919091019091015290509392505050565b6040516001600160a01b0383166024820152604481018290526126b690849063a9059cbb60e01b90606401612286565b505050565b600080876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127209190614aff565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561276a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278e9190614a88565b85519091501561280f5783518551146127b95760405162461bcd60e51b815260040161011590614b1c565b60005b855181101561280d576127f683838884815181106127dc576127dc614b9f565b602002602001015188858151811061110057611100614b9f565b90935091508061280581614c84565b9150506127bc565b505b6002546001600160a01b0387811691161480156128fa5750886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128899190614aff565b6001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b0316146128cf5773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486128e5565b732260fac5e5542a773aa44fbcfedf7c193bc2c5995b6001600160a01b0316826001600160a01b0316145b15612b0657600061298b876001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129669190614aff565b8c61298686600060029054906101000a90046001600160a01b0316612536565b613d96565b60008151811061299d5761299d614b9f565b6020026020010151905081811115612a1d5760405162461bcd60e51b815260206004820152603760248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e207365697a656420636f6c6c61746572616c2e0000000000000000006064820152608401610115565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015612a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8e9190614ce6565b612b005760405162461bcd60e51b815260206004820152603b60248201527f4661696c656420746f207472616e73666572206e6f6e2d575f4e41544956452060448201527f746f6b656e73206261636b20746f20666c6173686c656e6465722e00000000006064820152608401610115565b50612ee8565b6000546001600160a01b03838116620100009092041614612d10576001600160a01b038216612b9d57600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b158015612b7f57600080fd5b505af1158015612b93573d6000803e3d6000fd5b5050505050612d10565b612ba88287836122bd565b816001600160a01b0316886001600160a01b03161415612c6157856001600160a01b0316638803dbee8883612bf286600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b8152600401612c14959493929190615132565b6000604051808303816000875af1158015612c33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c5b91908101906150ad565b50612d10565b856001600160a01b03166338ed17398289612c9186600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b8152600401612cb3959493929190615132565b6000604051808303816000875af1158015612cd2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cfa91908101906150ad565b506000546201000090046001600160a01b031691505b6000546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015612d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d819190614a88565b871115612e0e5760405162461bcd60e51b815260206004820152604f60248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e20575f4e41544956452065786368616e6765642066726f6d2073656960648201526e3d32b21031b7b63630ba32b930b61760891b608482015260a401610115565b60015460405163a9059cbb60e01b8152336004820152602481018990526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e839190614ce6565b612ee85760405162461bcd60e51b815260206004820152603060248201527f4661696c656420746f207472616e7366657220575f4e4154495645206261636b60448201526f103a3790333630b9b43632b73232b91760811b6064820152608401610115565b5098975050505050505050565b6000886001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f599190614ce6565b156131805760004790506000612fe8886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fca9190614aff565b6000548e90612986906201000090046001600160a01b031688612536565b600081518110612ffa57612ffa614b9f565b602002602001015190508181111561307a5760405162461bcd60e51b815260206004820152603760248201527f5365697a6564204e415449564520636f6c6c61746572616c206e6f7420656e6f60448201527f75676820746f20726570617920666c6173686c6f616e2e0000000000000000006064820152608401610115565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156130ca57600080fd5b505af11580156130de573d6000803e3d6000fd5b505060015460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b03909116935063a9059cbb925060440190506020604051808303816000875af1158015613135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131599190614ce6565b6131755760405162461bcd60e51b8152600401610115906151eb565b60009250505061068b565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e49190614aff565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561322e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132529190614a88565b8651909150156132d357845186511461327d5760405162461bcd60e51b815260040161011590614b1c565b60005b86518110156132d1576132ba83838984815181106132a0576132a0614b9f565b602002602001015189858151811061110057611100614b9f565b9093509150806132c981614c84565b915050613280565b505b836001600160a01b0316826001600160a01b031614156134d1576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015613331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133559190614a88565b8911156133e65760405162461bcd60e51b815260206004820152605360248201527f546f6b656e20666c6173686c6f616e2072657475726e20616d6f756e7420677260448201527f6561746572207468616e20746f6b656e732065786368616e6765642066726f6d6064820152721039b2b4bd32b21031b7b63630ba32b930b61760691b608482015260a401610115565b60405163a9059cbb60e01b8152336004820152602481018a90526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015613433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134579190614ce6565b6134c95760405162461bcd60e51b815260206004820152603e60248201527f4661696c656420746f20726570617920746f6b656e20666c6173686c6f616e2060448201527f6f6e20626f72726f7720286e6f6e2d575f4e41544956452920736964652e00006064820152608401610115565b50905061068b565b6000613556896001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015613514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135389190614aff565b6000548f90612986906201000090046001600160a01b031689612536565b60008151811061356857613568614b9f565b60200260200101519050600060029054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b0316146136ff576135ab8389846122bd565b826001600160a01b03168b6001600160a01b0316141561366457876001600160a01b0316638803dbee82846135f587600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b8152600401613617959493929190615132565b6000604051808303816000875af1158015613636573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261365e91908101906150ad565b506136ff565b876001600160a01b03166338ed1739838361369487600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b81526004016136b6959493929190615132565b6000604051808303816000875af11580156136d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136fd91908101906150ad565b505b6000546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa15801561374c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137709190614a88565b8111156137f65760405162461bcd60e51b815260206004820152604860248201527f4e6f7420656e6f75676820575f4e41544956452065786368616e67656420667260448201527f6f6d207365697a656420636f6c6c61746572616c20746f20726570617920666c60648201526730b9b43637b0b71760c11b608482015260a401610115565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015613847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386b9190614ce6565b6138875760405162461bcd60e51b8152600401610115906151eb565b826001600160a01b03168b6001600160a01b0316146138b7576000546201000090046001600160a01b03166138b9565b825b935050505061068b565b6001600160a01b0383166138d657505050565b6000546001600160a01b038481166201000090920416141561394c57600154604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561393857600080fd5b505af1158015611a58573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015283906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b99190614a88565b90506139c68284836122bd565b826001600160a01b0316634a25d94a85836139f689600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b8152600401613a18959493929190615132565b6000604051808303816000875af1158015613a37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a491908101906150ad565b6000613ab4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f239092919063ffffffff16565b8051909150156126b65780806020019051810190613ad29190614ce6565b6126b65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610115565b801580613bab5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015613b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba99190614a88565b155b613c165760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610115565b6040516001600160a01b0383166024820152604481018290526126b690849063095ea7b360e01b90606401612286565b60608315613c55575081611c80565b825115613c655782518084602001fd5b8160405162461bcd60e51b81526004016101159190615262565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080826001600160a01b0316846001600160a01b03161415613d115760405162461bcd60e51b815260206004820152602360248201527f50616e63616b654c6962726172793a204944454e544943414c5f41444452455360448201526253455360e81b6064820152608401610115565b826001600160a01b0316846001600160a01b031610613d31578284613d34565b83835b90925090506001600160a01b038216613d8f5760405162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a205a45524f5f41444452455353000000006044820152606401610115565b9250929050565b6060600282511015613dea5760405162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a20494e56414c49445f50415448000000006044820152606401610115565b81516001600160401b03811115613e0357613e03614380565b604051908082528060200260200182016040528015613e2c578160200160208202803683370190505b509050828160018351613e3f9190615275565b81518110613e4f57613e4f614b9f565b602002602001018181525050600060018351613e6b9190615275565b90505b8015611c7e57600080613ebe8786613e87600187615275565b81518110613e9757613e97614b9f565b6020026020010151878681518110613eb157613eb1614b9f565b6020026020010151613f3a565b91509150613ee6848481518110613ed757613ed7614b9f565b6020026020010151838361406f565b84613ef2600186615275565b81518110613f0257613f02614b9f565b60200260200101818152505050508080613f1b9061528c565b915050613e6e565b6060613f328484600085614191565b949350505050565b6000806000613f498585613ca0565b5060405163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291925060009182919089169063e6a4390590604401602060405180830381865afa158015613fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc59190614aff565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015614002573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402691906152ba565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461405d578082614060565b81815b90999098509650505050505050565b60008084116140d35760405162461bcd60e51b815260206004820152602a60248201527f50616e63616b654c6962726172793a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b6064820152608401610115565b6000831180156140e35750600082115b61413e5760405162461bcd60e51b815260206004820152602660248201527f50616e63616b654c6962726172793a20494e53554646494349454e545f4c495160448201526555494449545960d01b6064820152608401610115565b600061414a8585614e06565b614156906103e8614e06565b905060006141648685615275565b614170906103e5614e06565b905061417c8183614e3b565b61418790600161516e565b9695505050505050565b6060824710156141f25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610115565b6001600160a01b0385163b6142495760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610115565b600080866001600160a01b031685876040516142659190615186565b60006040518083038185875af1925050503d80600081146142a2576040519150601f19603f3d011682016040523d82523d6000602084013e6142a7565b606091505b50915091506142b7828286613c46565b979650505050505050565b8280546142ce90614ff9565b90600052602060002090601f0160209004810192826142f05760008555614336565b82601f1061430957805160ff1916838001178555614336565b82800160010185558215614336579182015b8281111561433657825182559160200191906001019061431b565b50614342929150614346565b5090565b5b808211156143425760008155600101614347565b6001600160a01b03811681146124a857600080fd5b803561437b8161435b565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156143be576143be614380565b604052919050565b60006001600160401b038211156143df576143df614380565b5060051b60200190565b600082601f8301126143fa57600080fd5b8135602061440f61440a836143c6565b614396565b82815260059290921b8401810191818101908684111561442e57600080fd5b8286015b848110156144525780356144458161435b565b8352918301918301614432565b509695505050505050565b600082601f83011261446e57600080fd5b81356001600160401b0381111561448757614487614380565b61449a601f8201601f1916602001614396565b8181528460208386010111156144af57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126144dd57600080fd5b813560206144ed61440a836143c6565b82815260059290921b8401810191818101908684111561450c57600080fd5b8286015b848110156144525780356001600160401b0381111561452f5760008081fd5b61453d8986838b010161445d565b845250918301918301614510565b600080600080600080600080610100898b03121561456857600080fd5b88356145738161435b565b975060208901356145838161435b565b965060408901356145938161435b565b95506060890135945060808901356145aa8161435b565b935060a08901356145ba8161435b565b925060c08901356001600160401b03808211156145d657600080fd5b6145e28c838d016143e9565b935060e08b01359150808211156145f857600080fd5b506146058b828c016144cc565b9150509295985092959890939650565b60008060008060006080868803121561462d57600080fd5b85356146388161435b565b9450602086013593506040860135925060608601356001600160401b038082111561466257600080fd5b818801915088601f83011261467657600080fd5b81358181111561468557600080fd5b89602082850101111561469757600080fd5b9699959850939650602001949392505050565b600080600080600060a086880312156146c257600080fd5b85356146cd8161435b565b945060208601356146dd8161435b565b935060408601356146ed8161435b565b925060608601356146fd8161435b565b915060808601356001600160401b0381111561471857600080fd5b6147248882890161445d565b9150509295509295909350565b60008060008060008060008060008060006101608c8e03121561475357600080fd5b61475c8c614370565b9a5060208c0135995061477160408d01614370565b985061477f60608d01614370565b975060808c0135965061479460a08d01614370565b95506147a260c08d01614370565b94506147b060e08d01614370565b93506001600160401b03806101008e013511156147cc57600080fd5b6147dd8e6101008f01358f016143e9565b9350806101208e013511156147f157600080fd5b506148038d6101208e01358e016144cc565b91506101408c013590509295989b509295989b9093969950565b60008060008060008060008060006101208a8c03121561483c57600080fd5b89356148478161435b565b985060208a0135975060408a013561485e8161435b565b965061486c60608b01614370565b955060808a0135945061488160a08b01614370565b935061488f60c08b01614370565b925060e08a01356001600160401b03808211156148ab57600080fd5b6148b78d838e016143e9565b93506101008c01359150808211156148ce57600080fd5b506148db8c828d016144cc565b9150509295985092959850929598565b6000806000806080858703121561490157600080fd5b843561490c8161435b565b93506020850135925060408501356149238161435b565b915060608501356001600160401b0381111561493e57600080fd5b61494a8782880161445d565b91505092959194509250565b6000806000806000806000806000806101408b8d03121561497657600080fd5b61497f8b614370565b995060208b0135985061499460408c01614370565b97506149a260608c01614370565b965060808b013595506149b760a08c01614370565b94506149c560c08c01614370565b935060e08b01356001600160401b03808211156149e157600080fd5b6149ed8e838f016143e9565b94506101008d0135915080821115614a0457600080fd5b50614a118d828e016144cc565b9250506101208b013590509295989b9194979a5092959850565b60208082526038908201527f526570617920616d6f756e7420287472616e73616374696f6e2076616c75652960408201527f206d7573742062652067726561746572207468616e20302e0000000000000000606082015260800190565b600060208284031215614a9a57600080fd5b5051919050565b602080825260409082018190527f4572726f722063616c6c696e672072656465656d696e67207365697a65642063908201527f546f6b656e3a206572726f7220636f6465206e6f7420657175616c20746f2030606082015260800190565b600060208284031215614b1157600080fd5b8151611c808161435b565b6020808252605b908201527f49526564656d7074696f6e537472617465677920636f6e74726163742061727260408201527f617920616e64207374726174656779206461746120627974657320617272617960608201527f206d6e75737420746865207468652073616d65206c656e6774682e0000000000608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015614bd0578181015183820152602001614bb8565b83811115611a5c5750506000910152565b60008151808452614bf9816020860160208601614bb5565b601f01601f19169290920160200192915050565b6001600160a01b038581168252602082018590528316604082015260806060820181905260009061418790830184614be1565b60008060408385031215614c5357600080fd5b8251614c5e8161435b565b6020939093015192949293505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415614c9857614c98614c6e565b5060010190565b60008085851115614caf57600080fd5b83861115614cbc57600080fd5b5050820193919092039150565b600060208284031215614cdb57600080fd5b8135611c808161435b565b600060208284031215614cf857600080fd5b81518015158114611c8057600080fd5b600082601f830112614d1957600080fd5b81356020614d2961440a836143c6565b82815260059290921b84018101918181019086841115614d4857600080fd5b8286015b84811015614452578035614d5f8161435b565b8352918301918301614d4c565b60008060008060008060008060006101208a8c031215614d8b57600080fd5b8935614d968161435b565b985060208a0135975060408a0135614dad8161435b565b9650614dbb60608b01614370565b955060808a01359450614dd060a08b01614370565b9350614dde60c08b01614370565b925060e08a01356001600160401b0380821115614dfa57600080fd5b6148b78d838e01614d08565b6000816000190483118215151615614e2057614e20614c6e565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614e4a57614e4a614e25565b500490565b600082614e5e57614e5e614e25565b500690565b6000806000806000806000806000806101408b8d031215614e8357600080fd5b614e8c8b614370565b995060208b01359850614ea160408c01614370565b9750614eaf60608c01614370565b965060808b01359550614ec460a08c01614370565b9450614ed260c08c01614370565b9350614ee060e08c01614370565b92506101008b01356001600160401b0380821115614efd57600080fd5b614f098e838f01614d08565b93506101208d0135915080821115614f2057600080fd5b50614f2d8d828e016144cc565b9150509295989b9194979a5092959850565b60208082526024908201527f526570617920616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b858152602081018590526001600160a01b03841660408201526080606082018190528101829052818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60018060a01b03841681528260208201526060604082015260006124576060830184614be1565b600181811c9082168061500d57607f821691505b6020821081141561502e57634e487b7160e01b600052602260045260246000fd5b50919050565b600081518084526020808501945080840160005b8381101561506d5781516001600160a01b031687529582019590820190600101615048565b509495945050505050565b8481526080602082015260006150916080830186615034565b6001600160a01b03949094166040830152506060015292915050565b600060208083850312156150c057600080fd5b82516001600160401b038111156150d657600080fd5b8301601f810185136150e757600080fd5b80516150f561440a826143c6565b81815260059190911b8201830190838101908783111561511457600080fd5b928401925b828410156142b757835182529284019290840190615119565b85815284602082015260a06040820152600061515160a0830186615034565b6001600160a01b0394909416606083015250608001529392505050565b6000821982111561518157615181614c6e565b500190565b60008251615198818460208701614bb5565b9190910192915050565b60ff60f81b81526bffffffffffffffffffffffff198460601b166001820152826015820152600082516151dc816035850160208701614bb5565b91909101603501949350505050565b60208082526051908201527f4661696c656420746f20726570617920556e697377617020666c6173686c6f6160408201527f6e207769746820575f4e41544956452065786368616e6765642066726f6d207360608201527032b4bd32b21031b7b63630ba32b930b61760791b608082015260a00190565b602081526000611c806020830184614be1565b60008282101561528757615287614c6e565b500390565b60008161529b5761529b614c6e565b506000190190565b80516001600160701b038116811461437b57600080fd5b6000806000606084860312156152cf57600080fd5b6152d8846152a3565b92506152e6602085016152a3565b9150604084015163ffffffff811681146152ff57600080fd5b80915050925092509256fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122094d596df1f8a8eeee56959a5abd7ebb237d6bea6cde2770bf54b4b464f98672364736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c806381738f131161007f578063b596625811610059578063b596625814610269578063b798d3ff146102a8578063ba8bca5a146102c8578063c8348b54146102e857600080fd5b806381738f1314610203578063a68ee11914610229578063a94c12bc1461024957600080fd5b80630d1b27631461012557806310d1e85c1461014b5780634a9364171461016b578063700d5dd71461018b5780637754f887146101ab578063789fc9ad146101e357600080fd5b3661012057333b61011e5760405162461bcd60e51b815260206004820152601960248201527f53656e646572206973206e6f74206120636f6e74726163742e0000000000000060448201526064015b60405180910390fd5b005b600080fd5b61013861013336600461454b565b610308565b6040519081526020015b60405180910390f35b34801561015757600080fd5b5061011e610166366004614615565b610698565b34801561017757600080fd5b5061011e6101863660046146aa565b6108ac565b34801561019757600080fd5b506101386101a6366004614731565b610a4e565b3480156101b757600080fd5b506003546101cb906001600160a01b031681565b6040516001600160a01b039091168152602001610142565b3480156101ef57600080fd5b506004546101cb906001600160a01b031681565b34801561020f57600080fd5b506000546101cb906201000090046001600160a01b031681565b34801561023557600080fd5b5061013861024436600461481d565b610ccf565b34801561025557600080fd5b506002546101cb906001600160a01b031681565b34801561027557600080fd5b506102896102843660046148eb565b611152565b604080516001600160a01b039093168352602083019190915201610142565b3480156102b457600080fd5b506001546101cb906001600160a01b031681565b3480156102d457600080fd5b506006546101cb906001600160a01b031681565b3480156102f457600080fd5b50610138610303366004614956565b6111d3565b60008034116103295760405162461bcd60e51b815260040161011590614a2b565b604051635572051560e11b81526001600160a01b038a81166004830152888116602483015289169063aae40a2a9034906044016000604051808303818588803b15801561037557600080fd5b505af1158015610389573d6000803e3d6000fd5b5050505050866001600160a01b0316856001600160a01b031614610681576040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104129190614a88565b9050801561067f5760405163db006a7560e01b8152600481018290526000906001600160a01b038a169063db006a75906024016020604051808303816000875af1158015610464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104889190614a88565b905080156104a85760405162461bcd60e51b815260040161011590614aa1565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190614aff565b8651909150156106705784518651146105375760405162461bcd60e51b815260040161011590614b1c565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190614a88565b905060005b875181101561066d57306001600160a01b031663b596625884848b85815181106105d3576105d3614b9f565b60200260200101518b86815181106105ed576105ed614b9f565b60200260200101516040518563ffffffff1660e01b81526004016106149493929190614c0d565b60408051808303816000875af1158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190614c40565b90935091508061066581614c84565b9150506105a7565b50505b61067c81898b8a6115fe565b50505b505b61068b8587611a62565b9998505050505050505050565b60006106a8606460448486614c9f565b8101906106b59190614cc9565b9050806001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190614ce6565b156107e1576000808080808080806107348a6004818e614c9f565b8101906107419190614d6c565b985098509850985098509850509750975060006103e5886103e86107659190614e06565b61076f9190614e3b565b905060006103e56107828a6103e8614e06565b61078c9190614e4f565b11156107a0578061079c81614c84565b9150505b6107b289898c8a8a8a878b8b8b611c87565b600780546001600160a01b0319166001600160a01b0392909216919091179055506108a4975050505050505050565b600080808080808080806107f88b6004818f614c9f565b8101906108059190614e63565b9950995099509950995099509950509850985060006103e5896103e861082b9190614e06565b6108359190614e3b565b905060006103e56108488b6103e8614e06565b6108529190614e4f565b1115610866578061086281614c84565b9150505b6108798a8a8d8b8b8b878c8c8c8c611e9a565b600780546001600160a01b0319166001600160a01b0392909216919091179055505050505050505050505b505050505050565b600054610100900460ff166108c75760005460ff16156108cb565b303b155b61092e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610115565b600054610100900460ff16158015610950576000805461ffff19166101011790555b6001600160a01b0385166109a65760405162461bcd60e51b815260206004820152601d60248201527f556e69737761705632466163746f7279206e6f7420646566696e65642e0000006044820152606401610115565b6000805462010000600160b01b031916620100006001600160a01b0389811682029290921792839055600280546001600160a01b03199081168a85169081179092556003805482168a86161790556004805482168986161790556001805493909504909316918316919091179092556006805490911690911790558151610a349060059060208501906142c2565b5080156108a4576000805461ff0019169055505050505050565b6000808b11610a6f5760405162461bcd60e51b815260040161011590614f3f565b60008060008c6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190614aff565b9050886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190614aff565b60005460405163e6a4390560e01b81526001600160a01b038481166004830152620100009092048216602482015291169063e6a4390590604401602060405180830381865afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb59190614aff565b9250806001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c239190614aff565b6001600160a01b031614915050816001600160a01b031663022c0d9f82610c4b576000610c4d565b8e5b8315610c5a576000610c5c565b8f5b306000366040518663ffffffff1660e01b8152600401610c80959493929190614f83565b600060405180830381600087803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b50505050610cbd898b8661212e565b9e9d5050505050505050505050505050565b6000808911610cf05760405162461bcd60e51b815260040161011590614a2b565b6000886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d549190614aff565b9050610d6b6001600160a01b03821633308d612252565b610d76818a8c6122bd565b604051637af1e23160e11b81526001600160a01b038c81166004830152602482018c905289811660448301528a169063f5e3c462906064016020604051808303816000875af1158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df19190614a88565b15610e345760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b6044820152606401610115565b876001600160a01b0316866001600160a01b031614611139576040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a0823190602401602060405180830381865afa158015610e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb89190614a88565b905080156111375760405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2e9190614a88565b90508015610f4e5760405162461bcd60e51b815260040161011590614aa1565b896001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb09190614ce6565b15610fc757610fc26000898b8a6115fe565b611135565b60008a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b9190614aff565b8751909150156111275785518751146110565760405162461bcd60e51b815260040161011590614b1c565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561109d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c19190614a88565b905060005b88518110156111245761110d83838b84815181106110e6576110e6614b9f565b60200260200101518b858151811061110057611100614b9f565b6020026020010151611152565b90935091508061111c81614c84565b9150506110c6565b50505b611133818a8c8b6115fe565b505b505b505b6111438688611a62565b9b9a5050505050505050505050565b60008060006111af856310badf4e60e01b89898860405160240161117893929190614fd2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261236c565b9050808060200190518101906111c59190614c40565b925092505094509492505050565b6000808a116111f45760405162461bcd60e51b815260040161011590614f3f565b600254611209906001600160a01b0316612460565b611273886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561124a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126e9190614aff565b612460565b600454611288906001600160a01b0316612460565b60035461129d906001600160a01b0316612460565b6006546040805163c45a015560e01b815290516112e8926001600160a01b03169163c45a01559160048083019260209291908290030181865afa15801561124a573d6000803e3d6000fd5b60006114bf600660009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113649190614aff565b6002546001600160a01b0389811691161480156113f7575060035460408051636f307dc360e01b815290516001600160a01b03928316928e1691636f307dc39160048083019260209291908290030181865afa1580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec9190614aff565b6001600160a01b0316145b61140c576003546001600160a01b0316611419565b6004546001600160a01b03165b600060029054906101000a90046001600160a01b03166005805461143c90614ff9565b80601f016020809104026020016040519081016040528092919081815260200182805461146890614ff9565b80156114b55780601f1061148a576101008083540402835291602001916114b5565b820191906000526020600020905b81548152906001019060200180831161149857829003601f168201915b50505050506124ab565b90506114ca81612460565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561150a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152e9190614aff565b905061153981612460565b6000546001600160a01b038084169163022c0d9f91848116620100009092041614611565576000611567565b8d5b6000546001600160a01b038581166201000090920416141561158a57600061158c565b8e5b306000366040518663ffffffff1660e01b81526004016115b0959493929190614f83565b600060405180830381600087803b1580156115ca57600080fd5b505af11580156115de573d6000803e3d6000fd5b505050506115ed888a8661212e565b9d9c50505050505050505050505050565b836001600160a01b0316836001600160a01b0316141561161d57611a5c565b6001600160a01b038416611753576000546001600160a01b03848116620100009092041614156116b557600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b5050505050611a5c565b806001600160a01b0316637ff36ab547846116e5600060029054906101000a90046001600160a01b031688612536565b30426040518663ffffffff1660e01b81526004016117069493929190615078565b60006040518083038185885af1158015611724573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261174d91908101906150ad565b50611a5c565b6000546001600160a01b03858116620100009092041614801561177d57506001600160a01b038316155b15611854576001546000546040516370a0823160e01b81523060048201526001600160a01b0392831692632e1a7d4d9262010000900416906370a0823190602401602060405180830381865afa1580156117db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ff9190614a88565b6040518263ffffffff1660e01b815260040161181d91815260200190565b600060405180830381600087803b15801561183757600080fd5b505af115801561184b573d6000803e3d6000fd5b50505050611a5c565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c19190614a88565b90506118ce8284836122bd565b6001600160a01b03851661197b57826001600160a01b03166318cbafe5828661190c8a600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b815260040161192e959493929190615132565b6000604051808303816000875af115801561194d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261197591908101906150ad565b506108a4565b6000546001600160a01b03808516916338ed173991849188918b8116620100009092041614806119be57506000546001600160a01b038a81166201000090920416145b6119e5576000546119e0908b906201000090046001600160a01b03168b6125c3565b6119ef565b6119ef8a8a612536565b30426040518663ffffffff1660e01b8152600401611a11959493929190615132565b6000604051808303816000875af1158015611a30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a5891908101906150ad565b5050505b50505050565b6000806001600160a01b038416611b9657504782811015611ad95760405162461bcd60e51b815260206004820152602b60248201527f4d696e696d756d204e4154495645206f757470757420616d6f756e74206e6f7460448201526a1039b0ba34b9b334b2b21760a91b6064820152608401610115565b8015611b9157604051600090339083908381818185875af1925050503d8060008114611b21576040519150601f19603f3d011682016040523d82523d6000602084013e611b26565b606091505b5050905080611b8f5760405162461bcd60e51b815260206004820152602f60248201527f4661696c656420746f207472616e73666572206f7574707574204e415449564560448201526e103a379036b9b39739b2b73232b91760891b6064820152608401610115565b505b611c80565b6040516370a0823160e01b815230600482015284906001600160a01b038216906370a0823190602401602060405180830381865afa158015611bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c009190614a88565b915083821015611c645760405162461bcd60e51b815260206004820152602960248201527f4d696e696d756d20746f6b656e206f757470757420616d6f756e74206e6f742060448201526839b0ba34b334b2b21760b91b6064820152608401610115565b8115611c7e57611c7e6001600160a01b0382163384612686565b505b9392505050565b600154604051632e1a7d4d60e01b8152600481018b90526000916001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611cce57600080fd5b505af1158015611ce2573d6000803e3d6000fd5b5050604051635572051560e11b81526001600160a01b038e811660048301528b811660248301528c16925063aae40a2a91508c906044016000604051808303818588803b158015611d3257600080fd5b505af1158015611d46573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093506001600160a01b038c1692506370a082319150602401602060405180830381865afa158015611d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db69190614a88565b905060008111611dfd5760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b6044820152606401610115565b60405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015611e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6b9190614a88565b90508015611e8b5760405162461bcd60e51b815260040161011590614aa1565b6115ed8c8b8a8a8a8a8a6126bb565b6000808a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eff9190614aff565b9050611f0c818c8e6122bd565b604051637af1e23160e11b81526001600160a01b038e81166004830152602482018e90528b811660448301528c169063f5e3c462906064016020604051808303816000875af1158015611f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f879190614a88565b15611fca5760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b6044820152606401610115565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a0823190602401602060405180830381865afa158015612011573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120359190614a88565b90506000811161207c5760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b6044820152606401610115565b60405163db006a7560e01b8152600481018290526000906001600160a01b038d169063db006a75906024016020604051808303816000875af11580156120c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ea9190614a88565b9050801561210a5760405162461bcd60e51b815260040161011590614aa1565b61211b8e8d8c8c8c8c8c8c8b612ef5565b9f9e505050505050505050505050505050565b60006001600160a01b0384166121ca5760075461216a906001600160a01b031685612159858761516e565b6006546001600160a01b03166115fe565b81156121b95760405141908390600081818185875af1925050503d80600081146121b0576040519150601f19603f3d011682016040523d82523d6000602084013e6121b5565b606091505b5050505b6121c38484611a62565b9050611c80565b8115612237576007546006546121ee916001600160a01b03908116918591166138c3565b60405141908390600081818185875af1925050503d806000811461222e576040519150601f19603f3d011682016040523d82523d6000602084013e612233565b606091505b5050505b6007546121b9906001600160a01b031685612159858761516e565b6040516001600160a01b0380851660248301528316604482015260648101829052611a5c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613a5f565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801561230d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123319190614a88565b905081811015611a5c578015612356576123566001600160a01b038516846000613b31565b611a5c6001600160a01b03851684600019613b31565b60606001600160a01b0383163b6123d45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610115565b600080846001600160a01b0316846040516123ef9190615186565b600060405180830381855af49150503d806000811461242a576040519150601f19603f3d011682016040523d82523d6000602084013e61242f565b606091505b5091509150612457828260405180606001604052806027815260200161530b60279139613c46565b95945050505050565b6040516001600160a01b03821660248201526124a89060440160408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b179052613c7f565b50565b60008060006124ba8686613ca0565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152919350915087906048016040516020818303038152906040528051906020012085604051602001612513939291906151a2565b60408051601f198184030181529190528051602090910120979650505050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050838160008151811061256f5761256f614b9f565b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106125a3576125a3614b9f565b6001600160a01b0390921660209283029190910190910152905092915050565b604080516003808252608082019092526060916000919060208201848036833701905050905084816000815181106125fd576125fd614b9f565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061263157612631614b9f565b60200260200101906001600160a01b031690816001600160a01b031681525050828160028151811061266557612665614b9f565b6001600160a01b039092166020928302919091019091015290509392505050565b6040516001600160a01b0383166024820152604481018290526126b690849063a9059cbb60e01b90606401612286565b505050565b600080876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127209190614aff565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561276a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278e9190614a88565b85519091501561280f5783518551146127b95760405162461bcd60e51b815260040161011590614b1c565b60005b855181101561280d576127f683838884815181106127dc576127dc614b9f565b602002602001015188858151811061110057611100614b9f565b90935091508061280581614c84565b9150506127bc565b505b6002546001600160a01b0387811691161480156128fa5750886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128899190614aff565b6001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b0316146128cf5773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486128e5565b732260fac5e5542a773aa44fbcfedf7c193bc2c5995b6001600160a01b0316826001600160a01b0316145b15612b0657600061298b876001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129669190614aff565b8c61298686600060029054906101000a90046001600160a01b0316612536565b613d96565b60008151811061299d5761299d614b9f565b6020026020010151905081811115612a1d5760405162461bcd60e51b815260206004820152603760248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e207365697a656420636f6c6c61746572616c2e0000000000000000006064820152608401610115565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015612a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8e9190614ce6565b612b005760405162461bcd60e51b815260206004820152603b60248201527f4661696c656420746f207472616e73666572206e6f6e2d575f4e41544956452060448201527f746f6b656e73206261636b20746f20666c6173686c656e6465722e00000000006064820152608401610115565b50612ee8565b6000546001600160a01b03838116620100009092041614612d10576001600160a01b038216612b9d57600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b158015612b7f57600080fd5b505af1158015612b93573d6000803e3d6000fd5b5050505050612d10565b612ba88287836122bd565b816001600160a01b0316886001600160a01b03161415612c6157856001600160a01b0316638803dbee8883612bf286600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b8152600401612c14959493929190615132565b6000604051808303816000875af1158015612c33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c5b91908101906150ad565b50612d10565b856001600160a01b03166338ed17398289612c9186600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b8152600401612cb3959493929190615132565b6000604051808303816000875af1158015612cd2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cfa91908101906150ad565b506000546201000090046001600160a01b031691505b6000546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015612d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d819190614a88565b871115612e0e5760405162461bcd60e51b815260206004820152604f60248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e20575f4e41544956452065786368616e6765642066726f6d2073656960648201526e3d32b21031b7b63630ba32b930b61760891b608482015260a401610115565b60015460405163a9059cbb60e01b8152336004820152602481018990526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e839190614ce6565b612ee85760405162461bcd60e51b815260206004820152603060248201527f4661696c656420746f207472616e7366657220575f4e4154495645206261636b60448201526f103a3790333630b9b43632b73232b91760811b6064820152608401610115565b5098975050505050505050565b6000886001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f599190614ce6565b156131805760004790506000612fe8886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fca9190614aff565b6000548e90612986906201000090046001600160a01b031688612536565b600081518110612ffa57612ffa614b9f565b602002602001015190508181111561307a5760405162461bcd60e51b815260206004820152603760248201527f5365697a6564204e415449564520636f6c6c61746572616c206e6f7420656e6f60448201527f75676820746f20726570617920666c6173686c6f616e2e0000000000000000006064820152608401610115565b600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156130ca57600080fd5b505af11580156130de573d6000803e3d6000fd5b505060015460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b03909116935063a9059cbb925060440190506020604051808303816000875af1158015613135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131599190614ce6565b6131755760405162461bcd60e51b8152600401610115906151eb565b60009250505061068b565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e49190614aff565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561322e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132529190614a88565b8651909150156132d357845186511461327d5760405162461bcd60e51b815260040161011590614b1c565b60005b86518110156132d1576132ba83838984815181106132a0576132a0614b9f565b602002602001015189858151811061110057611100614b9f565b9093509150806132c981614c84565b915050613280565b505b836001600160a01b0316826001600160a01b031614156134d1576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015613331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133559190614a88565b8911156133e65760405162461bcd60e51b815260206004820152605360248201527f546f6b656e20666c6173686c6f616e2072657475726e20616d6f756e7420677260448201527f6561746572207468616e20746f6b656e732065786368616e6765642066726f6d6064820152721039b2b4bd32b21031b7b63630ba32b930b61760691b608482015260a401610115565b60405163a9059cbb60e01b8152336004820152602481018a90526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015613433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134579190614ce6565b6134c95760405162461bcd60e51b815260206004820152603e60248201527f4661696c656420746f20726570617920746f6b656e20666c6173686c6f616e2060448201527f6f6e20626f72726f7720286e6f6e2d575f4e41544956452920736964652e00006064820152608401610115565b50905061068b565b6000613556896001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015613514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135389190614aff565b6000548f90612986906201000090046001600160a01b031689612536565b60008151811061356857613568614b9f565b60200260200101519050600060029054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b0316146136ff576135ab8389846122bd565b826001600160a01b03168b6001600160a01b0316141561366457876001600160a01b0316638803dbee82846135f587600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b8152600401613617959493929190615132565b6000604051808303816000875af1158015613636573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261365e91908101906150ad565b506136ff565b876001600160a01b03166338ed1739838361369487600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b81526004016136b6959493929190615132565b6000604051808303816000875af11580156136d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136fd91908101906150ad565b505b6000546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa15801561374c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137709190614a88565b8111156137f65760405162461bcd60e51b815260206004820152604860248201527f4e6f7420656e6f75676820575f4e41544956452065786368616e67656420667260448201527f6f6d207365697a656420636f6c6c61746572616c20746f20726570617920666c60648201526730b9b43637b0b71760c11b608482015260a401610115565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015613847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386b9190614ce6565b6138875760405162461bcd60e51b8152600401610115906151eb565b826001600160a01b03168b6001600160a01b0316146138b7576000546201000090046001600160a01b03166138b9565b825b935050505061068b565b6001600160a01b0383166138d657505050565b6000546001600160a01b038481166201000090920416141561394c57600154604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561393857600080fd5b505af1158015611a58573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015283906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b99190614a88565b90506139c68284836122bd565b826001600160a01b0316634a25d94a85836139f689600060029054906101000a90046001600160a01b0316612536565b30426040518663ffffffff1660e01b8152600401613a18959493929190615132565b6000604051808303816000875af1158015613a37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a491908101906150ad565b6000613ab4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f239092919063ffffffff16565b8051909150156126b65780806020019051810190613ad29190614ce6565b6126b65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610115565b801580613bab5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015613b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba99190614a88565b155b613c165760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610115565b6040516001600160a01b0383166024820152604481018290526126b690849063095ea7b360e01b90606401612286565b60608315613c55575081611c80565b825115613c655782518084602001fd5b8160405162461bcd60e51b81526004016101159190615262565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080826001600160a01b0316846001600160a01b03161415613d115760405162461bcd60e51b815260206004820152602360248201527f50616e63616b654c6962726172793a204944454e544943414c5f41444452455360448201526253455360e81b6064820152608401610115565b826001600160a01b0316846001600160a01b031610613d31578284613d34565b83835b90925090506001600160a01b038216613d8f5760405162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a205a45524f5f41444452455353000000006044820152606401610115565b9250929050565b6060600282511015613dea5760405162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a20494e56414c49445f50415448000000006044820152606401610115565b81516001600160401b03811115613e0357613e03614380565b604051908082528060200260200182016040528015613e2c578160200160208202803683370190505b509050828160018351613e3f9190615275565b81518110613e4f57613e4f614b9f565b602002602001018181525050600060018351613e6b9190615275565b90505b8015611c7e57600080613ebe8786613e87600187615275565b81518110613e9757613e97614b9f565b6020026020010151878681518110613eb157613eb1614b9f565b6020026020010151613f3a565b91509150613ee6848481518110613ed757613ed7614b9f565b6020026020010151838361406f565b84613ef2600186615275565b81518110613f0257613f02614b9f565b60200260200101818152505050508080613f1b9061528c565b915050613e6e565b6060613f328484600085614191565b949350505050565b6000806000613f498585613ca0565b5060405163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291925060009182919089169063e6a4390590604401602060405180830381865afa158015613fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc59190614aff565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015614002573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402691906152ba565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461405d578082614060565b81815b90999098509650505050505050565b60008084116140d35760405162461bcd60e51b815260206004820152602a60248201527f50616e63616b654c6962726172793a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b6064820152608401610115565b6000831180156140e35750600082115b61413e5760405162461bcd60e51b815260206004820152602660248201527f50616e63616b654c6962726172793a20494e53554646494349454e545f4c495160448201526555494449545960d01b6064820152608401610115565b600061414a8585614e06565b614156906103e8614e06565b905060006141648685615275565b614170906103e5614e06565b905061417c8183614e3b565b61418790600161516e565b9695505050505050565b6060824710156141f25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610115565b6001600160a01b0385163b6142495760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610115565b600080866001600160a01b031685876040516142659190615186565b60006040518083038185875af1925050503d80600081146142a2576040519150601f19603f3d011682016040523d82523d6000602084013e6142a7565b606091505b50915091506142b7828286613c46565b979650505050505050565b8280546142ce90614ff9565b90600052602060002090601f0160209004810192826142f05760008555614336565b82601f1061430957805160ff1916838001178555614336565b82800160010185558215614336579182015b8281111561433657825182559160200191906001019061431b565b50614342929150614346565b5090565b5b808211156143425760008155600101614347565b6001600160a01b03811681146124a857600080fd5b803561437b8161435b565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156143be576143be614380565b604052919050565b60006001600160401b038211156143df576143df614380565b5060051b60200190565b600082601f8301126143fa57600080fd5b8135602061440f61440a836143c6565b614396565b82815260059290921b8401810191818101908684111561442e57600080fd5b8286015b848110156144525780356144458161435b565b8352918301918301614432565b509695505050505050565b600082601f83011261446e57600080fd5b81356001600160401b0381111561448757614487614380565b61449a601f8201601f1916602001614396565b8181528460208386010111156144af57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126144dd57600080fd5b813560206144ed61440a836143c6565b82815260059290921b8401810191818101908684111561450c57600080fd5b8286015b848110156144525780356001600160401b0381111561452f5760008081fd5b61453d8986838b010161445d565b845250918301918301614510565b600080600080600080600080610100898b03121561456857600080fd5b88356145738161435b565b975060208901356145838161435b565b965060408901356145938161435b565b95506060890135945060808901356145aa8161435b565b935060a08901356145ba8161435b565b925060c08901356001600160401b03808211156145d657600080fd5b6145e28c838d016143e9565b935060e08b01359150808211156145f857600080fd5b506146058b828c016144cc565b9150509295985092959890939650565b60008060008060006080868803121561462d57600080fd5b85356146388161435b565b9450602086013593506040860135925060608601356001600160401b038082111561466257600080fd5b818801915088601f83011261467657600080fd5b81358181111561468557600080fd5b89602082850101111561469757600080fd5b9699959850939650602001949392505050565b600080600080600060a086880312156146c257600080fd5b85356146cd8161435b565b945060208601356146dd8161435b565b935060408601356146ed8161435b565b925060608601356146fd8161435b565b915060808601356001600160401b0381111561471857600080fd5b6147248882890161445d565b9150509295509295909350565b60008060008060008060008060008060006101608c8e03121561475357600080fd5b61475c8c614370565b9a5060208c0135995061477160408d01614370565b985061477f60608d01614370565b975060808c0135965061479460a08d01614370565b95506147a260c08d01614370565b94506147b060e08d01614370565b93506001600160401b03806101008e013511156147cc57600080fd5b6147dd8e6101008f01358f016143e9565b9350806101208e013511156147f157600080fd5b506148038d6101208e01358e016144cc565b91506101408c013590509295989b509295989b9093969950565b60008060008060008060008060006101208a8c03121561483c57600080fd5b89356148478161435b565b985060208a0135975060408a013561485e8161435b565b965061486c60608b01614370565b955060808a0135945061488160a08b01614370565b935061488f60c08b01614370565b925060e08a01356001600160401b03808211156148ab57600080fd5b6148b78d838e016143e9565b93506101008c01359150808211156148ce57600080fd5b506148db8c828d016144cc565b9150509295985092959850929598565b6000806000806080858703121561490157600080fd5b843561490c8161435b565b93506020850135925060408501356149238161435b565b915060608501356001600160401b0381111561493e57600080fd5b61494a8782880161445d565b91505092959194509250565b6000806000806000806000806000806101408b8d03121561497657600080fd5b61497f8b614370565b995060208b0135985061499460408c01614370565b97506149a260608c01614370565b965060808b013595506149b760a08c01614370565b94506149c560c08c01614370565b935060e08b01356001600160401b03808211156149e157600080fd5b6149ed8e838f016143e9565b94506101008d0135915080821115614a0457600080fd5b50614a118d828e016144cc565b9250506101208b013590509295989b9194979a5092959850565b60208082526038908201527f526570617920616d6f756e7420287472616e73616374696f6e2076616c75652960408201527f206d7573742062652067726561746572207468616e20302e0000000000000000606082015260800190565b600060208284031215614a9a57600080fd5b5051919050565b602080825260409082018190527f4572726f722063616c6c696e672072656465656d696e67207365697a65642063908201527f546f6b656e3a206572726f7220636f6465206e6f7420657175616c20746f2030606082015260800190565b600060208284031215614b1157600080fd5b8151611c808161435b565b6020808252605b908201527f49526564656d7074696f6e537472617465677920636f6e74726163742061727260408201527f617920616e64207374726174656779206461746120627974657320617272617960608201527f206d6e75737420746865207468652073616d65206c656e6774682e0000000000608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b60005b83811015614bd0578181015183820152602001614bb8565b83811115611a5c5750506000910152565b60008151808452614bf9816020860160208601614bb5565b601f01601f19169290920160200192915050565b6001600160a01b038581168252602082018590528316604082015260806060820181905260009061418790830184614be1565b60008060408385031215614c5357600080fd5b8251614c5e8161435b565b6020939093015192949293505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415614c9857614c98614c6e565b5060010190565b60008085851115614caf57600080fd5b83861115614cbc57600080fd5b5050820193919092039150565b600060208284031215614cdb57600080fd5b8135611c808161435b565b600060208284031215614cf857600080fd5b81518015158114611c8057600080fd5b600082601f830112614d1957600080fd5b81356020614d2961440a836143c6565b82815260059290921b84018101918181019086841115614d4857600080fd5b8286015b84811015614452578035614d5f8161435b565b8352918301918301614d4c565b60008060008060008060008060006101208a8c031215614d8b57600080fd5b8935614d968161435b565b985060208a0135975060408a0135614dad8161435b565b9650614dbb60608b01614370565b955060808a01359450614dd060a08b01614370565b9350614dde60c08b01614370565b925060e08a01356001600160401b0380821115614dfa57600080fd5b6148b78d838e01614d08565b6000816000190483118215151615614e2057614e20614c6e565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614e4a57614e4a614e25565b500490565b600082614e5e57614e5e614e25565b500690565b6000806000806000806000806000806101408b8d031215614e8357600080fd5b614e8c8b614370565b995060208b01359850614ea160408c01614370565b9750614eaf60608c01614370565b965060808b01359550614ec460a08c01614370565b9450614ed260c08c01614370565b9350614ee060e08c01614370565b92506101008b01356001600160401b0380821115614efd57600080fd5b614f098e838f01614d08565b93506101208d0135915080821115614f2057600080fd5b50614f2d8d828e016144cc565b9150509295989b9194979a5092959850565b60208082526024908201527f526570617920616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b858152602081018590526001600160a01b03841660408201526080606082018190528101829052818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60018060a01b03841681528260208201526060604082015260006124576060830184614be1565b600181811c9082168061500d57607f821691505b6020821081141561502e57634e487b7160e01b600052602260045260246000fd5b50919050565b600081518084526020808501945080840160005b8381101561506d5781516001600160a01b031687529582019590820190600101615048565b509495945050505050565b8481526080602082015260006150916080830186615034565b6001600160a01b03949094166040830152506060015292915050565b600060208083850312156150c057600080fd5b82516001600160401b038111156150d657600080fd5b8301601f810185136150e757600080fd5b80516150f561440a826143c6565b81815260059190911b8201830190838101908783111561511457600080fd5b928401925b828410156142b757835182529284019290840190615119565b85815284602082015260a06040820152600061515160a0830186615034565b6001600160a01b0394909416606083015250608001529392505050565b6000821982111561518157615181614c6e565b500190565b60008251615198818460208701614bb5565b9190910192915050565b60ff60f81b81526bffffffffffffffffffffffff198460601b166001820152826015820152600082516151dc816035850160208701614bb5565b91909101603501949350505050565b60208082526051908201527f4661696c656420746f20726570617920556e697377617020666c6173686c6f6160408201527f6e207769746820575f4e41544956452065786368616e6765642066726f6d207360608201527032b4bd32b21031b7b63630ba32b930b61760791b608082015260a00190565b602081526000611c806020830184614be1565b60008282101561528757615287614c6e565b500390565b60008161529b5761529b614c6e565b506000190190565b80516001600160701b038116811461437b57600080fd5b6000806000606084860312156152cf57600080fd5b6152d8846152a3565b92506152e6602085016152a3565b9150604084015163ffffffff811681146152ff57600080fd5b80915050925092509256fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122094d596df1f8a8eeee56959a5abd7ebb237d6bea6cde2770bf54b4b464f98672364736f6c634300080b0033",
  "implementation": "0x51292114d9A05E29641D68F0be979cb492C5388A",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "details": "Do not transfer NATIVE or tokens directly to this address. Only send NATIVE here when using a method, and only approve tokens for transfer to here when using a method. Direct NATIVE transfers will be rejected and direct token transfers will be lost.",
    "kind": "dev",
    "methods": {
      "redeemCustomCollateral(address,uint256,address,bytes)": {
        "details": "Redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap). Public visibility because we have to call this function externally if called from a payable FuseSafeLiquidator function (for some reason delegatecall fails when called with msg.value > 0)."
      },
      "safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20Collateral": "The cErc20 collateral contract to be liquidated.",
          "cEther": "The borrowed cEther contract to repay.",
          "exchangeSeizedTo": "If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).",
          "minOutputAmount": "The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2Router": "The UniswapV2Router to use to convert the seized underlying collateral."
        }
      },
      "safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20": "The borrowed cErc20 to repay.",
          "cTokenCollateral": "The cToken collateral to be liquidated.",
          "exchangeSeizedTo": "If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).",
          "minOutputAmount": "The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "repayAmount": "The amount to repay to liquidate the unhealthy loan.",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2Router": "The UniswapV2Router to use to convert the seized underlying collateral."
        }
      },
      "safeLiquidateToEthWithFlashLoan(address,uint256,address,address,uint256,address,address,address[],bytes[],uint256)": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20Collateral": "The CErc20 collateral contract to be liquidated.",
          "cEther": "The borrowed CEther contract to repay.",
          "exchangeProfitTo": "If set to an address other than `cErc20Collateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).",
          "minProfitAmount": "The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "repayAmount": "The NATIVE amount to repay to liquidate the unhealthy loan.",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2RouterForCollateral": "The UniswapV2Router to use to convert the underlying collateral to NATIVE."
        }
      },
      "safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20": "The borrowed CErc20 contract to repay.",
          "cTokenCollateral": "The cToken collateral contract to be liquidated.",
          "exchangeProfitTo": "If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for NATIVE).",
          "minProfitAmount": "The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "repayAmount": "The amount to repay to liquidate the unhealthy loan.",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2RouterForBorrow": "The UniswapV2Router to use to convert the NATIVE to the underlying borrow (and flashloan the underlying borrow for NATIVE).",
          "uniswapV2RouterForCollateral": "The UniswapV2Router to use to convert the underlying collateral to NATIVE."
        }
      },
      "uniswapV2Call(address,uint256,uint256,bytes)": {
        "details": "Callback function for Uniswap flashloans."
      }
    },
    "stateVariables": {
      "BTC_TOKEN": {
        "details": "Wrapped BTC token to use for flash loans"
      },
      "PAIR_INIT_HASH_CODE": {
        "details": "Wrapped BTC token to use for flash loans"
      },
      "STABLE_TOKEN": {
        "details": "Stable token to use for flash loans"
      },
      "UNISWAP_V2_ROUTER_02": {
        "details": "UniswapV2Router02 contract object."
      },
      "UNISWAP_V2_ROUTER_02_ADDRESS": {
        "details": "UniswapV2Router02 contract address."
      },
      "W_NATIVE": {
        "details": "W_NATIVE contract object."
      },
      "W_NATIVE_ADDRESS": {
        "details": "W_NATIVE contract address."
      },
      "_liquidatorProfitExchangeSource": {
        "details": "Cached liquidator profit exchange source. ERC20 token address or the zero address for NATIVE. For use in `safeLiquidateToTokensWithFlashLoan`/`safeLiquidateToEthWithFlashLoan` after it is set by `postFlashLoanTokens`/`postFlashLoanWeth`."
      }
    },
    "title": "FuseSafeLiquidator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])": {
        "notice": "Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable)."
      },
      "safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])": {
        "notice": "Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable)."
      },
      "safeLiquidateToEthWithFlashLoan(address,uint256,address,address,uint256,address,address,address[],bytes[],uint256)": {
        "notice": "Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in NATIVE profit is seized."
      },
      "safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)": {
        "notice": "Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in NATIVE profit is seized."
      }
    },
    "notice": "FuseSafeLiquidator safely liquidates unhealthy borrowers (with flashloan support).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 210,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7289,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "W_NATIVE_ADDRESS",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7293,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "W_NATIVE",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IW_NATIVE)31718"
      },
      {
        "astId": 7296,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "UNISWAP_V2_ROUTER_02_ADDRESS",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7299,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "STABLE_TOKEN",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7302,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "BTC_TOKEN",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7305,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "PAIR_INIT_HASH_CODE",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      },
      {
        "astId": 7309,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "UNISWAP_V2_ROUTER_02",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IUniswapV2Router02)35614"
      },
      {
        "astId": 7312,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "_liquidatorProfitExchangeSource",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Router02)35614": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IW_NATIVE)31718": {
        "encoding": "inplace",
        "label": "contract IW_NATIVE",
        "numberOfBytes": "20"
      }
    }
  }
}