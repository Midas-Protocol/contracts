{
  "address": "0xB67c3C3E643f3237d97AB77EDFeEE6cC0B66FB57",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_fuseAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardsDistributor",
          "type": "address"
        }
      ],
      "name": "AddedRewardsDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "AutoImplementationsToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "MarketUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBorrowCapGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "NewBorrowCapGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "NewSupplyCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enforce",
          "type": "bool"
        }
      ],
      "name": "WhitelistEnforcementChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        }
      ],
      "name": "_addRewardsDistributor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_afterNonReentrant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Unitroller",
          "name": "unitroller",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_becomeImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_beforeNonReentrant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isCEther",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "constructorData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_deployMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "_setBorrowCapGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setBorrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketSupplyCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setMintPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setSeizePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setTransferPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enforce",
          "type": "bool"
        }
      ],
      "name": "_setWhitelistEnforcement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "suppliers",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        }
      ],
      "name": "_setWhitelistStatuses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "_toggleAutoImplementations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "_unsupportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminHasRights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allBorrowers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "accountBorrowsNew",
          "type": "uint256"
        }
      ],
      "name": "borrowWithinLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokensByUnderlying",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enforceWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fuseAdmin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fuseAdminHasRights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBorrowers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenModify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getHypotheticalAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsDistributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "isDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "mintVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exchangeRateMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accountTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintWithinLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowerIndex",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardsDistributors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seizeGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "suppliers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xde7f63bc9287a16286f704fb36859e95b816c917ad713df34ecf4695fbb3c1c1",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "5155426",
    "logsBloom": "0x
    "blockHash": "0xac619823b0721cd494cfbf922d41f01eb832dd2a8c9c634fed0a54d6db0edcd0",
    "transactionHash": "0xde7f63bc9287a16286f704fb36859e95b816c917ad713df34ecf4695fbb3c1c1",
    "logs": [],
    "blockNumber": 327240,
    "cumulativeGasUsed": "5155426",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf05DFB925280127614FfcFE765f9a6BB0BFfE5E5"
  ],
  "numDeployments": 4,
  "solcInputHash": "614790565b8c7986374ea2a0c06a77bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_fuseAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardsDistributor\",\"type\":\"address\"}],\"name\":\"AddedRewardsDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AutoImplementationsToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"NewBorrowCapGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"NewSupplyCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enforce\",\"type\":\"bool\"}],\"name\":\"WhitelistEnforcementChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"_addRewardsDistributor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_afterNonReentrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_becomeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beforeNonReentrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCEther\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"constructorData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_deployMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enforce\",\"type\":\"bool\"}],\"name\":\"_setWhitelistEnforcement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"suppliers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"_setWhitelistStatuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_toggleAutoImplementations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_unsupportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminHasRights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBorrowers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountBorrowsNew\",\"type\":\"uint256\"}],\"name\":\"borrowWithinLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokensByUnderlying\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enforceWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuseAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuseAdminHasRights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBorrowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"isDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"mintVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintWithinLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsDistributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"suppliers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"details\":\"This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\",\"kind\":\"dev\",\"methods\":{\"_addRewardsDistributor(address)\":{\"details\":\"Admin function to add a RewardsDistributor contract\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_afterNonReentrant()\":{\"details\":\"Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention. Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\"},\"_beforeNonReentrant()\":{\"details\":\"Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention. Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\"},\"_deployMarket(bool,bytes,uint256)\":{\"details\":\"Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_setBorrowCapGuardian(address)\":{\"params\":{\"newBorrowCapGuardian\":\"The address of the new Borrow Cap Guardian\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Admin function to set per-market collateralFactor\",\"params\":{\"cToken\":\"The market to set the factor on\",\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"_setMarketSupplyCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the supply caps for\",\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\"}},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setWhitelistEnforcement(bool)\":{\"details\":\"Admin function to set a new whitelist enforcement boolean\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setWhitelistStatuses(address[],bool[])\":{\"details\":\"Admin function to set the whitelist `statuses` for `suppliers`\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_toggleAutoImplementations(bool)\":{\"params\":{\"enabled\":\"If the feature is to be enabled\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_unsupportMarket(address)\":{\"details\":\"Admin function unset isListed and collateralFactorMantissa and unadd support for the market\",\"params\":{\"cToken\":\"The address of the market (token) to unlist\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"cToken\":\"The market to verify the borrow against\"},\"returns\":{\"_0\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"borrowVerify(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset requested to borrow\",\"borrower\":\"The address borrowing the underlying\",\"cToken\":\"Asset whose underlying is being borrowed\"}},\"borrowWithinLimits(address,uint256)\":{\"params\":{\"accountBorrowsNew\":\"The user's new borrow balance of the underlying asset\",\"cToken\":\"Asset whose underlying is being borrowed\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"cToken\":\"The cToken to check\"},\"returns\":{\"_0\":\"True if the account is in the asset, otherwise false.\"}},\"enterMarkets(address[])\":{\"params\":{\"cTokens\":\"The list of addresses of the cToken markets to be enabled\"},\"returns\":{\"_0\":\"Success indicator for whether each corresponding market was entered\"}},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset,  or be providing neccessary collateral for an outstanding borrow.\",\"params\":{\"cTokenAddress\":\"The address of the asset to be removed\"},\"returns\":{\"_0\":\"Whether or not the account successfully exited the market\"}},\"getAccountLiquidity(address)\":{\"returns\":{\"_0\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)\"}},\"getAllBorrowers()\":{\"details\":\"The automatic getter may be used to access an individual borrower.\",\"returns\":{\"_0\":\"The list of borrower account addresses\"}},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"returns\":{\"_0\":\"The list of market addresses\"}},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"returns\":{\"_0\":\"A dynamic list with the assets the account has entered\"}},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"cTokenModify\":\"The market to hypothetically redeem/borrow in\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\"},\"returns\":{\"_0\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)\"}},\"getWhitelist()\":{\"details\":\"The automatic getter may be used to access an individual whitelist status.\",\"returns\":{\"_0\":\"The list of borrower account addresses\"}},\"isDeprecated(address)\":{\"details\":\"All borrows in a deprecated cToken market can be immediately liquidated\",\"params\":{\"cToken\":\"The market to check if deprecated\"}},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\"}},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\"}},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"details\":\"Used in liquidation (called in cToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\",\"cTokenBorrowed\":\"The address of the borrowed cToken\",\"cTokenCollateral\":\"The address of the collateral cToken\"},\"returns\":{\"_0\":\"(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\"}},\"mintAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the mint against\",\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\"},\"returns\":{\"_0\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"mintVerify(address,address,uint256,uint256)\":{\"params\":{\"actualMintAmount\":\"The amount of the underlying asset being minted\",\"cToken\":\"Asset being minted\",\"mintTokens\":\"The number of tokens being minted\",\"minter\":\"The address minting the tokens\"}},\"mintWithinLimits(address,uint256,uint256,uint256)\":{\"params\":{\"accountTokens\":\"Underlying amount to mint\",\"cToken\":\"Asset whose underlying is being borrowed\",\"exchangeRateMantissa\":\"Underlying/cToken exchange rate\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the redeem against\",\"redeemTokens\":\"The number of cTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\"},\"returns\":{\"_0\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"cToken\":\"Asset being redeemed\",\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which would borrowed the asset\",\"cToken\":\"The market to verify the repay against\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\"},\"returns\":{\"_0\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cToken\":\"Asset being repaid\",\"payer\":\"The address repaying the borrow\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"seizeVerify(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the transfer against\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"},\"returns\":{\"_0\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"transferVerify(address,address,address,uint256)\":{\"params\":{\"cToken\":\"Asset being transferred\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"}}},\"title\":\"Compound's Comptroller Contract\",\"version\":1},\"userdoc\":{\"events\":{\"ActionPaused(address,string,bool)\":{\"notice\":\"Emitted when an action is paused on a market\"},\"ActionPaused(string,bool)\":{\"notice\":\"Emitted when an action is paused globally\"},\"AddedRewardsDistributor(address)\":{\"notice\":\"Emitted when a new RewardsDistributor contract is added to hooks\"},\"AutoImplementationsToggled(bool)\":{\"notice\":\"Emitted when auto implementations are toggled\"},\"MarketEntered(address,address)\":{\"notice\":\"Emitted when an account enters a market\"},\"MarketExited(address,address)\":{\"notice\":\"Emitted when an account exits a market\"},\"MarketListed(address)\":{\"notice\":\"Emitted when an admin supports a market\"},\"MarketUnlisted(address)\":{\"notice\":\"Emitted when an admin unsupports a market\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Emitted when borrow cap for a cToken is changed\"},\"NewBorrowCapGuardian(address,address)\":{\"notice\":\"Emitted when borrow cap guardian is changed\"},\"NewCloseFactor(uint256,uint256)\":{\"notice\":\"Emitted when close factor is changed by admin\"},\"NewCollateralFactor(address,uint256,uint256)\":{\"notice\":\"Emitted when a collateral factor is changed by admin\"},\"NewLiquidationIncentive(uint256,uint256)\":{\"notice\":\"Emitted when liquidation incentive is changed by admin\"},\"NewPauseGuardian(address,address)\":{\"notice\":\"Emitted when pause guardian is changed\"},\"NewPriceOracle(address,address)\":{\"notice\":\"Emitted when price oracle is changed\"},\"NewSupplyCap(address,uint256)\":{\"notice\":\"Emitted when supply cap for a cToken is changed\"},\"WhitelistEnforcementChanged(bool)\":{\"notice\":\"Emitted when the whitelist enforcement is changed\"}},\"kind\":\"user\",\"methods\":{\"_addRewardsDistributor(address)\":{\"notice\":\"Add a RewardsDistributor contracts.\"},\"_deployMarket(bool,bytes,uint256)\":{\"notice\":\"Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\"},\"_setBorrowCapGuardian(address)\":{\"notice\":\"Admin function to change the Borrow Cap Guardian\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\"},\"_setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_setWhitelistEnforcement(bool)\":{\"notice\":\"Sets the whitelist enforcement for the comptroller\"},\"_setWhitelistStatuses(address[],bool[])\":{\"notice\":\"Sets the whitelist `statuses` for `suppliers`\"},\"_toggleAutoImplementations(bool)\":{\"notice\":\"Toggles the auto-implementation feature\"},\"_unsupportMarket(address)\":{\"notice\":\"Removed a market from the markets mapping and sets it as unlisted\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"adminHasRights()\":{\"notice\":\"Whether or not the admin has admin rights\"},\"allBorrowers(uint256)\":{\"notice\":\"A list of all borrowers who have entered markets\"},\"allMarkets(uint256)\":{\"notice\":\"A list of all markets\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"borrowCapGuardian()\":{\"notice\":\"The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\"},\"borrowCaps(address)\":{\"notice\":\"Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\"},\"borrowVerify(address,address,uint256)\":{\"notice\":\"Validates borrow and reverts on rejection. May emit logs.\"},\"borrowWithinLimits(address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"cTokensByUnderlying(address)\":{\"notice\":\"All cTokens addresses mapped by their underlying token addresses\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"enforceWhitelist()\":{\"notice\":\"Whether or not the supplier whitelist is enforced\"},\"enterMarkets(address[])\":{\"notice\":\"Add assets to be included in account liquidity calculation\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"fuseAdminHasRights()\":{\"notice\":\"Whether or not the Fuse admin has admin rights\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAllBorrowers()\":{\"notice\":\"Return all of the borrowers\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"getRewardsDistributors()\":{\"notice\":\"Returns an array of all RewardsDistributors\"},\"getWhitelist()\":{\"notice\":\"Return all of the whitelist\"},\"isComptroller()\":{\"notice\":\"Indicator that this is a Comptroller contract (for inspection)\"},\"isDeprecated(address)\":{\"notice\":\"Returns true if the given cToken market has been deprecated\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"notice\":\"Validates liquidateBorrow and reverts on rejection. May emit logs.\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"liquidationIncentiveMantissa()\":{\"notice\":\"Multiplier representing the discount on collateral that a liquidator receives\"},\"markets(address)\":{\"notice\":\"Official mapping of cTokens -> Market metadata\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"mintVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates mint and reverts on rejection. May emit logs.\"},\"mintWithinLimits(address,uint256,uint256,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pauseGuardian()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market.\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection. May emit logs.\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"notice\":\"Validates repayBorrow and reverts on rejection. May emit logs.\"},\"rewardsDistributors(uint256)\":{\"notice\":\"RewardsDistributor contracts to notify of flywheel changes.\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"seizeVerify(address,address,address,address,uint256)\":{\"notice\":\"Validates seize and reverts on rejection. May emit logs.\"},\"supplyCaps(address)\":{\"notice\":\"Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"},\"transferVerify(address,address,address,uint256)\":{\"notice\":\"Validates transfer and reverts on rejection. May emit logs.\"},\"whitelist(address)\":{\"notice\":\"Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\"},\"whitelistArray(uint256)\":{\"notice\":\"An array of all whitelisted accounts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compound/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/compound/CErc20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ninterface CompLike {\\n  function delegate(address delegatee) external;\\n}\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @dev This contract should not to be deployed on its own; instead, deploy `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).\\n * @author Compound\\n */\\ncontract CErc20 is CToken, CErc20Interface {\\n  /**\\n   * @notice Initialize the new money market\\n   * @param underlying_ The address of the underlying asset\\n   * @param comptroller_ The address of the Comptroller\\n   * @param fuseAdmin_ The FuseFeeDistributor contract address.\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param name_ ERC-20 name of this token\\n   * @param symbol_ ERC-20 symbol of this token\\n   */\\n  function initialize(\\n    address underlying_,\\n    ComptrollerInterface comptroller_,\\n    address payable fuseAdmin_,\\n    InterestRateModel interestRateModel_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 reserveFactorMantissa_,\\n    uint256 adminFeeMantissa_\\n  ) public {\\n    // CToken initialize does the bulk of the work\\n    uint256 initialExchangeRateMantissa_ = 0.2e18;\\n    uint8 decimals_ = EIP20Interface(underlying_).decimals();\\n    super.initialize(\\n      comptroller_,\\n      fuseAdmin_,\\n      interestRateModel_,\\n      initialExchangeRateMantissa_,\\n      name_,\\n      symbol_,\\n      decimals_,\\n      reserveFactorMantissa_,\\n      adminFeeMantissa_\\n    );\\n\\n    // Set underlying and sanity check it\\n    underlying = underlying_;\\n    EIP20Interface(underlying).totalSupply();\\n  }\\n\\n  /*** User Interface ***/\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function mint(uint256 mintAmount) external override returns (uint256) {\\n    (uint256 err, ) = mintInternal(mintAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeem(uint256 redeemTokens) external override returns (uint256) {\\n    return redeemInternal(redeemTokens);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to redeem\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlying(uint256 redeemAmount) external override returns (uint256) {\\n    return redeemUnderlyingInternal(redeemAmount);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrow(uint256 borrowAmount) external override returns (uint256) {\\n    return borrowInternal(borrowAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrow(uint256 repayAmount) external override returns (uint256) {\\n    (uint256 err, ) = repayBorrowInternal(repayAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external override returns (uint256) {\\n    (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external override returns (uint256) {\\n    (uint256 err, ) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\n    return err;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying tokens owned by this contract\\n   */\\n  function getCashPrior() internal view virtual override returns (uint256) {\\n    EIP20Interface token = EIP20Interface(underlying);\\n    return token.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n   *      This will revert due to insufficient balance or insufficient allowance.\\n   *      This function returns the actual amount received,\\n   *      which may be less than `amount` if there is a fee attached to the transfer.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual override returns (uint256) {\\n    uint256 balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n    _callOptionalReturn(\\n      abi.encodeWithSelector(EIP20NonStandardInterface(underlying).transferFrom.selector, from, address(this), amount),\\n      \\\"TOKEN_TRANSFER_IN_FAILED\\\"\\n    );\\n\\n    // Calculate the amount that was *actually* transferred\\n    uint256 balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n    require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n    return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n   *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n   *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n   *      it is >= amount, this should not revert in normal conditions.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferOut(address to, uint256 amount) internal virtual override {\\n    _callOptionalReturn(\\n      abi.encodeWithSelector(EIP20NonStandardInterface(underlying).transfer.selector, to, amount),\\n      \\\"TOKEN_TRANSFER_OUT_FAILED\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   * @param errorMessage The revert string to return on failure.\\n   */\\n  function _callOptionalReturn(bytes memory data, string memory errorMessage) internal {\\n    bytes memory returndata = _functionCall(underlying, data, errorMessage);\\n    if (returndata.length > 0) require(abi.decode(returndata, (bool)), errorMessage);\\n  }\\n\\n  /**\\n   * @notice Admin call to delegate the votes of the COMP-like underlying\\n   * @param compLikeDelegatee The address to delegate votes to\\n   * @dev CTokens whose underlying are not CompLike should revert here\\n   */\\n  function _delegateCompLikeTo(address compLikeDelegatee) external {\\n    require(hasAdminRights(), \\\"only the admin may set the comp-like delegate\\\");\\n    CompLike(underlying).delegate(compLikeDelegatee);\\n  }\\n}\\n\",\"keccak256\":\"0x3d5210cdf998dabdf1edb1a6306419045d0947fcf6a741ad8300140a32cc5629\",\"license\":\"UNLICENSED\"},\"contracts/compound/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\n    return\\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\\n      (msg.sender == address(fuseAdmin) && comptrollerStorage.fuseAdminHasRights());\\n  }\\n\\n  /**\\n   * @notice Initialize the money market\\n   * @param comptroller_ The address of the Comptroller\\n   * @param fuseAdmin_ The FuseFeeDistributor contract address.\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ EIP-20 name of this token\\n   * @param symbol_ EIP-20 symbol of this token\\n   * @param decimals_ EIP-20 decimal precision of this token\\n   */\\n  function initialize(\\n    ComptrollerInterface comptroller_,\\n    address payable fuseAdmin_,\\n    InterestRateModel interestRateModel_,\\n    uint256 initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_,\\n    uint256 reserveFactorMantissa_,\\n    uint256 adminFeeMantissa_\\n  ) public {\\n    require(msg.sender == fuseAdmin_, \\\"only Fuse admin may initialize the market\\\");\\n    require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n    fuseAdmin = fuseAdmin_;\\n\\n    // Set initial exchange rate\\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n    require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n    // Set the comptroller\\n    uint256 err = _setComptroller(comptroller_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n    accrualBlockNumber = getBlockNumber();\\n    borrowIndex = mantissaOne;\\n\\n    // Set the interest rate model (depends on block number / borrow index)\\n    err = _setInterestRateModelFresh(interestRateModel_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n\\n    // Set reserve factor\\n    err = _setReserveFactorFresh(reserveFactorMantissa_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting reserve factor failed\\\");\\n\\n    // Set admin fee\\n    err = _setAdminFeeFresh(adminFeeMantissa_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting admin fee failed\\\");\\n\\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n    _notEntered = true;\\n  }\\n\\n  /**\\n   * @dev Returns latest pending Fuse fee (to be set with `_setFuseFeeFresh`)\\n   */\\n  function getPendingFuseFeeFromAdmin() internal view returns (uint256) {\\n    return IFuseFeeDistributor(fuseAdmin).interestFeeRate();\\n  }\\n\\n  /**\\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n   * @dev Called by both `transfer` and `transferFrom` internally\\n   * @param spender The address of the account performing the transfer\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param tokens The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferTokens(\\n    address spender,\\n    address src,\\n    address dst,\\n    uint256 tokens\\n  ) internal returns (uint256) {\\n    /* Fail if transfer not allowed */\\n    uint256 allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Do not allow self-transfers */\\n    if (src == dst) {\\n      return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n    }\\n\\n    /* Get the allowance, infinite for the account owner */\\n    uint256 startingAllowance = 0;\\n    if (spender == src) {\\n      startingAllowance = type(uint256).max;\\n    } else {\\n      startingAllowance = transferAllowances[src][spender];\\n    }\\n\\n    /* Do the calculations, checking for {under,over}flow */\\n    MathError mathErr;\\n    uint256 allowanceNew;\\n    uint256 srcTokensNew;\\n    uint256 dstTokensNew;\\n\\n    (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n    }\\n\\n    (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n    }\\n\\n    (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    accountTokens[src] = srcTokensNew;\\n    accountTokens[dst] = dstTokensNew;\\n\\n    /* Eat some of the allowance (if necessary) */\\n    if (startingAllowance != type(uint256).max) {\\n      transferAllowances[src][spender] = allowanceNew;\\n    }\\n\\n    /* We emit a Transfer event */\\n    emit Transfer(src, dst, tokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external override nonReentrant(false) returns (bool) {\\n    return transferTokens(msg.sender, msg.sender, dst, amount) == uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external override nonReentrant(false) returns (bool) {\\n    return transferTokens(msg.sender, src, dst, amount) == uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    address src = msg.sender;\\n    transferAllowances[src][spender] = amount;\\n    emit Approval(src, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return transferAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice Get the token balance of the `owner`\\n   * @param owner The address of the account to query\\n   * @return The number of tokens owned by `owner`\\n   */\\n  function balanceOf(address owner) external view override returns (uint256) {\\n    return accountTokens[owner];\\n  }\\n\\n  /**\\n   * @notice Get the underlying balance of the `owner`\\n   * @dev This also accrues interest in a transaction\\n   * @param owner The address of the account to query\\n   * @return The amount of underlying owned by `owner`\\n   */\\n  function balanceOfUnderlying(address owner) external override returns (uint256) {\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n    (MathError mErr, uint256 balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n    require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n    return balance;\\n  }\\n\\n  /**\\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n   * @param account Address of the account to snapshot\\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 cTokenBalance = accountTokens[account];\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n\\n    MathError mErr;\\n\\n    (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n    if (mErr != MathError.NO_ERROR) {\\n      return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n    }\\n\\n    (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n    if (mErr != MathError.NO_ERROR) {\\n      return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n    }\\n\\n    return (uint256(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n  }\\n\\n  /**\\n   * @dev Function to simply retrieve block number\\n   *  This exists mainly for inheriting test contracts to stub this result.\\n   */\\n  function getBlockNumber() internal view returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block borrow interest rate for this cToken\\n   * @return The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view override returns (uint256) {\\n    return\\n      interestRateModel.getBorrowRate(\\n        getCashPrior(),\\n        totalBorrows,\\n        add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block supply interest rate for this cToken\\n   * @return The supply interest rate per block, scaled by 1e18\\n   */\\n  function supplyRatePerBlock() external view override returns (uint256) {\\n    return\\n      interestRateModel.getSupplyRate(\\n        getCashPrior(),\\n        totalBorrows,\\n        add_(totalReserves, add_(totalAdminFees, totalFuseFees)),\\n        reserveFactorMantissa + fuseFeeMantissa + adminFeeMantissa\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the current total borrows plus accrued interest\\n   * @return The total borrows with interest\\n   */\\n  function totalBorrowsCurrent() external override nonReentrant(false) returns (uint256) {\\n    require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    return totalBorrows;\\n  }\\n\\n  /**\\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n   * @param account The address whose balance should be calculated after updating borrowIndex\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceCurrent(address account) external override nonReentrant(false) returns (uint256) {\\n    require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    return borrowBalanceStored(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceStored(address account) public view override returns (uint256) {\\n    (MathError err, uint256 result) = borrowBalanceStoredInternal(account);\\n    require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return (error code, the calculated balance or 0 if error code is non-zero)\\n   */\\n  function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint256) {\\n    /* Note: we do not assert that the market is up to date */\\n    MathError mathErr;\\n    uint256 principalTimesIndex;\\n    uint256 result;\\n\\n    /* Get borrowBalance and borrowIndex */\\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n     */\\n    if (borrowSnapshot.principal == 0) {\\n      return (MathError.NO_ERROR, 0);\\n    }\\n\\n    /* Calculate new borrow balance using the interest index:\\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n     */\\n    (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return (mathErr, 0);\\n    }\\n\\n    (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return (mathErr, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, result);\\n  }\\n\\n  /**\\n   * @notice Accrue interest then return the up-to-date exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateCurrent() public override nonReentrant(false) returns (uint256) {\\n    require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    return exchangeRateStored();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() public view override returns (uint256) {\\n    (MathError err, uint256 result) = exchangeRateStoredInternal();\\n    require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return (error code, calculated exchange rate scaled by 1e18)\\n   */\\n  function exchangeRateStoredInternal() internal view returns (MathError, uint256) {\\n    uint256 _totalSupply = totalSupply;\\n    if (_totalSupply == 0) {\\n      /*\\n       * If there are no tokens minted:\\n       *  exchangeRate = initialExchangeRate\\n       */\\n      return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n    } else {\\n      /*\\n       * Otherwise:\\n       *  exchangeRate = (totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)) / totalSupply\\n       */\\n      uint256 totalCash = getCashPrior();\\n      uint256 cashPlusBorrowsMinusReserves;\\n      Exp memory exchangeRate;\\n      MathError mathErr;\\n\\n      (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\\n        totalCash,\\n        totalBorrows,\\n        add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n      );\\n      if (mathErr != MathError.NO_ERROR) {\\n        return (mathErr, 0);\\n      }\\n\\n      (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n      if (mathErr != MathError.NO_ERROR) {\\n        return (mathErr, 0);\\n      }\\n\\n      return (MathError.NO_ERROR, exchangeRate.mantissa);\\n    }\\n  }\\n\\n  /**\\n   * @notice Get cash balance of this cToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash() external view override returns (uint256) {\\n    return getCashPrior();\\n  }\\n\\n  /**\\n   * @notice Applies accrued interest to total borrows and reserves\\n   * @dev This calculates interest accrued from the last checkpointed block\\n   *   up to the current block and writes new checkpoint to storage.\\n   */\\n  function accrueInterest() public virtual override returns (uint256) {\\n    /* Remember the initial block number */\\n    uint256 currentBlockNumber = getBlockNumber();\\n\\n    /* Short-circuit accumulating 0 interest */\\n    if (accrualBlockNumber == currentBlockNumber) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    /* Read the previous values out of storage */\\n    uint256 cashPrior = getCashPrior();\\n\\n    /* Calculate the current borrow interest rate */\\n    uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\n      cashPrior,\\n      totalBorrows,\\n      add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n    );\\n    require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n    /* Calculate the number of blocks elapsed since the last accrual */\\n    (MathError mathErr, uint256 blockDelta) = subUInt(currentBlockNumber, accrualBlockNumber);\\n    require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n    return finishInterestAccrual(currentBlockNumber, cashPrior, borrowRateMantissa, blockDelta);\\n  }\\n\\n  /**\\n   * @dev Split off from `accrueInterest` to avoid \\\"stack too deep\\\" error\\\".\\n   */\\n  function finishInterestAccrual(\\n    uint256 currentBlockNumber,\\n    uint256 cashPrior,\\n    uint256 borrowRateMantissa,\\n    uint256 blockDelta\\n  ) private returns (uint256) {\\n    /*\\n     * Calculate the interest accumulated into borrows and reserves and the new index:\\n     *  simpleInterestFactor = borrowRate * blockDelta\\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n     *  totalFuseFeesNew = interestAccumulated * fuseFee + totalFuseFees\\n     *  totalAdminFeesNew = interestAccumulated * adminFee + totalAdminFees\\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n     */\\n\\n    Exp memory simpleInterestFactor = mul_(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n    uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, totalBorrows);\\n    uint256 totalBorrowsNew = add_(interestAccumulated, totalBorrows);\\n    uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\n      Exp({ mantissa: reserveFactorMantissa }),\\n      interestAccumulated,\\n      totalReserves\\n    );\\n    uint256 totalFuseFeesNew = mul_ScalarTruncateAddUInt(\\n      Exp({ mantissa: fuseFeeMantissa }),\\n      interestAccumulated,\\n      totalFuseFees\\n    );\\n    uint256 totalAdminFeesNew = mul_ScalarTruncateAddUInt(\\n      Exp({ mantissa: adminFeeMantissa }),\\n      interestAccumulated,\\n      totalAdminFees\\n    );\\n    uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndex, borrowIndex);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    accrualBlockNumber = currentBlockNumber;\\n    borrowIndex = borrowIndexNew;\\n    totalBorrows = totalBorrowsNew;\\n    totalReserves = totalReservesNew;\\n    totalFuseFees = totalFuseFeesNew;\\n    totalAdminFees = totalAdminFeesNew;\\n\\n    /* We emit an AccrueInterest event */\\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n   */\\n  function mintInternal(uint256 mintAmount) internal nonReentrant(false) returns (uint256, uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n    }\\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n    return mintFresh(msg.sender, mintAmount);\\n  }\\n\\n  struct MintLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 exchangeRateMantissa;\\n    uint256 mintTokens;\\n    uint256 totalSupplyNew;\\n    uint256 accountTokensNew;\\n    uint256 actualMintAmount;\\n  }\\n\\n  /**\\n   * @notice User supplies assets into the market and receives cTokens in exchange\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param minter The address of the account which is supplying the assets\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n   */\\n  function mintFresh(address minter, uint256 mintAmount) internal returns (uint256, uint256) {\\n    /* Fail if mint not allowed */\\n    uint256 allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n    }\\n\\n    MintLocalVars memory vars;\\n\\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr)), 0);\\n    }\\n\\n    // Check max supply\\n    // unused function\\n    /* allowed = comptroller.mintWithinLimits(address(this), vars.exchangeRateMantissa, accountTokens[minter], mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        } */\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     *  We call `doTransferIn` for the minter and the mintAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n     *  side-effects occurred. The function returns the amount actually transferred,\\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n     *  of cash.\\n     */\\n    vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n    /*\\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\\n     *  mintTokens = actualMintAmount / exchangeRate\\n     */\\n\\n    (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n      vars.actualMintAmount,\\n      Exp({ mantissa: vars.exchangeRateMantissa })\\n    );\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n    /*\\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n     *  totalSupplyNew = totalSupply + mintTokens\\n     *  accountTokensNew = accountTokens[minter] + mintTokens\\n     */\\n    vars.totalSupplyNew = add_(totalSupply, vars.mintTokens);\\n\\n    vars.accountTokensNew = add_(accountTokens[minter], vars.mintTokens);\\n\\n    /* We write previously calculated values into storage */\\n    totalSupply = vars.totalSupplyNew;\\n    accountTokens[minter] = vars.accountTokensNew;\\n\\n    /* We emit a Mint event, and a Transfer event */\\n    emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n    emit Transfer(address(this), minter, vars.mintTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n    return (uint256(Error.NO_ERROR), vars.actualMintAmount);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemInternal(uint256 redeemTokens) internal nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n      return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n    }\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    return redeemFresh(msg.sender, redeemTokens, 0);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlyingInternal(uint256 redeemAmount) internal nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n      return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n    }\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    return redeemFresh(msg.sender, 0, redeemAmount);\\n  }\\n\\n  struct RedeemLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 exchangeRateMantissa;\\n    uint256 redeemTokens;\\n    uint256 redeemAmount;\\n    uint256 totalSupplyNew;\\n    uint256 accountTokensNew;\\n  }\\n\\n  /**\\n   * @notice User redeems cTokens in exchange for the underlying asset\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param redeemer The address of the account which is redeeming the tokens\\n   * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemFresh(\\n    address redeemer,\\n    uint256 redeemTokensIn,\\n    uint256 redeemAmountIn\\n  ) internal returns (uint256) {\\n    require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n    RedeemLocalVars memory vars;\\n\\n    /* exchangeRate = invoke Exchange Rate Stored() */\\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /* If redeemTokensIn > 0: */\\n    if (redeemTokensIn > 0) {\\n      /*\\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\\n       *  redeemTokens = redeemTokensIn\\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n       */\\n      vars.redeemTokens = redeemTokensIn;\\n\\n      (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n        Exp({ mantissa: vars.exchangeRateMantissa }),\\n        redeemTokensIn\\n      );\\n      if (vars.mathErr != MathError.NO_ERROR) {\\n        return\\n          failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint256(vars.mathErr));\\n      }\\n    } else {\\n      /*\\n       * We get the current exchange rate and calculate the amount to be redeemed:\\n       *  redeemTokens = redeemAmountIn / exchangeRate\\n       *  redeemAmount = redeemAmountIn\\n       */\\n\\n      (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n        redeemAmountIn,\\n        Exp({ mantissa: vars.exchangeRateMantissa })\\n      );\\n      if (vars.mathErr != MathError.NO_ERROR) {\\n        return\\n          failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint256(vars.mathErr));\\n      }\\n\\n      vars.redeemAmount = redeemAmountIn;\\n    }\\n\\n    /* Fail if redeem not allowed */\\n    uint256 allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n    }\\n\\n    /*\\n     * We calculate the new total supply and redeemer balance, checking for underflow:\\n     *  totalSupplyNew = totalSupply - redeemTokens\\n     *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n     */\\n    (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient cash */\\n    if (getCashPrior() < vars.redeemAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken has redeemAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(redeemer, vars.redeemAmount);\\n\\n    /* We write previously calculated values into storage */\\n    totalSupply = vars.totalSupplyNew;\\n    accountTokens[redeemer] = vars.accountTokensNew;\\n\\n    /* We emit a Transfer event, and a Redeem event */\\n    emit Transfer(redeemer, address(this), vars.redeemTokens);\\n    emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrowInternal(uint256 borrowAmount) internal nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n    }\\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n    return borrowFresh(msg.sender, borrowAmount);\\n  }\\n\\n  struct BorrowLocalVars {\\n    MathError mathErr;\\n    uint256 accountBorrows;\\n    uint256 accountBorrowsNew;\\n    uint256 totalBorrowsNew;\\n  }\\n\\n  /**\\n   * @notice Users borrow assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrowFresh(address borrower, uint256 borrowAmount) internal returns (uint256) {\\n    /* Fail if borrow not allowed */\\n    uint256 allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient underlying cash */\\n    uint256 cashPrior = getCashPrior();\\n\\n    if (cashPrior < borrowAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n    }\\n\\n    BorrowLocalVars memory vars;\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on overflow:\\n     *  accountBorrowsNew = accountBorrows + borrowAmount\\n     *  totalBorrowsNew = totalBorrows + borrowAmount\\n     */\\n    (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(\\n          Error.MATH_ERROR,\\n          FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n          uint256(vars.mathErr)\\n        );\\n    }\\n\\n    // Check min borrow for this user for this asset\\n    allowed = comptroller.borrowWithinLimits(address(this), vars.accountBorrowsNew);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We invoke doTransferOut for the borrower and the borrowAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken borrowAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(borrower, borrowAmount);\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = vars.totalBorrowsNew;\\n\\n    /* We emit a Borrow event */\\n    emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowInternal(uint256 repayAmount) internal nonReentrant(false) returns (uint256, uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n    }\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\\n    internal\\n    nonReentrant(false)\\n    returns (uint256, uint256)\\n  {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n    }\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n  }\\n\\n  struct RepayBorrowLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 repayAmount;\\n    uint256 borrowerIndex;\\n    uint256 accountBorrows;\\n    uint256 accountBorrowsNew;\\n    uint256 totalBorrowsNew;\\n    uint256 actualRepayAmount;\\n  }\\n\\n  /**\\n   * @notice Borrows are repaid by another user (possibly the borrower).\\n   * @param payer the account paying off the borrow\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount the amount of undelrying tokens being returned\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowFresh(\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) internal returns (uint256, uint256) {\\n    /* Fail if repayBorrow not allowed */\\n    uint256 allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n    }\\n\\n    RepayBorrowLocalVars memory vars;\\n\\n    /* We remember the original borrowerIndex for verification purposes */\\n    vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n    /* We fetch the amount the borrower owes, with accumulated interest */\\n    (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return (\\n        failOpaque(\\n          Error.MATH_ERROR,\\n          FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n          uint256(vars.mathErr)\\n        ),\\n        0\\n      );\\n    }\\n\\n    /* If repayAmount == -1, repayAmount = accountBorrows */\\n    if (repayAmount == type(uint256).max) {\\n      vars.repayAmount = vars.accountBorrows;\\n    } else {\\n      vars.repayAmount = repayAmount;\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the payer and the repayAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional repayAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *   it returns the amount actually transferred, in case of a fee.\\n     */\\n    vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on underflow:\\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n     */\\n    (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n    (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = vars.totalBorrowsNew;\\n\\n    /* We emit a RepayBorrow event */\\n    emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n    return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function liquidateBorrowInternal(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal nonReentrant(false) returns (uint256, uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n    }\\n\\n    error = cTokenCollateral.accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n    }\\n\\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n    return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n  }\\n\\n  /**\\n   * @notice The liquidator liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param liquidator The address repaying the borrow and seizing collateral\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function liquidateBorrowFresh(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal returns (uint256, uint256) {\\n    /* Fail if liquidate not allowed */\\n    uint256 allowed = comptroller.liquidateBorrowAllowed(\\n      address(this),\\n      address(cTokenCollateral),\\n      liquidator,\\n      borrower,\\n      repayAmount\\n    );\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n    }\\n\\n    /* Verify cTokenCollateral market's block number equals current block number */\\n    if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n    }\\n\\n    /* Fail if repayAmount = 0 */\\n    if (repayAmount == 0) {\\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n    }\\n\\n    /* Fail if repayAmount = -1 */\\n    if (repayAmount == type(uint256).max) {\\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n    }\\n\\n    /* Fail if repayBorrow fails */\\n    (uint256 repayBorrowError, uint256 actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n    if (repayBorrowError != uint256(Error.NO_ERROR)) {\\n      return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We calculate the number of collateral tokens that will be seized */\\n    (uint256 amountSeizeError, uint256 seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n      address(this),\\n      address(cTokenCollateral),\\n      actualRepayAmount\\n    );\\n    require(amountSeizeError == uint256(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n    /* Revert if borrower collateral token balance < seizeTokens */\\n    require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n    uint256 seizeError;\\n    if (address(cTokenCollateral) == address(this)) {\\n      seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n    } else {\\n      seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n    }\\n\\n    /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n    require(seizeError == uint256(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n    /* We emit a LiquidateBorrow event */\\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n    return (uint256(Error.NO_ERROR), actualRepayAmount);\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Will fail unless called by another cToken during the process of liquidation.\\n   *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override nonReentrant(true) returns (uint256) {\\n    return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n  }\\n\\n  struct SeizeInternalLocalVars {\\n    MathError mathErr;\\n    uint256 borrowerTokensNew;\\n    uint256 liquidatorTokensNew;\\n    uint256 liquidatorSeizeTokens;\\n    uint256 protocolSeizeTokens;\\n    uint256 protocolSeizeAmount;\\n    uint256 exchangeRateMantissa;\\n    uint256 totalReservesNew;\\n    uint256 totalFuseFeeNew;\\n    uint256 totalSupplyNew;\\n    uint256 feeSeizeTokens;\\n    uint256 feeSeizeAmount;\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n   *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seizeInternal(\\n    address seizerToken,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) internal returns (uint256) {\\n    /* Fail if seize not allowed */\\n    uint256 allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n    }\\n\\n    SeizeInternalLocalVars memory vars;\\n\\n    /*\\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n     */\\n    (vars.mathErr, vars.borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    vars.protocolSeizeTokens = mul_(seizeTokens, Exp({ mantissa: protocolSeizeShareMantissa }));\\n    vars.feeSeizeTokens = mul_(seizeTokens, Exp({ mantissa: feeSeizeShareMantissa }));\\n    vars.liquidatorSeizeTokens = sub_(sub_(seizeTokens, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n\\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"exchange rate math error\\\");\\n\\n    vars.protocolSeizeAmount = mul_ScalarTruncate(\\n      Exp({ mantissa: vars.exchangeRateMantissa }),\\n      vars.protocolSeizeTokens\\n    );\\n    vars.feeSeizeAmount = mul_ScalarTruncate(Exp({ mantissa: vars.exchangeRateMantissa }), vars.feeSeizeTokens);\\n\\n    vars.totalReservesNew = add_(totalReserves, vars.protocolSeizeAmount);\\n    vars.totalSupplyNew = sub_(sub_(totalSupply, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n    vars.totalFuseFeeNew = add_(totalFuseFees, vars.feeSeizeAmount);\\n\\n    (vars.mathErr, vars.liquidatorTokensNew) = addUInt(accountTokens[liquidator], vars.liquidatorSeizeTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    totalReserves = vars.totalReservesNew;\\n    totalSupply = vars.totalSupplyNew;\\n    totalFuseFees = vars.totalFuseFeeNew;\\n\\n    accountTokens[borrower] = vars.borrowerTokensNew;\\n    accountTokens[liquidator] = vars.liquidatorTokensNew;\\n\\n    /* Emit a Transfer event */\\n    emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\n    emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\n    emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Sets a new comptroller for the market\\n   * @dev Internal function to set a new comptroller\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint256) {\\n    ComptrollerInterface oldComptroller = comptroller;\\n    // Ensure invoke comptroller.isComptroller() returns true\\n    require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n    // Set market's comptroller to newComptroller\\n    comptroller = newComptroller;\\n\\n    // Emit NewComptroller(oldComptroller, newComptroller)\\n    emit NewComptroller(oldComptroller, newComptroller);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh\\n   * @dev Admin function to accrue interest and set a new admin fee\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setAdminFee(uint256 newAdminFeeMantissa) external nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee change failed.\\n      return fail(Error(error), FailureInfo.SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _setAdminFeeFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setAdminFeeFresh(newAdminFeeMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new admin fee for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new admin fee\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setAdminFeeFresh(uint256 newAdminFeeMantissa) internal returns (uint256) {\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_ADMIN_FEE_FRESH_CHECK);\\n    }\\n\\n    // Sanitize newAdminFeeMantissa\\n    if (newAdminFeeMantissa == type(uint256).max) newAdminFeeMantissa = adminFeeMantissa;\\n\\n    // Get latest Fuse fee\\n    uint256 newFuseFeeMantissa = getPendingFuseFeeFromAdmin();\\n\\n    // Check reserveFactorMantissa + newAdminFeeMantissa + newFuseFeeMantissa \\u2264 reserveFactorPlusFeesMaxMantissa\\n    if (add_(add_(reserveFactorMantissa, newAdminFeeMantissa), newFuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n      return fail(Error.BAD_INPUT, FailureInfo.SET_ADMIN_FEE_BOUNDS_CHECK);\\n    }\\n\\n    // If setting admin fee\\n    if (adminFeeMantissa != newAdminFeeMantissa) {\\n      // Check caller is admin\\n      if (!hasAdminRights()) {\\n        return fail(Error.UNAUTHORIZED, FailureInfo.SET_ADMIN_FEE_ADMIN_CHECK);\\n      }\\n\\n      // Set admin fee\\n      uint256 oldAdminFeeMantissa = adminFeeMantissa;\\n      adminFeeMantissa = newAdminFeeMantissa;\\n\\n      // Emit event\\n      emit NewAdminFee(oldAdminFeeMantissa, newAdminFeeMantissa);\\n    }\\n\\n    // If setting Fuse fee\\n    if (fuseFeeMantissa != newFuseFeeMantissa) {\\n      // Set Fuse fee\\n      uint256 oldFuseFeeMantissa = fuseFeeMantissa;\\n      fuseFeeMantissa = newFuseFeeMantissa;\\n\\n      // Emit event\\n      emit NewFuseFee(oldFuseFeeMantissa, newFuseFeeMantissa);\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n   * @dev Admin function to accrue interest and set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external override nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n      return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setReserveFactorFresh(newReserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n    }\\n\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n    }\\n\\n    // Check newReserveFactor \\u2264 maxReserveFactor\\n    if (add_(add_(newReserveFactorMantissa, adminFeeMantissa), fuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n      return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n    }\\n\\n    uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n    reserveFactorMantissa = newReserveFactorMantissa;\\n\\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring to admin\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReserves(uint256 reduceAmount) external override nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n      return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _reduceReservesFresh(reduceAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces reserves by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\n    // totalReserves - reduceAmount\\n    uint256 totalReservesNew;\\n\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < reduceAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n    if (reduceAmount > totalReserves) {\\n      return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    // We checked reduceAmount <= totalReserves above, so this should never revert.\\n    totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n    // Store reserves[n+1] = reserves[n] - reduceAmount\\n    totalReserves = totalReservesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(msg.sender, reduceAmount);\\n\\n    emit ReservesReduced(msg.sender, reduceAmount, totalReservesNew);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces Fuse fees by transferring to Fuse\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawFuseFees(uint256 withdrawAmount) external nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted Fuse fee withdrawal failed.\\n      return fail(Error(error), FailureInfo.WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _withdrawFuseFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _withdrawFuseFeesFresh(withdrawAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces Fuse fees by transferring to Fuse\\n   * @dev Requires fresh interest accrual\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawFuseFeesFresh(uint256 withdrawAmount) internal returns (uint256) {\\n    // totalFuseFees - reduceAmount\\n    uint256 totalFuseFeesNew;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_FUSE_FEES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < withdrawAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    // Check withdrawAmount \\u2264 fuseFees[n] (totalFuseFees)\\n    if (withdrawAmount > totalFuseFees) {\\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_FUSE_FEES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    // We checked withdrawAmount <= totalFuseFees above, so this should never revert.\\n    totalFuseFeesNew = sub_(totalFuseFees, withdrawAmount);\\n\\n    // Store fuseFees[n+1] = fuseFees[n] - withdrawAmount\\n    totalFuseFees = totalFuseFeesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(address(fuseAdmin), withdrawAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces admin fees by transferring to admin\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawAdminFees(uint256 withdrawAmount) external nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee withdrawal failed.\\n      return fail(Error(error), FailureInfo.WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _withdrawAdminFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _withdrawAdminFeesFresh(withdrawAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces admin fees by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawAdminFeesFresh(uint256 withdrawAmount) internal returns (uint256) {\\n    // totalAdminFees - reduceAmount\\n    uint256 totalAdminFeesNew;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_ADMIN_FEES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < withdrawAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    // Check withdrawAmount \\u2264 adminFees[n] (totalAdminFees)\\n    if (withdrawAmount > totalAdminFees) {\\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_ADMIN_FEES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    // We checked withdrawAmount <= totalAdminFees above, so this should never revert.\\n    totalAdminFeesNew = sub_(totalAdminFees, withdrawAmount);\\n\\n    // Store adminFees[n+1] = adminFees[n] - withdrawAmount\\n    totalAdminFees = totalAdminFeesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(address(uint160(UnitrollerAdminStorage(address(comptroller)).admin())), withdrawAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n   * @dev Admin function to accrue interest and update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public override returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n      return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n    return _setInterestRateModelFresh(newInterestRateModel);\\n  }\\n\\n  /**\\n   * @notice updates the interest rate model (*requires fresh interest accrual)\\n   * @dev Admin function to update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\n    // Used to store old model for use in the event that is emitted on success\\n    InterestRateModel oldInterestRateModel;\\n\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n    }\\n\\n    // Track the market's current interest rate model\\n    oldInterestRateModel = interestRateModel;\\n\\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n    require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n    // Set the interest rate model to newInterestRateModel\\n    interestRateModel = newInterestRateModel;\\n\\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n    // Attempt to reset interest checkpoints on old IRM\\n    if (address(oldInterestRateModel) != address(0))\\n      address(oldInterestRateModel).call(abi.encodeWithSignature(\\\"resetInterestCheckpoints()\\\"));\\n\\n    // Attempt to add first interest checkpoint on new IRM\\n    address(newInterestRateModel).call(abi.encodeWithSignature(\\\"checkpointInterest()\\\"));\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice updates the cToken ERC20 name and symbol\\n   * @dev Admin function to update the cToken ERC20 name and symbol\\n   * @param _name the new ERC20 token name to use\\n   * @param _symbol the new ERC20 token symbol to use\\n   */\\n  function _setNameAndSymbol(string calldata _name, string calldata _symbol) external {\\n    // Check caller is admin\\n    require(hasAdminRights(), \\\"caller not admin\\\");\\n\\n    // Set ERC20 name and symbol\\n    name = _name;\\n    symbol = _symbol;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying owned by this contract\\n   */\\n  function getCashPrior() internal view virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n   *  This may revert due to insufficient balance or insufficient allowance.\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual returns (uint256) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n   *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n   *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n   */\\n  function doTransferOut(address to, uint256 amount) internal virtual {}\\n\\n  /*** Reentrancy Guard ***/\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   */\\n  modifier nonReentrant(bool localOnly) {\\n    _beforeNonReentrant(localOnly);\\n    _;\\n    _afterNonReentrant(localOnly);\\n  }\\n\\n  /**\\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n   * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n   * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\\n   */\\n  function _beforeNonReentrant(bool localOnly) private {\\n    require(_notEntered, \\\"re-entered\\\");\\n    if (!localOnly) comptroller._beforeNonReentrant();\\n    _notEntered = false;\\n  }\\n\\n  /**\\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n   * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n   * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\\n   */\\n  function _afterNonReentrant(bool localOnly) private {\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n    if (!localOnly) comptroller._afterNonReentrant();\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   * @param errorMessage The revert string to return on failure.\\n   */\\n  function _functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.call(data);\\n\\n    if (!success) {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n\\n    return returndata;\\n  }\\n}\\n\",\"keccak256\":\"0x47b1006c2263f75b11c7e71d6f937c45ec5c5b37422e04b9bd5791e69a6f72bd\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenAdminStorage {\\n  /*\\n   * Administrator for Fuse\\n   */\\n  address payable public fuseAdmin;\\n\\n  /**\\n   * @dev LEGACY USE ONLY: Administrator for this contract\\n   */\\n  address payable internal __admin;\\n\\n  /**\\n   * @dev LEGACY USE ONLY: Whether or not the Fuse admin has admin rights\\n   */\\n  bool internal __fuseAdminHasRights;\\n\\n  /**\\n   * @dev LEGACY USE ONLY: Whether or not the admin has admin rights\\n   */\\n  bool internal __adminHasRights;\\n}\\n\\ncontract CTokenStorage is CTokenAdminStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  /*\\n   * Maximum borrow rate that can ever be applied (.0005% / block)\\n   */\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  /*\\n   * Maximum fraction of interest that can be set aside for reserves + fees\\n   */\\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\n\\n  /*\\n   * LEGACY USE ONLY: Pending administrator for this contract\\n   */\\n  address payable private __pendingAdmin;\\n\\n  /**\\n   * @notice Contract which oversees inter-cToken operations\\n   */\\n  ComptrollerInterface public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  /*\\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n   */\\n  uint256 internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for admin fees\\n   */\\n  uint256 public adminFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for Fuse fees\\n   */\\n  uint256 public fuseFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint256 public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint256 public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint256 public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint256 public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint256 public totalReserves;\\n\\n  /**\\n   * @notice Total amount of admin fees of the underlying held in this market\\n   */\\n  uint256 public totalAdminFees;\\n\\n  /**\\n   * @notice Total amount of Fuse fees of the underlying held in this market\\n   */\\n  uint256 public totalFuseFees;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint256 public totalSupply;\\n\\n  /*\\n   * Official record of token balances for each account\\n   */\\n  mapping(address => uint256) internal accountTokens;\\n\\n  /*\\n   * Approved token transfer amounts on behalf of others\\n   */\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  /*\\n   * Mapping of account addresses to outstanding borrow balances\\n   */\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /*\\n   * Share of seized collateral that is added to reserves\\n   */\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n  /*\\n   * Share of seized collateral taken as fees\\n   */\\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n  /**\\n   * @notice Indicator that this is a CToken contract (for inspection)\\n   */\\n  function isCToken() external virtual returns (bool) {\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Indicator that this is or is not a CEther contract (for inspection)\\n   */\\n  function isCEther() external virtual returns (bool) {\\n    return false;\\n  }\\n\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral,\\n    uint256 seizeTokens\\n  );\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when comptroller is changed\\n   */\\n  event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the admin fee is changed\\n   */\\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\\n\\n  /**\\n   * @notice Event emitted when the Fuse fee is changed\\n   */\\n  event NewFuseFee(uint256 oldFuseFeeMantissa, uint256 newFuseFeeMantissa);\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint256 amount) external virtual returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external virtual returns (bool);\\n\\n  function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n  function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n  function balanceOf(address owner) external view virtual returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external virtual returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function borrowRatePerBlock() external view virtual returns (uint256);\\n\\n  function supplyRatePerBlock() external view virtual returns (uint256);\\n\\n  function totalBorrowsCurrent() external virtual returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external virtual returns (uint256);\\n\\n  function borrowBalanceStored(address account) public view virtual returns (uint256);\\n\\n  function exchangeRateCurrent() public virtual returns (uint256);\\n\\n  function exchangeRateStored() public view virtual returns (uint256);\\n\\n  function getCash() external view virtual returns (uint256);\\n\\n  function accrueInterest() public virtual returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external virtual returns (uint256);\\n\\n  function _reduceReserves(uint256 reduceAmount) external virtual returns (uint256);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public virtual returns (uint256);\\n}\\n\\ncontract CErc20Storage {\\n  /**\\n   * @notice Underlying asset for this CToken\\n   */\\n  address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external virtual returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external virtual returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external virtual returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external virtual returns (uint256);\\n}\\n\\ncontract CEtherInterface is CErc20Storage {}\\n\",\"keccak256\":\"0x0ef2e628e1286ec79d420762586669b03efde614b2208167c80ded26e760ee15\",\"license\":\"UNLICENSED\"},\"contracts/compound/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n  /**\\n   * @dev Possible error codes that we can return\\n   */\\n  enum MathError {\\n    NO_ERROR,\\n    DIVISION_BY_ZERO,\\n    INTEGER_OVERFLOW,\\n    INTEGER_UNDERFLOW\\n  }\\n\\n  /**\\n   * @dev Multiplies two numbers, returns an error on overflow.\\n   */\\n  function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (a == 0) {\\n      return (MathError.NO_ERROR, 0);\\n    }\\n\\n    uint256 c = a * b;\\n\\n    if (c / a != b) {\\n      return (MathError.INTEGER_OVERFLOW, 0);\\n    } else {\\n      return (MathError.NO_ERROR, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Integer division of two numbers, truncating the quotient.\\n   */\\n  function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (b == 0) {\\n      return (MathError.DIVISION_BY_ZERO, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, a / b);\\n  }\\n\\n  /**\\n   * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n   */\\n  function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (b <= a) {\\n      return (MathError.NO_ERROR, a - b);\\n    } else {\\n      return (MathError.INTEGER_UNDERFLOW, 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Adds two numbers, returns an error on overflow.\\n   */\\n  function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    uint256 c = a + b;\\n\\n    if (c >= a) {\\n      return (MathError.NO_ERROR, c);\\n    } else {\\n      return (MathError.INTEGER_OVERFLOW, 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev add a and b and then subtract c\\n   */\\n  function addThenSubUInt(\\n    uint256 a,\\n    uint256 b,\\n    uint256 c\\n  ) internal pure returns (MathError, uint256) {\\n    (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, 0);\\n    }\\n\\n    return subUInt(sum, c);\\n  }\\n}\\n\",\"keccak256\":\"0xce97f35471b6f51b4adb3753e831f1d6eee444dc4a982cba20dd5fff571128f4\",\"license\":\"UNLICENSED\"},\"contracts/compound/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./CErc20.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Unitroller.sol\\\";\\nimport \\\"./RewardsDistributorDelegate.sol\\\";\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n * @dev This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\\n */\\ncontract Comptroller is ComptrollerV3Storage, ComptrollerInterface, ComptrollerErrorReporter, Exponential {\\n  /// @notice Emitted when an admin supports a market\\n  event MarketListed(CToken cToken);\\n\\n  /// @notice Emitted when an admin unsupports a market\\n  event MarketUnlisted(CToken cToken);\\n\\n  /// @notice Emitted when an account enters a market\\n  event MarketEntered(CToken cToken, address account);\\n\\n  /// @notice Emitted when an account exits a market\\n  event MarketExited(CToken cToken, address account);\\n\\n  /// @notice Emitted when close factor is changed by admin\\n  event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\\n\\n  /// @notice Emitted when a collateral factor is changed by admin\\n  event NewCollateralFactor(CToken cToken, uint256 oldCollateralFactorMantissa, uint256 newCollateralFactorMantissa);\\n\\n  /// @notice Emitted when liquidation incentive is changed by admin\\n  event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa);\\n\\n  /// @notice Emitted when price oracle is changed\\n  event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n  /// @notice Emitted when pause guardian is changed\\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n  /// @notice Emitted when an action is paused globally\\n  event ActionPaused(string action, bool pauseState);\\n\\n  /// @notice Emitted when an action is paused on a market\\n  event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n  /// @notice Emitted when the whitelist enforcement is changed\\n  event WhitelistEnforcementChanged(bool enforce);\\n\\n  /// @notice Emitted when auto implementations are toggled\\n  event AutoImplementationsToggled(bool enabled);\\n\\n  /// @notice Emitted when supply cap for a cToken is changed\\n  event NewSupplyCap(CToken indexed cToken, uint256 newSupplyCap);\\n\\n  /// @notice Emitted when borrow cap for a cToken is changed\\n  event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\\n\\n  /// @notice Emitted when borrow cap guardian is changed\\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n  /// @notice Emitted when a new RewardsDistributor contract is added to hooks\\n  event AddedRewardsDistributor(address rewardsDistributor);\\n\\n  // closeFactorMantissa must be strictly greater than this value\\n  uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n  // closeFactorMantissa must not exceed this value\\n  uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n  // No collateralFactorMantissa may exceed this value\\n  uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n  // liquidationIncentiveMantissa must be no less than this value\\n  uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\\n\\n  // liquidationIncentiveMantissa must be no greater than this value\\n  uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\\n\\n  constructor(address payable _fuseAdmin) {\\n    fuseAdmin = _fuseAdmin;\\n  }\\n\\n  /*** Assets You Are In ***/\\n\\n  /**\\n   * @notice Returns the assets an account has entered\\n   * @param account The address of the account to pull assets for\\n   * @return A dynamic list with the assets the account has entered\\n   */\\n  function getAssetsIn(address account) external view returns (CToken[] memory) {\\n    CToken[] memory assetsIn = accountAssets[account];\\n\\n    return assetsIn;\\n  }\\n\\n  /**\\n   * @notice Returns whether the given account is entered in the given asset\\n   * @param account The address of the account to check\\n   * @param cToken The cToken to check\\n   * @return True if the account is in the asset, otherwise false.\\n   */\\n  function checkMembership(address account, CToken cToken) external view returns (bool) {\\n    return markets[address(cToken)].accountMembership[account];\\n  }\\n\\n  /**\\n   * @notice Add assets to be included in account liquidity calculation\\n   * @param cTokens The list of addresses of the cToken markets to be enabled\\n   * @return Success indicator for whether each corresponding market was entered\\n   */\\n  function enterMarkets(address[] memory cTokens) public override returns (uint256[] memory) {\\n    uint256 len = cTokens.length;\\n\\n    uint256[] memory results = new uint256[](len);\\n    for (uint256 i = 0; i < len; i++) {\\n      CToken cToken = CToken(cTokens[i]);\\n\\n      results[i] = uint256(addToMarketInternal(cToken, msg.sender));\\n    }\\n\\n    return results;\\n  }\\n\\n  /**\\n   * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n   * @param cToken The market to enter\\n   * @param borrower The address of the account to modify\\n   * @return Success indicator for whether the market was entered\\n   */\\n  function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\\n    Market storage marketToJoin = markets[address(cToken)];\\n\\n    if (!marketToJoin.isListed) {\\n      // market is not listed, cannot join\\n      return Error.MARKET_NOT_LISTED;\\n    }\\n\\n    if (marketToJoin.accountMembership[borrower] == true) {\\n      // already joined\\n      return Error.NO_ERROR;\\n    }\\n\\n    // survived the gauntlet, add to list\\n    // NOTE: we store these somewhat redundantly as a significant optimization\\n    //  this avoids having to iterate through the list for the most common use cases\\n    //  that is, only when we need to perform liquidity checks\\n    //  and not whenever we want to check if an account is in a particular market\\n    marketToJoin.accountMembership[borrower] = true;\\n    accountAssets[borrower].push(cToken);\\n\\n    // Add to allBorrowers\\n    if (!borrowers[borrower]) {\\n      allBorrowers.push(borrower);\\n      borrowers[borrower] = true;\\n      borrowerIndexes[borrower] = allBorrowers.length - 1;\\n    }\\n\\n    emit MarketEntered(cToken, borrower);\\n\\n    return Error.NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Removes asset from sender's account liquidity calculation\\n   * @dev Sender must not have an outstanding borrow balance in the asset,\\n   *  or be providing neccessary collateral for an outstanding borrow.\\n   * @param cTokenAddress The address of the asset to be removed\\n   * @return Whether or not the account successfully exited the market\\n   */\\n  function exitMarket(address cTokenAddress) external override returns (uint256) {\\n    CToken cToken = CToken(cTokenAddress);\\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n    (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n    require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n    /* Fail if the sender has a borrow balance */\\n    if (amountOwed != 0) {\\n      return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n    }\\n\\n    /* Fail if the sender is not permitted to redeem all of their tokens */\\n    uint256 allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n    if (allowed != 0) {\\n      return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n    }\\n\\n    Market storage marketToExit = markets[address(cToken)];\\n\\n    /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n    if (!marketToExit.accountMembership[msg.sender]) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    /* Set cToken account membership to false */\\n    delete marketToExit.accountMembership[msg.sender];\\n\\n    /* Delete cToken from the account\\u2019s list of assets */\\n    // load into memory for faster iteration\\n    CToken[] memory userAssetList = accountAssets[msg.sender];\\n    uint256 len = userAssetList.length;\\n    uint256 assetIndex = len;\\n    for (uint256 i = 0; i < len; i++) {\\n      if (userAssetList[i] == cToken) {\\n        assetIndex = i;\\n        break;\\n      }\\n    }\\n\\n    // We *must* have found the asset in the list or our redundant data structure is broken\\n    assert(assetIndex < len);\\n\\n    // copy last item in list to location of item to be removed, reduce length by 1\\n    CToken[] storage storedList = accountAssets[msg.sender];\\n    storedList[assetIndex] = storedList[storedList.length - 1];\\n    storedList.pop();\\n\\n    // If the user has exited all markets, remove them from the `allBorrowers` array\\n    if (storedList.length == 0) {\\n      allBorrowers[borrowerIndexes[msg.sender]] = allBorrowers[allBorrowers.length - 1]; // Copy last item in list to location of item to be removed\\n      allBorrowers.pop(); // Reduce length by 1\\n      borrowerIndexes[allBorrowers[borrowerIndexes[msg.sender]]] = borrowerIndexes[msg.sender]; // Set borrower index of moved item to correct index\\n      borrowerIndexes[msg.sender] = 0; // Reset sender borrower index to 0 for a gas refund\\n      borrowers[msg.sender] = false; // Tell the contract that the sender is no longer a borrower (so it knows to add the borrower back if they enter a market in the future)\\n    }\\n\\n    emit MarketExited(cToken, msg.sender);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /*** Policy Hooks ***/\\n\\n  /**\\n   * @notice Checks if the account should be allowed to mint tokens in the given market\\n   * @param cToken The market to verify the mint against\\n   * @param minter The account which would get the minted tokens\\n   * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n   * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function mintAllowed(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!mintGuardianPaused[cToken], \\\"mint is paused\\\");\\n\\n    // Shh - currently unused\\n    minter;\\n    mintAmount;\\n\\n    // Make sure market is listed\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Make sure minter is whitelisted\\n    if (enforceWhitelist && !whitelist[minter]) {\\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\\n    }\\n\\n    // Check supply cap\\n    uint256 supplyCap = supplyCaps[cToken];\\n    // Supply cap of 0 corresponds to unlimited supplying\\n    if (supplyCap != 0) {\\n      uint256 totalCash = CToken(cToken).getCash();\\n      uint256 totalBorrows = CToken(cToken).totalBorrows();\\n      uint256 totalReserves = CToken(cToken).totalReserves();\\n      uint256 totalFuseFees = CToken(cToken).totalFuseFees();\\n      uint256 totalAdminFees = CToken(cToken).totalAdminFees();\\n\\n      // totalUnderlyingSupply = totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)\\n      (MathError mathErr, uint256 totalUnderlyingSupply) = addThenSubUInt(\\n        totalCash,\\n        totalBorrows,\\n        add_(add_(totalReserves, totalFuseFees), totalAdminFees)\\n      );\\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n      uint256 nextTotalUnderlyingSupply;\\n      (mathErr, nextTotalUnderlyingSupply) = addUInt(totalUnderlyingSupply, mintAmount);\\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n      require(nextTotalUnderlyingSupply < supplyCap, \\\"market supply cap reached\\\");\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreSupplierAction(cToken, minter);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates mint and reverts on rejection. May emit logs.\\n   * @param cToken Asset being minted\\n   * @param minter The address minting the tokens\\n   * @param actualMintAmount The amount of the underlying asset being minted\\n   * @param mintTokens The number of tokens being minted\\n   */\\n  function mintVerify(\\n    address cToken,\\n    address minter,\\n    uint256 actualMintAmount,\\n    uint256 mintTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    minter;\\n    actualMintAmount;\\n    mintTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n\\n    // Add minter to suppliers mapping\\n    suppliers[minter] = true;\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\\n   * @param cToken The market to verify the redeem against\\n   * @param redeemer The account which would redeem the tokens\\n   * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n   * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function redeemAllowed(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) external override returns (uint256) {\\n    uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n    if (allowed != uint256(Error.NO_ERROR)) {\\n      return allowed;\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreSupplierAction(cToken, redeemer);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  function redeemAllowedInternal(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) internal view returns (uint256) {\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n    if (!markets[cToken].accountMembership[redeemer]) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n    (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      redeemer,\\n      CToken(cToken),\\n      redeemTokens,\\n      0\\n    );\\n    if (err != Error.NO_ERROR) {\\n      return uint256(err);\\n    }\\n    if (shortfall > 0) {\\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates redeem and reverts on rejection. May emit logs.\\n   * @param cToken Asset being redeemed\\n   * @param redeemer The address redeeming the tokens\\n   * @param redeemAmount The amount of the underlying asset being redeemed\\n   * @param redeemTokens The number of tokens being redeemed\\n   */\\n  function redeemVerify(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemAmount,\\n    uint256 redeemTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    redeemer;\\n\\n    // Require tokens is zero or amount is also zero\\n    if (redeemTokens == 0 && redeemAmount > 0) {\\n      revert(\\\"redeemTokens zero\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param cToken The market to verify the borrow against\\n   * @param borrower The account which would borrow the asset\\n   * @param borrowAmount The amount of underlying the account would borrow\\n   * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function borrowAllowed(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!borrowGuardianPaused[cToken], \\\"borrow is paused\\\");\\n\\n    // Make sure market is listed\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    if (!markets[cToken].accountMembership[borrower]) {\\n      // only cTokens may call borrowAllowed if borrower not in market\\n      require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n      // attempt to add borrower to the market\\n      Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n      if (err != Error.NO_ERROR) {\\n        return uint256(err);\\n      }\\n\\n      // it should be impossible to break the important invariant\\n      assert(markets[cToken].accountMembership[borrower]);\\n    }\\n\\n    // Make sure oracle price is available\\n    if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\n      return uint256(Error.PRICE_ERROR);\\n    }\\n\\n    // Make sure borrower is whitelisted\\n    if (enforceWhitelist && !whitelist[borrower]) {\\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\\n    }\\n\\n    // Check borrow cap\\n    uint256 borrowCap = borrowCaps[cToken];\\n    // Borrow cap of 0 corresponds to unlimited borrowing\\n    if (borrowCap != 0) {\\n      uint256 totalBorrows = CToken(cToken).totalBorrows();\\n      (MathError mathErr, uint256 nextTotalBorrows) = addUInt(totalBorrows, borrowAmount);\\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n      require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreBorrowerAction(cToken, borrower);\\n\\n    // Perform a hypothetical liquidity check to guard against shortfall\\n    (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      borrower,\\n      CToken(cToken),\\n      0,\\n      borrowAmount\\n    );\\n    if (err != Error.NO_ERROR) {\\n      return uint256(err);\\n    }\\n    if (shortfall > 0) {\\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param cToken Asset whose underlying is being borrowed\\n   * @param accountBorrowsNew The user's new borrow balance of the underlying asset\\n   */\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external override returns (uint256) {\\n    // Check if min borrow exists\\n    uint256 minBorrowEth = IFuseFeeDistributor(fuseAdmin).minBorrowEth();\\n\\n    if (minBorrowEth > 0) {\\n      // Get new underlying borrow balance of account for this cToken\\n      uint256 oraclePriceMantissa = oracle.getUnderlyingPrice(CToken(cToken));\\n      if (oraclePriceMantissa == 0) return uint256(Error.PRICE_ERROR);\\n      (MathError mathErr, uint256 borrowBalanceEth) = mulScalarTruncate(\\n        Exp({ mantissa: oraclePriceMantissa }),\\n        accountBorrowsNew\\n      );\\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n      // Check against min borrow\\n      if (borrowBalanceEth < minBorrowEth) return uint256(Error.BORROW_BELOW_MIN);\\n    }\\n\\n    // Return no error\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param cToken Asset whose underlying is being borrowed\\n   * @param exchangeRateMantissa Underlying/cToken exchange rate\\n   * @param accountTokens Initial account cToken balance\\n   * @param accountTokens Underlying amount to mint\\n   */\\n  function mintWithinLimits(\\n    address cToken,\\n    uint256 exchangeRateMantissa,\\n    uint256 accountTokens,\\n    uint256 mintAmount\\n  ) external override returns (uint256) {\\n    // Return no error\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates borrow and reverts on rejection. May emit logs.\\n   * @param cToken Asset whose underlying is being borrowed\\n   * @param borrower The address borrowing the underlying\\n   * @param borrowAmount The amount of the underlying asset requested to borrow\\n   */\\n  function borrowVerify(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    borrower;\\n    borrowAmount;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\\n   * @param cToken The market to verify the repay against\\n   * @param payer The account which would repay the asset\\n   * @param borrower The account which would borrowed the asset\\n   * @param repayAmount The amount of the underlying asset the account would repay\\n   * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external override returns (uint256) {\\n    // Shh - currently unused\\n    payer;\\n    borrower;\\n    repayAmount;\\n\\n    // Make sure market is listed\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreBorrowerAction(cToken, borrower);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n   * @param cToken Asset being repaid\\n   * @param payer The address repaying the borrow\\n   * @param borrower The address of the borrower\\n   * @param actualRepayAmount The amount of underlying being repaid\\n   */\\n  function repayBorrowVerify(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 actualRepayAmount,\\n    uint256 borrowerIndex\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    payer;\\n    borrower;\\n    actualRepayAmount;\\n    borrowerIndex;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the liquidation should be allowed to occur\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param repayAmount The amount of underlying being repaid\\n   */\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external override returns (uint256) {\\n    // Shh - currently unused\\n    liquidator;\\n\\n    // Make sure markets are listed\\n    if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Get borrowers's underlying borrow balance\\n    uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\n\\n    /* allow accounts to be liquidated if the market is deprecated */\\n    if (isDeprecated(CToken(cTokenBorrowed))) {\\n      require(borrowBalance >= repayAmount, \\\"Can not repay more than the total borrow\\\");\\n    } else {\\n      /* The borrower must have shortfall in order to be liquidatable */\\n      (Error err, , uint256 shortfall) = getAccountLiquidityInternal(borrower);\\n      if (err != Error.NO_ERROR) {\\n        return uint256(err);\\n      }\\n\\n      if (shortfall == 0) {\\n        return uint256(Error.INSUFFICIENT_SHORTFALL);\\n      }\\n\\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\\n      uint256 maxClose = mul_ScalarTruncate(Exp({ mantissa: closeFactorMantissa }), borrowBalance);\\n      if (repayAmount > maxClose) {\\n        return uint256(Error.TOO_MUCH_REPAY);\\n      }\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param actualRepayAmount The amount of underlying being repaid\\n   */\\n  function liquidateBorrowVerify(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 actualRepayAmount,\\n    uint256 seizeTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cTokenBorrowed;\\n    cTokenCollateral;\\n    liquidator;\\n    borrower;\\n    actualRepayAmount;\\n    seizeTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the seizing of assets should be allowed to occur\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param seizeTokens The number of collateral tokens to seize\\n   */\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n    // Shh - currently unused\\n    liquidator;\\n    borrower;\\n    seizeTokens;\\n\\n    // Make sure markets are listed\\n    if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Make sure cToken Comptrollers are identical\\n    if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\n      return uint256(Error.COMPTROLLER_MISMATCH);\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreTransferAction(cTokenCollateral, borrower, liquidator);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates seize and reverts on rejection. May emit logs.\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param seizeTokens The number of collateral tokens to seize\\n   */\\n  function seizeVerify(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cTokenCollateral;\\n    cTokenBorrowed;\\n    liquidator;\\n    borrower;\\n    seizeTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\\n   * @param cToken The market to verify the transfer against\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   * @param transferTokens The number of cTokens to transfer\\n   * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function transferAllowed(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n    // Currently the only consideration is whether or not\\n    //  the src is allowed to redeem this many tokens\\n    uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n    if (allowed != uint256(Error.NO_ERROR)) {\\n      return allowed;\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreTransferAction(cToken, src, dst);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates transfer and reverts on rejection. May emit logs.\\n   * @param cToken Asset being transferred\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   * @param transferTokens The number of cTokens to transfer\\n   */\\n  function transferVerify(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external override {\\n    // Shh - currently unused\\n    cToken;\\n    src;\\n    dst;\\n    transferTokens;\\n\\n    // Shh - we don't ever want this hook to be marked pure\\n    if (false) {\\n      maxAssets = maxAssets;\\n    }\\n  }\\n\\n  /*** Flywheel Hooks ***/\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n   * @param cToken The relevant market\\n   * @param supplier The minter/redeemer\\n   */\\n  function flywheelPreSupplierAction(address cToken, address supplier) internal {\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      RewardsDistributorDelegate(rewardsDistributors[i]).flywheelPreSupplierAction(cToken, supplier);\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n   * @param cToken The relevant market\\n   * @param borrower The borrower\\n   */\\n  function flywheelPreBorrowerAction(address cToken, address borrower) internal {\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      RewardsDistributorDelegate(rewardsDistributors[i]).flywheelPreBorrowerAction(cToken, borrower);\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-transfer and pre-seize\\n   * @param cToken The relevant market\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   */\\n  function flywheelPreTransferAction(\\n    address cToken,\\n    address src,\\n    address dst\\n  ) internal {\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      RewardsDistributorDelegate(rewardsDistributors[i]).flywheelPreTransferAction(cToken, src, dst);\\n  }\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  /**\\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n   *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n   *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n   */\\n  struct AccountLiquidityLocalVars {\\n    uint256 sumCollateral;\\n    uint256 sumBorrowPlusEffects;\\n    uint256 cTokenBalance;\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n    uint256 oraclePriceMantissa;\\n    Exp collateralFactor;\\n    Exp exchangeRate;\\n    Exp oraclePrice;\\n    Exp tokensToDenom;\\n  }\\n\\n  /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n  function getAccountLiquidity(address account)\\n    public\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    (Error err, uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      account,\\n      CToken(address(0)),\\n      0,\\n      0\\n    );\\n\\n    return (uint256(err), liquidity, shortfall);\\n  }\\n\\n  /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n  function getAccountLiquidityInternal(address account)\\n    internal\\n    view\\n    returns (\\n      Error,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return getHypotheticalAccountLiquidityInternal(account, CToken(address(0)), 0, 0);\\n  }\\n\\n  /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n  function getHypotheticalAccountLiquidity(\\n    address account,\\n    address cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount\\n  )\\n    public\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    (Error err, uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      account,\\n      CToken(cTokenModify),\\n      redeemTokens,\\n      borrowAmount\\n    );\\n    return (uint256(err), liquidity, shortfall);\\n  }\\n\\n  /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n  function getHypotheticalAccountLiquidityInternal(\\n    address account,\\n    CToken cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount\\n  )\\n    internal\\n    view\\n    returns (\\n      Error,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n    uint256 oErr;\\n\\n    // For each asset the account is in\\n    CToken[] memory assets = accountAssets[account];\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      CToken asset = assets[i];\\n\\n      // Read the balances and exchange rate from the cToken\\n      (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n      if (oErr != 0) {\\n        // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n        return (Error.SNAPSHOT_ERROR, 0, 0);\\n      }\\n      vars.collateralFactor = Exp({ mantissa: markets[address(asset)].collateralFactorMantissa });\\n      vars.exchangeRate = Exp({ mantissa: vars.exchangeRateMantissa });\\n\\n      // Get the normalized price of the asset\\n      vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n      if (vars.oraclePriceMantissa == 0) {\\n        return (Error.PRICE_ERROR, 0, 0);\\n      }\\n      vars.oraclePrice = Exp({ mantissa: vars.oraclePriceMantissa });\\n\\n      // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n      vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\n\\n      // sumCollateral += tokensToDenom * cTokenBalance\\n      vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\\n\\n      // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n      vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n        vars.oraclePrice,\\n        vars.borrowBalance,\\n        vars.sumBorrowPlusEffects\\n      );\\n\\n      // Calculate effects of interacting with cTokenModify\\n      if (asset == cTokenModify) {\\n        // redeem effect\\n        // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n          vars.tokensToDenom,\\n          redeemTokens,\\n          vars.sumBorrowPlusEffects\\n        );\\n\\n        // borrow effect\\n        // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n          vars.oraclePrice,\\n          borrowAmount,\\n          vars.sumBorrowPlusEffects\\n        );\\n      }\\n    }\\n\\n    // These are safe, as the underflow condition is checked first\\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n      return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n    } else {\\n      return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n   * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n   * @param cTokenBorrowed The address of the borrowed cToken\\n   * @param cTokenCollateral The address of the collateral cToken\\n   * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n   * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n   */\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 actualRepayAmount\\n  ) external view override returns (uint256, uint256) {\\n    /* Read oracle prices for borrowed and collateral markets */\\n    uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\\n    uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));\\n    if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n      return (uint256(Error.PRICE_ERROR), 0);\\n    }\\n\\n    /*\\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n     *  seizeTokens = seizeAmount / exchangeRate\\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n     */\\n    uint256 exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n    uint256 seizeTokens;\\n    Exp memory numerator;\\n    Exp memory denominator;\\n    Exp memory ratio;\\n\\n    numerator = mul_(Exp({ mantissa: liquidationIncentiveMantissa }), Exp({ mantissa: priceBorrowedMantissa }));\\n    denominator = mul_(Exp({ mantissa: priceCollateralMantissa }), Exp({ mantissa: exchangeRateMantissa }));\\n    ratio = div_(numerator, denominator);\\n\\n    seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n    return (uint256(Error.NO_ERROR), seizeTokens);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Add a RewardsDistributor contracts.\\n   * @dev Admin function to add a RewardsDistributor contract\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addRewardsDistributor(address distributor) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK);\\n    }\\n\\n    // Check marker method\\n    require(RewardsDistributorDelegate(distributor).isRewardsDistributor(), \\\"marker method returned false\\\");\\n\\n    // Check for existing RewardsDistributor\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      require(distributor != rewardsDistributors[i], \\\"RewardsDistributor contract already added\\\");\\n\\n    // Add RewardsDistributor to array\\n    rewardsDistributors.push(distributor);\\n    emit AddedRewardsDistributor(distributor);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the whitelist enforcement for the comptroller\\n   * @dev Admin function to set a new whitelist enforcement boolean\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_ENFORCEMENT_OWNER_CHECK);\\n    }\\n\\n    // Check if `enforceWhitelist` already equals `enforce`\\n    if (enforceWhitelist == enforce) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    // Set comptroller's `enforceWhitelist` to `enforce`\\n    enforceWhitelist = enforce;\\n\\n    // Emit WhitelistEnforcementChanged(bool enforce);\\n    emit WhitelistEnforcementChanged(enforce);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the whitelist `statuses` for `suppliers`\\n   * @dev Admin function to set the whitelist `statuses` for `suppliers`\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_STATUS_OWNER_CHECK);\\n    }\\n\\n    // Set whitelist statuses for suppliers\\n    for (uint256 i = 0; i < suppliers.length; i++) {\\n      address supplier = suppliers[i];\\n\\n      if (statuses[i]) {\\n        // If not already whitelisted, add to whitelist\\n        if (!whitelist[supplier]) {\\n          whitelist[supplier] = true;\\n          whitelistArray.push(supplier);\\n          whitelistIndexes[supplier] = whitelistArray.length - 1;\\n        }\\n      } else {\\n        // If whitelisted, remove from whitelist\\n        if (whitelist[supplier]) {\\n          whitelistArray[whitelistIndexes[supplier]] = whitelistArray[whitelistArray.length - 1]; // Copy last item in list to location of item to be removed\\n          whitelistArray.pop(); // Reduce length by 1\\n          whitelistIndexes[whitelistArray[whitelistIndexes[supplier]]] = whitelistIndexes[supplier]; // Set whitelist index of moved item to correct index\\n          whitelistIndexes[supplier] = 0; // Reset supplier whitelist index to 0 for a gas refund\\n          whitelist[supplier] = false; // Tell the contract that the supplier is no longer whitelisted\\n        }\\n      }\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets a new price oracle for the comptroller\\n   * @dev Admin function to set a new price oracle\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n    }\\n\\n    // Track the old oracle for the comptroller\\n    PriceOracle oldOracle = oracle;\\n\\n    // Set comptroller's oracle to newOracle\\n    oracle = newOracle;\\n\\n    // Emit NewPriceOracle(oldOracle, newOracle)\\n    emit NewPriceOracle(oldOracle, newOracle);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the closeFactor used when liquidating borrows\\n   * @dev Admin function to set closeFactor\\n   * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\\n    }\\n\\n    // Check limits\\n    Exp memory newCloseFactorExp = Exp({ mantissa: newCloseFactorMantissa });\\n    Exp memory lowLimit = Exp({ mantissa: closeFactorMinMantissa });\\n    if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n    }\\n\\n    Exp memory highLimit = Exp({ mantissa: closeFactorMaxMantissa });\\n    if (lessThanExp(highLimit, newCloseFactorExp)) {\\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n    }\\n\\n    // Set pool close factor to new close factor, remember old value\\n    uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n    closeFactorMantissa = newCloseFactorMantissa;\\n\\n    // Emit event\\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the collateralFactor for a market\\n   * @dev Admin function to set per-market collateralFactor\\n   * @param cToken The market to set the factor on\\n   * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setCollateralFactor(CToken cToken, uint256 newCollateralFactorMantissa) public returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n    }\\n\\n    // Verify market is listed\\n    Market storage market = markets[address(cToken)];\\n    if (!market.isListed) {\\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n    }\\n\\n    Exp memory newCollateralFactorExp = Exp({ mantissa: newCollateralFactorMantissa });\\n\\n    // Check collateral factor <= 0.9\\n    Exp memory highLimit = Exp({ mantissa: collateralFactorMaxMantissa });\\n    if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n      return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n    }\\n\\n    // If collateral factor != 0, fail if price == 0\\n    if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\\n      return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n    }\\n\\n    // Set market's collateral factor to new collateral factor, remember old value\\n    uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n    market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n    // Emit event with asset, old collateral factor, and new collateral factor\\n    emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets liquidationIncentive\\n   * @dev Admin function to set liquidationIncentive\\n   * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n    }\\n\\n    // Check de-scaled min <= newLiquidationIncentive <= max\\n    Exp memory newLiquidationIncentive = Exp({ mantissa: newLiquidationIncentiveMantissa });\\n    Exp memory minLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMinMantissa });\\n    if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n    }\\n\\n    Exp memory maxLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMaxMantissa });\\n    if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n    }\\n\\n    // Save current value for use in log\\n    uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n    // Set liquidation incentive to new incentive\\n    liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n    // Emit event with old incentive, new incentive\\n    emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Add the market to the markets mapping and set it as listed\\n   * @dev Admin function to set isListed and add support for the market\\n   * @param cToken The address of the market (token) to list\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _supportMarket(CToken cToken) internal returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n    }\\n\\n    // Is market already listed?\\n    if (markets[address(cToken)].isListed) {\\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n    }\\n    // Sanity check to make sure its really a CToken\\n    require(cToken.isCToken(), \\\"marker method returned false\\\");\\n\\n    // Check cToken.comptroller == this\\n    require(address(cToken.comptroller()) == address(this), \\\"Cannot support a market with a different Comptroller.\\\");\\n\\n    // Make sure market is not already listed\\n    address underlying = cToken.isCEther() ? address(0) : CErc20(address(cToken)).underlying();\\n\\n    if (address(cTokensByUnderlying[underlying]) != address(0)) {\\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n    }\\n\\n    // List market and emit event\\n    Market storage market = markets[address(cToken)];\\n    market.isListed = true;\\n    market.collateralFactorMantissa = 0;\\n    allMarkets.push(cToken);\\n    cTokensByUnderlying[underlying] = cToken;\\n    emit MarketListed(cToken);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\\n   * @dev Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _deployMarket(\\n    bool isCEther,\\n    bytes calldata constructorData,\\n    uint256 collateralFactorMantissa\\n  ) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n    }\\n\\n    // Temporarily enable Fuse admin rights for asset deployment (storing the original value)\\n    bool oldFuseAdminHasRights = fuseAdminHasRights;\\n    fuseAdminHasRights = true;\\n\\n    // Deploy via Fuse admin\\n    CToken cToken = CToken(\\n      isCEther\\n        ? IFuseFeeDistributor(fuseAdmin).deployCEther(constructorData)\\n        : IFuseFeeDistributor(fuseAdmin).deployCErc20(constructorData)\\n    );\\n    // Reset Fuse admin rights to the original value\\n    fuseAdminHasRights = oldFuseAdminHasRights;\\n    // Support market here in the Comptroller\\n    uint256 err = _supportMarket(cToken);\\n\\n    // Set collateral factor\\n    return err == uint256(Error.NO_ERROR) ? _setCollateralFactor(cToken, collateralFactorMantissa) : err;\\n  }\\n\\n  /**\\n   * @notice Removed a market from the markets mapping and sets it as unlisted\\n   * @dev Admin function unset isListed and collateralFactorMantissa and unadd support for the market\\n   * @param cToken The address of the market (token) to unlist\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _unsupportMarket(CToken cToken) external returns (uint256) {\\n    // Check admin rights\\n    if (!hasAdminRights()) return fail(Error.UNAUTHORIZED, FailureInfo.UNSUPPORT_MARKET_OWNER_CHECK);\\n\\n    // Check if market is already unlisted\\n    if (!markets[address(cToken)].isListed)\\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.UNSUPPORT_MARKET_DOES_NOT_EXIST);\\n\\n    // Check if market is in use\\n    if (cToken.totalSupply() > 0) return fail(Error.NONZERO_TOTAL_SUPPLY, FailureInfo.UNSUPPORT_MARKET_IN_USE);\\n\\n    // Unlist market\\n    delete markets[address(cToken)];\\n\\n    /* Delete cToken from allMarkets */\\n    // load into memory for faster iteration\\n    CToken[] memory _allMarkets = allMarkets;\\n    uint256 len = _allMarkets.length;\\n    uint256 assetIndex = len;\\n    for (uint256 i = 0; i < len; i++) {\\n      if (_allMarkets[i] == cToken) {\\n        assetIndex = i;\\n        break;\\n      }\\n    }\\n\\n    // We *must* have found the asset in the list or our redundant data structure is broken\\n    assert(assetIndex < len);\\n\\n    // copy last item in list to location of item to be removed, reduce length by 1\\n    allMarkets[assetIndex] = allMarkets[allMarkets.length - 1];\\n    allMarkets.pop();\\n\\n    cTokensByUnderlying[cToken.isCEther() ? address(0) : CErc20(address(cToken)).underlying()] = CToken(address(0));\\n    emit MarketUnlisted(cToken);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Toggles the auto-implementation feature\\n   * @param enabled If the feature is to be enabled\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _toggleAutoImplementations(bool enabled) public returns (uint256) {\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK);\\n    }\\n\\n    // Return no error if already set to the desired value\\n    if (autoImplementation == enabled) return uint256(Error.NO_ERROR);\\n\\n    // Store autoImplementation with value enabled\\n    autoImplementation = enabled;\\n\\n    // Emit AutoImplementationsToggled(enabled)\\n    emit AutoImplementationsToggled(enabled);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\\n   * @dev Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\\n   * @param cTokens The addresses of the markets (tokens) to change the supply caps for\\n   * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\n   */\\n  function _setMarketSupplyCaps(CToken[] calldata cTokens, uint256[] calldata newSupplyCaps) external {\\n    require(\\n      msg.sender == admin || msg.sender == borrowCapGuardian,\\n      \\\"only admin or borrow cap guardian can set supply caps\\\"\\n    );\\n\\n    uint256 numMarkets = cTokens.length;\\n    uint256 numSupplyCaps = newSupplyCaps.length;\\n\\n    require(numMarkets != 0 && numMarkets == numSupplyCaps, \\\"invalid input\\\");\\n\\n    for (uint256 i = 0; i < numMarkets; i++) {\\n      supplyCaps[address(cTokens[i])] = newSupplyCaps[i];\\n      emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n   * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n   * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n   * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n   */\\n  function _setMarketBorrowCaps(CToken[] calldata cTokens, uint256[] calldata newBorrowCaps) external {\\n    require(\\n      msg.sender == admin || msg.sender == borrowCapGuardian,\\n      \\\"only admin or borrow cap guardian can set borrow caps\\\"\\n    );\\n\\n    uint256 numMarkets = cTokens.length;\\n    uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n    require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n    for (uint256 i = 0; i < numMarkets; i++) {\\n      borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n      emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Admin function to change the Borrow Cap Guardian\\n   * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n   */\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n    require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\n\\n    // Save current value for inclusion in log\\n    address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n    // Store borrowCapGuardian with value newBorrowCapGuardian\\n    borrowCapGuardian = newBorrowCapGuardian;\\n\\n    // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n    emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n  }\\n\\n  /**\\n   * @notice Admin function to change the Pause Guardian\\n   * @param newPauseGuardian The address of the new Pause Guardian\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _setPauseGuardian(address newPauseGuardian) public returns (uint256) {\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n    }\\n\\n    // Save current value for inclusion in log\\n    address oldPauseGuardian = pauseGuardian;\\n\\n    // Store pauseGuardian with value newPauseGuardian\\n    pauseGuardian = newPauseGuardian;\\n\\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n    require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\n    require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n    mintGuardianPaused[address(cToken)] = state;\\n    emit ActionPaused(cToken, \\\"Mint\\\", state);\\n    return state;\\n  }\\n\\n  function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n    require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\n    require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n    borrowGuardianPaused[address(cToken)] = state;\\n    emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n    return state;\\n  }\\n\\n  function _setTransferPaused(bool state) public returns (bool) {\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\n    require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n    transferGuardianPaused = state;\\n    emit ActionPaused(\\\"Transfer\\\", state);\\n    return state;\\n  }\\n\\n  function _setSeizePaused(bool state) public returns (bool) {\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"only pause guardian and admin can pause\\\");\\n    require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n    seizeGuardianPaused = state;\\n    emit ActionPaused(\\\"Seize\\\", state);\\n    return state;\\n  }\\n\\n  function _become(Unitroller unitroller) public {\\n    require(\\n      (msg.sender == address(fuseAdmin) && unitroller.fuseAdminHasRights()) ||\\n        (msg.sender == unitroller.admin() && unitroller.adminHasRights()),\\n      \\\"only unitroller admin can change brains\\\"\\n    );\\n\\n    uint256 changeStatus = unitroller._acceptImplementation();\\n    require(changeStatus == 0, \\\"change not authorized\\\");\\n\\n    Comptroller(address(unitroller))._becomeImplementation();\\n  }\\n\\n  function _becomeImplementation() external {\\n    require(msg.sender == comptrollerImplementation, \\\"only implementation may call _becomeImplementation\\\");\\n\\n    if (!_notEnteredInitialized) {\\n      _notEntered = true;\\n      _notEnteredInitialized = true;\\n    }\\n  }\\n\\n  /*** Helper Functions ***/\\n\\n  /**\\n   * @notice Return all of the markets\\n   * @dev The automatic getter may be used to access an individual market.\\n   * @return The list of market addresses\\n   */\\n  function getAllMarkets() public view returns (CToken[] memory) {\\n    return allMarkets;\\n  }\\n\\n  /**\\n   * @notice Return all of the borrowers\\n   * @dev The automatic getter may be used to access an individual borrower.\\n   * @return The list of borrower account addresses\\n   */\\n  function getAllBorrowers() public view returns (address[] memory) {\\n    return allBorrowers;\\n  }\\n\\n  /**\\n   * @notice Return all of the whitelist\\n   * @dev The automatic getter may be used to access an individual whitelist status.\\n   * @return The list of borrower account addresses\\n   */\\n  function getWhitelist() external view returns (address[] memory) {\\n    return whitelistArray;\\n  }\\n\\n  /**\\n   * @notice Returns an array of all RewardsDistributors\\n   */\\n  function getRewardsDistributors() external view returns (address[] memory) {\\n    return rewardsDistributors;\\n  }\\n\\n  /**\\n   * @notice Returns true if the given cToken market has been deprecated\\n   * @dev All borrows in a deprecated cToken market can be immediately liquidated\\n   * @param cToken The market to check if deprecated\\n   */\\n  function isDeprecated(CToken cToken) public view returns (bool) {\\n    return\\n      markets[address(cToken)].collateralFactorMantissa == 0 &&\\n      borrowGuardianPaused[address(cToken)] == true &&\\n      add_(add_(cToken.reserveFactorMantissa(), cToken.adminFeeMantissa()), cToken.fuseFeeMantissa()) == 1e18;\\n  }\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  /**\\n   * @dev Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention.\\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\n   */\\n  function _beforeNonReentrant() external override {\\n    require(markets[msg.sender].isListed, \\\"Comptroller:_beforeNonReentrant: caller not listed as market\\\");\\n    require(_notEntered, \\\"re-entered across assets\\\");\\n    _notEntered = false;\\n  }\\n\\n  /**\\n   * @dev Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention.\\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\n   */\\n  function _afterNonReentrant() external override {\\n    require(markets[msg.sender].isListed, \\\"Comptroller:_afterNonReentrant: caller not listed as market\\\");\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n  }\\n}\\n\",\"keccak256\":\"0x5c0370790288f4f19141c163098645bb907d9f275e6add16a3ba98c80f223fe5\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nabstract contract ComptrollerInterface {\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\n  bool public constant isComptroller = true;\\n\\n  /*** Assets You Are In ***/\\n\\n  function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\\n\\n  function exitMarket(address cToken) external virtual returns (uint256);\\n\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount\\n  ) external virtual returns (uint256);\\n\\n  function mintWithinLimits(\\n    address cToken,\\n    uint256 exchangeRateMantissa,\\n    uint256 accountTokens,\\n    uint256 mintAmount\\n  ) external virtual returns (uint256);\\n\\n  function mintVerify(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount,\\n    uint256 mintTokens\\n  ) external virtual;\\n\\n  function redeemAllowed(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) external virtual returns (uint256);\\n\\n  function redeemVerify(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemAmount,\\n    uint256 redeemTokens\\n  ) external virtual;\\n\\n  function borrowAllowed(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external virtual returns (uint256);\\n\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external virtual returns (uint256);\\n\\n  function borrowVerify(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external virtual;\\n\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external virtual returns (uint256);\\n\\n  function repayBorrowVerify(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount,\\n    uint256 borrowerIndex\\n  ) external virtual;\\n\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external virtual returns (uint256);\\n\\n  function liquidateBorrowVerify(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    uint256 seizeTokens\\n  ) external virtual;\\n\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  function seizeVerify(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual;\\n\\n  function transferAllowed(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external virtual returns (uint256);\\n\\n  function transferVerify(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external virtual;\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 repayAmount\\n  ) external view virtual returns (uint256, uint256);\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  function _beforeNonReentrant() external virtual;\\n\\n  function _afterNonReentrant() external virtual;\\n}\\n\",\"keccak256\":\"0x82d6d81c2b784a7cafce53a5f611c9e33c08c55b262d0b56e425ed0f31a67d8c\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n  /*\\n   * Administrator for Fuse\\n   */\\n  address payable public fuseAdmin;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address public pendingAdmin;\\n\\n  /**\\n   * @notice Whether or not the Fuse admin has admin rights\\n   */\\n  bool public fuseAdminHasRights = true;\\n\\n  /**\\n   * @notice Whether or not the admin has admin rights\\n   */\\n  bool public adminHasRights = true;\\n\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(fuseAdmin) && fuseAdminHasRights);\\n  }\\n\\n  /**\\n   * @notice Active brains of Unitroller\\n   */\\n  address public comptrollerImplementation;\\n\\n  /**\\n   * @notice Pending brains of Unitroller\\n   */\\n  address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n  /**\\n   * @notice Oracle which gives the price of any given asset\\n   */\\n  PriceOracle public oracle;\\n\\n  /**\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n   */\\n  uint256 public closeFactorMantissa;\\n\\n  /**\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\n   */\\n  uint256 public liquidationIncentiveMantissa;\\n\\n  /*\\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\n   */\\n  uint256 internal maxAssets;\\n\\n  /**\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n   */\\n  mapping(address => CToken[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n  struct Market {\\n    // Whether or not this market is listed\\n    bool isListed;\\n    // Multiplier representing the most one can borrow against their collateral in this market.\\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\\n    // Must be between 0 and 1, and stored as a mantissa.\\n    uint256 collateralFactorMantissa;\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => bool) accountMembership;\\n  }\\n\\n  /**\\n   * @notice Official mapping of cTokens -> Market metadata\\n   * @dev Used e.g. to determine if a market is supported\\n   */\\n  mapping(address => Market) public markets;\\n\\n  /// @notice A list of all markets\\n  CToken[] public allMarkets;\\n\\n  /**\\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\\n   */\\n  mapping(address => bool) internal borrowers;\\n\\n  /// @notice A list of all borrowers who have entered markets\\n  address[] public allBorrowers;\\n\\n  // Indexes of borrower account addresses in the `allBorrowers` array\\n  mapping(address => uint256) internal borrowerIndexes;\\n\\n  /**\\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\n   */\\n  mapping(address => bool) public suppliers;\\n\\n  /// @notice All cTokens addresses mapped by their underlying token addresses\\n  mapping(address => CToken) public cTokensByUnderlying;\\n\\n  /// @notice Whether or not the supplier whitelist is enforced\\n  bool public enforceWhitelist;\\n\\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\n  mapping(address => bool) public whitelist;\\n\\n  /// @notice An array of all whitelisted accounts\\n  address[] public whitelistArray;\\n\\n  // Indexes of account addresses in the `whitelistArray` array\\n  mapping(address => uint256) internal whitelistIndexes;\\n\\n  /**\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n   *  Actions which allow users to remove their own assets cannot be paused.\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n   */\\n  address public pauseGuardian;\\n  bool public _mintGuardianPaused;\\n  bool public _borrowGuardianPaused;\\n  bool public transferGuardianPaused;\\n  bool public seizeGuardianPaused;\\n  mapping(address => bool) public mintGuardianPaused;\\n  mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n  /**\\n   * @dev Whether or not the implementation should be auto-upgraded.\\n   */\\n  bool public autoImplementation;\\n\\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n  address public borrowCapGuardian;\\n\\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n  mapping(address => uint256) public borrowCaps;\\n\\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n  mapping(address => uint256) public supplyCaps;\\n\\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\\n  address[] public rewardsDistributors;\\n\\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\n  bool internal _notEntered;\\n\\n  /// @dev Whether or not _notEntered has been initialized\\n  bool internal _notEnteredInitialized;\\n}\\n\",\"keccak256\":\"0xfb35bd317958ecef0cca75aa5744598e877c571fe89a44cd7c05bf7ea03137ce\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return uint256 The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance uint256 The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return success bool Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining uint256 The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xcea1d290397e1c8eac89c96738e7ec55259a575f878152eeccf33c0cf6d008e5\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance uint256 The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transfer(address dst, uint256 amount) external;\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved\\n   * @return success bool Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining uint256 The number of tokens allowed to be spent\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9dfa9662f27e690c0c307a32addde924cd072cf0c050807d990e03190c140754\",\"license\":\"UNLICENSED\"},\"contracts/compound/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ncontract ComptrollerErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    COMPTROLLER_MISMATCH,\\n    INSUFFICIENT_SHORTFALL,\\n    INSUFFICIENT_LIQUIDITY,\\n    INVALID_CLOSE_FACTOR,\\n    INVALID_COLLATERAL_FACTOR,\\n    INVALID_LIQUIDATION_INCENTIVE,\\n    MARKET_NOT_ENTERED, // no longer possible\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    MATH_ERROR,\\n    NONZERO_BORROW_BALANCE,\\n    PRICE_ERROR,\\n    REJECTION,\\n    SNAPSHOT_ERROR,\\n    TOO_MANY_ASSETS,\\n    TOO_MUCH_REPAY,\\n    SUPPLIER_NOT_WHITELISTED,\\n    BORROW_BELOW_MIN,\\n    SUPPLY_ABOVE_MAX,\\n    NONZERO_TOTAL_SUPPLY\\n  }\\n\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n    ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\\n    EXIT_MARKET_BALANCE_OWED,\\n    EXIT_MARKET_REJECTION,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n    SET_MAX_ASSETS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n    SET_PRICE_ORACLE_OWNER_CHECK,\\n    SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\\n    SET_WHITELIST_STATUS_OWNER_CHECK,\\n    SUPPORT_MARKET_EXISTS,\\n    SUPPORT_MARKET_OWNER_CHECK,\\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n    UNSUPPORT_MARKET_OWNER_CHECK,\\n    UNSUPPORT_MARKET_DOES_NOT_EXIST,\\n    UNSUPPORT_MARKET_IN_USE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return uint256(err);\\n  }\\n}\\n\\ncontract TokenErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    BAD_INPUT,\\n    COMPTROLLER_REJECTION,\\n    COMPTROLLER_CALCULATION_ERROR,\\n    INTEREST_RATE_MODEL_ERROR,\\n    INVALID_ACCOUNT_PAIR,\\n    INVALID_CLOSE_AMOUNT_REQUESTED,\\n    INVALID_COLLATERAL_FACTOR,\\n    MATH_ERROR,\\n    MARKET_NOT_FRESH,\\n    MARKET_NOT_LISTED,\\n    TOKEN_INSUFFICIENT_ALLOWANCE,\\n    TOKEN_INSUFFICIENT_BALANCE,\\n    TOKEN_INSUFFICIENT_CASH,\\n    TOKEN_TRANSFER_IN_FAILED,\\n    TOKEN_TRANSFER_OUT_FAILED,\\n    UTILIZATION_ABOVE_MAX\\n  }\\n\\n  /*\\n   * Note: FailureInfo (but not Error) is kept in alphabetical order\\n   *       This is because FailureInfo grows significantly faster, and\\n   *       the order of Error has some meaning, while the order of FailureInfo\\n   *       is entirely arbitrary.\\n   */\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_FUSE_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n    BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    BORROW_ACCRUE_INTEREST_FAILED,\\n    BORROW_CASH_NOT_AVAILABLE,\\n    BORROW_FRESHNESS_CHECK,\\n    BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    BORROW_MARKET_NOT_LISTED,\\n    BORROW_COMPTROLLER_REJECTION,\\n    LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n    LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n    LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n    LIQUIDATE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n    LIQUIDATE_FRESHNESS_CHECK,\\n    LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n    LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_SEIZE_TOO_MUCH,\\n    MINT_ACCRUE_INTEREST_FAILED,\\n    MINT_COMPTROLLER_REJECTION,\\n    MINT_EXCHANGE_CALCULATION_FAILED,\\n    MINT_EXCHANGE_RATE_READ_FAILED,\\n    MINT_FRESHNESS_CHECK,\\n    MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    MINT_TRANSFER_IN_FAILED,\\n    MINT_TRANSFER_IN_NOT_POSSIBLE,\\n    NEW_UTILIZATION_RATE_ABOVE_MAX,\\n    REDEEM_ACCRUE_INTEREST_FAILED,\\n    REDEEM_COMPTROLLER_REJECTION,\\n    REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_RATE_READ_FAILED,\\n    REDEEM_FRESHNESS_CHECK,\\n    REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n    WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_FUSE_FEES_FRESH_CHECK,\\n    WITHDRAW_FUSE_FEES_VALIDATION,\\n    WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_ADMIN_FEES_FRESH_CHECK,\\n    WITHDRAW_ADMIN_FEES_VALIDATION,\\n    REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n    REDUCE_RESERVES_ADMIN_CHECK,\\n    REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n    REDUCE_RESERVES_FRESH_CHECK,\\n    REDUCE_RESERVES_VALIDATION,\\n    REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_COMPTROLLER_REJECTION,\\n    REPAY_BORROW_FRESHNESS_CHECK,\\n    REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COMPTROLLER_OWNER_CHECK,\\n    SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n    SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n    SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n    SET_MAX_ASSETS_OWNER_CHECK,\\n    SET_ORACLE_MARKET_NOT_LISTED,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_ADMIN_FEE_ADMIN_CHECK,\\n    SET_ADMIN_FEE_FRESH_CHECK,\\n    SET_ADMIN_FEE_BOUNDS_CHECK,\\n    SET_FUSE_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_FUSE_FEE_FRESH_CHECK,\\n    SET_FUSE_FEE_BOUNDS_CHECK,\\n    SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n    SET_RESERVE_FACTOR_ADMIN_CHECK,\\n    SET_RESERVE_FACTOR_FRESH_CHECK,\\n    SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n    TRANSFER_COMPTROLLER_REJECTION,\\n    TRANSFER_NOT_ALLOWED,\\n    TRANSFER_NOT_ENOUGH,\\n    TRANSFER_TOO_MUCH,\\n    ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n    ADD_RESERVES_FRESH_CHECK,\\n    ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint256(err);\\n  }\\n}\\n\",\"keccak256\":\"0x4f36aa20081620a7ffc7373f482d044c2e357cab768f45af2e15dfcccd8c5c9c\",\"license\":\"UNLICENSED\"},\"contracts/compound/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n  /**\\n   * @dev Creates an exponential from numerator and denominator values.\\n   *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n   *            or if `denom` is zero.\\n   */\\n  function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n    if (err1 != MathError.NO_ERROR) {\\n      return (err1, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n  }\\n\\n  /**\\n   * @dev Adds two exponentials, returning a new exponential.\\n   */\\n  function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n    return (error, Exp({ mantissa: result }));\\n  }\\n\\n  /**\\n   * @dev Subtracts two exponentials, returning a new exponential.\\n   */\\n  function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n    return (error, Exp({ mantissa: result }));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, returning a new Exp.\\n   */\\n  function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, truncate(product));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mulScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return addUInt(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Divide an Exp by a scalar, returning a new Exp.\\n   */\\n  function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n  }\\n\\n  /**\\n   * @dev Divide a scalar by an Exp, returning a new Exp.\\n   */\\n  function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n    /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n    (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n    return getExp(numerator, divisor.mantissa);\\n  }\\n\\n  /**\\n   * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n   */\\n  function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, truncate(fraction));\\n  }\\n\\n  /**\\n   * @dev Multiplies two exponentials, returning a new exponential.\\n   */\\n  function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    // We add half the scale before dividing so that we get rounding instead of truncation.\\n    //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n    // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n    (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n    if (err1 != MathError.NO_ERROR) {\\n      return (err1, Exp({ mantissa: 0 }));\\n    }\\n\\n    (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n    // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n    assert(err2 == MathError.NO_ERROR);\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n  }\\n\\n  /**\\n   * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n   */\\n  function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\\n    return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n  }\\n\\n  /**\\n   * @dev Multiplies three exponentials, returning a new exponential.\\n   */\\n  function mulExp3(\\n    Exp memory a,\\n    Exp memory b,\\n    Exp memory c\\n  ) internal pure returns (MathError, Exp memory) {\\n    (MathError err, Exp memory ab) = mulExp(a, b);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, ab);\\n    }\\n    return mulExp(ab, c);\\n  }\\n\\n  /**\\n   * @dev Divides two exponentials, returning a new exponential.\\n   *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n   *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n   */\\n  function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    return getExp(a.mantissa, b.mantissa);\\n  }\\n}\\n\",\"keccak256\":\"0x648e262fbead58731c4347e3539e1c4b6f140d8752405f129874ec23b23b3f09\",\"license\":\"UNLICENSED\"},\"contracts/compound/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n  uint256 constant expScale = 1e18;\\n  uint256 constant doubleScale = 1e36;\\n  uint256 constant halfExpScale = expScale / 2;\\n  uint256 constant mantissaOne = expScale;\\n\\n  struct Exp {\\n    uint256 mantissa;\\n  }\\n\\n  struct Double {\\n    uint256 mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint256) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2**224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return add_(a, b, \\\"addition overflow\\\");\\n  }\\n\\n  function add_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub_(a, b, \\\"subtraction underflow\\\");\\n  }\\n\\n  function sub_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n  }\\n\\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n  }\\n\\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mul_(a, b, \\\"multiplication overflow\\\");\\n  }\\n\\n  function mul_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    require(c / a == b, errorMessage);\\n    return c;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n  }\\n\\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n  }\\n\\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div_(a, b, \\\"divide by zero\\\");\\n  }\\n\\n  function div_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    return a / b;\\n  }\\n\\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n  }\\n}\\n\",\"keccak256\":\"0xec0df0038026b4e9c272de575121befd31d3a306fec5f157aaf1625fc08cfe69\",\"license\":\"UNLICENSED\"},\"contracts/compound/IFuseFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ninterface IFuseFeeDistributor {\\n  function minBorrowEth() external view returns (uint256);\\n\\n  function maxSupplyEth() external view returns (uint256);\\n\\n  function maxUtilizationRate() external view returns (uint256);\\n\\n  function interestFeeRate() external view returns (uint256);\\n\\n  function comptrollerImplementationWhitelist(address oldImplementation, address newImplementation)\\n    external\\n    view\\n    returns (bool);\\n\\n  function cErc20DelegateWhitelist(\\n    address oldImplementation,\\n    address newImplementation,\\n    bool allowResign\\n  ) external view returns (bool);\\n\\n  function cEtherDelegateWhitelist(\\n    address oldImplementation,\\n    address newImplementation,\\n    bool allowResign\\n  ) external view returns (bool);\\n\\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\n\\n  function latestCErc20Delegate(address oldImplementation)\\n    external\\n    view\\n    returns (\\n      address cErc20Delegate,\\n      bool allowResign,\\n      bytes memory becomeImplementationData\\n    );\\n\\n  function latestCEtherDelegate(address oldImplementation)\\n    external\\n    view\\n    returns (\\n      address cEtherDelegate,\\n      bool allowResign,\\n      bytes memory becomeImplementationData\\n    );\\n\\n  function deployCEther(bytes calldata constructorData) external returns (address);\\n\\n  function deployCErc20(bytes calldata constructorData) external returns (address);\\n\\n  fallback() external payable;\\n\\n  receive() external payable;\\n}\\n\",\"keccak256\":\"0xd765ee2dea782f443e59b3a239391bd57e2576d0c5218f1992975b7c2d8b0e3d\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x587a54b49d48df2cd91583eac93ddde4e2849f79d0441f179bf835e9dffe24e9\",\"license\":\"UNLICENSED\"},\"contracts/compound/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n  bool public constant isPriceOracle = true;\\n\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(CToken cToken) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x16943951c151400d491d9e73a9e15ec264b54933775b313972cac6c943dddfa0\",\"license\":\"UNLICENSED\"},\"contracts/compound/RewardsDistributorDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\nimport \\\"./Comptroller.sol\\\";\\nimport \\\"./RewardsDistributorStorage.sol\\\";\\n\\n/**\\n * @title RewardsDistributorDelegate (COMP distribution logic extracted from `Comptroller`)\\n * @author Compound\\n */\\ncontract RewardsDistributorDelegate is RewardsDistributorDelegateStorageV1, ExponentialNoError {\\n  /// @dev Notice that this contract is a RewardsDistributor\\n  bool public constant isRewardsDistributor = true;\\n\\n  /// @notice Emitted when pendingAdmin is changed\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /// @notice Emitted when a new COMP speed is calculated for a market\\n  event CompSupplySpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n  /// @notice Emitted when a new COMP speed is calculated for a market\\n  event CompBorrowSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n  /// @notice Emitted when a new COMP speed is set for a contributor\\n  event ContributorCompSpeedUpdated(address indexed contributor, uint256 newSpeed);\\n\\n  /// @notice Emitted when COMP is distributed to a supplier\\n  event DistributedSupplierComp(\\n    CToken indexed cToken,\\n    address indexed supplier,\\n    uint256 compDelta,\\n    uint256 compSupplyIndex\\n  );\\n\\n  /// @notice Emitted when COMP is distributed to a borrower\\n  event DistributedBorrowerComp(\\n    CToken indexed cToken,\\n    address indexed borrower,\\n    uint256 compDelta,\\n    uint256 compBorrowIndex\\n  );\\n\\n  /// @notice Emitted when COMP is granted by admin\\n  event CompGranted(address recipient, uint256 amount);\\n\\n  /// @notice The initial COMP index for a market\\n  uint224 public constant compInitialIndex = 1e36;\\n\\n  /// @dev Intitializer to set admin to caller and set reward token\\n  function initialize(address _rewardToken) external {\\n    require(msg.sender == admin, \\\"Only admin can initialize.\\\");\\n    require(rewardToken == address(0), \\\"Already initialized.\\\");\\n    require(_rewardToken != address(0), \\\"Cannot initialize reward token to the zero address.\\\");\\n    rewardToken = _rewardToken;\\n  }\\n\\n  /*** Set Admin ***/\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   */\\n  function _setPendingAdmin(address newPendingAdmin) external {\\n    // Check caller = admin\\n    require(msg.sender == admin, \\\"RewardsDistributor:_setPendingAdmin: admin only\\\");\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   */\\n  function _acceptAdmin() external {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    require(\\n      msg.sender == pendingAdmin && msg.sender != address(0),\\n      \\\"RewardsDistributor:_acceptAdmin: pending admin only\\\"\\n    );\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = address(0);\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n  }\\n\\n  /*** Comp Distribution ***/\\n\\n  /**\\n   * @notice Check the cToken before adding\\n   * @param cToken The market to add\\n   */\\n  function checkCToken(CToken cToken) internal view {\\n    // Make sure cToken is listed\\n    Comptroller comptroller = Comptroller(address(cToken.comptroller()));\\n    (bool isListed, ) = comptroller.markets(address(cToken));\\n    require(isListed == true, \\\"comp market is not listed\\\");\\n\\n    // Make sure distributor is added\\n    bool distributorAdded = false;\\n    address[] memory distributors = comptroller.getRewardsDistributors();\\n    for (uint256 i = 0; i < distributors.length; i++) if (distributors[i] == address(this)) distributorAdded = true;\\n    require(distributorAdded == true, \\\"distributor not added\\\");\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single market\\n   * @param cToken The market whose COMP speed to update\\n   * @param compSpeed New COMP speed for market\\n   */\\n  function setCompSupplySpeedInternal(CToken cToken, uint256 compSpeed) internal {\\n    uint256 currentCompSpeed = compSupplySpeeds[address(cToken)];\\n    if (currentCompSpeed != 0) {\\n      // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n      updateCompSupplyIndex(address(cToken));\\n    } else if (compSpeed != 0) {\\n      // Make sure cToken is listed and distributor is added\\n      checkCToken(cToken);\\n\\n      // Add the COMP market\\n      if (compSupplyState[address(cToken)].index == 0) {\\n        compSupplyState[address(cToken)] = CompMarketState({\\n          index: compInitialIndex,\\n          block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\n        });\\n\\n        // Add to allMarkets array if not already there\\n        if (compBorrowState[address(cToken)].index == 0) {\\n          allMarkets.push(cToken);\\n        }\\n      } else {\\n        // Update block number to ensure extra interest is not accrued during the prior period\\n        compSupplyState[address(cToken)].block = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n      }\\n    }\\n\\n    if (currentCompSpeed != compSpeed) {\\n      compSupplySpeeds[address(cToken)] = compSpeed;\\n      emit CompSupplySpeedUpdated(cToken, compSpeed);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single market\\n   * @param cToken The market whose COMP speed to update\\n   * @param compSpeed New COMP speed for market\\n   */\\n  function setCompBorrowSpeedInternal(CToken cToken, uint256 compSpeed) internal {\\n    uint256 currentCompSpeed = compBorrowSpeeds[address(cToken)];\\n    if (currentCompSpeed != 0) {\\n      // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n      Exp memory borrowIndex = Exp({ mantissa: cToken.borrowIndex() });\\n      updateCompBorrowIndex(address(cToken), borrowIndex);\\n    } else if (compSpeed != 0) {\\n      // Make sure cToken is listed and distributor is added\\n      checkCToken(cToken);\\n\\n      // Add the COMP market\\n      if (compBorrowState[address(cToken)].index == 0) {\\n        compBorrowState[address(cToken)] = CompMarketState({\\n          index: compInitialIndex,\\n          block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\n        });\\n\\n        // Add to allMarkets array if not already there\\n        if (compSupplyState[address(cToken)].index == 0) {\\n          allMarkets.push(cToken);\\n        }\\n      } else {\\n        // Update block number to ensure extra interest is not accrued during the prior period\\n        compBorrowState[address(cToken)].block = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n      }\\n    }\\n\\n    if (currentCompSpeed != compSpeed) {\\n      compBorrowSpeeds[address(cToken)] = compSpeed;\\n      emit CompBorrowSpeedUpdated(cToken, compSpeed);\\n    }\\n  }\\n\\n  /**\\n   * @notice Accrue COMP to the market by updating the supply index\\n   * @param cToken The market whose supply index to update\\n   */\\n  function updateCompSupplyIndex(address cToken) internal {\\n    CompMarketState storage supplyState = compSupplyState[cToken];\\n    uint256 supplySpeed = compSupplySpeeds[cToken];\\n    uint256 blockNumber = getBlockNumber();\\n    uint256 deltaBlocks = sub_(blockNumber, uint256(supplyState.block));\\n    if (deltaBlocks > 0 && supplySpeed > 0) {\\n      uint256 supplyTokens = CToken(cToken).totalSupply();\\n      uint256 compAccrued_ = mul_(deltaBlocks, supplySpeed);\\n      Double memory ratio = supplyTokens > 0 ? fraction(compAccrued_, supplyTokens) : Double({ mantissa: 0 });\\n      Double memory index = add_(Double({ mantissa: supplyState.index }), ratio);\\n      compSupplyState[cToken] = CompMarketState({\\n        index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n        block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\n      });\\n    } else if (deltaBlocks > 0 && supplyState.index > 0) {\\n      supplyState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Accrue COMP to the market by updating the borrow index\\n   * @param cToken The market whose borrow index to update\\n   */\\n  function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) internal {\\n    CompMarketState storage borrowState = compBorrowState[cToken];\\n    uint256 borrowSpeed = compBorrowSpeeds[cToken];\\n    uint256 blockNumber = getBlockNumber();\\n    uint256 deltaBlocks = sub_(blockNumber, uint256(borrowState.block));\\n    if (deltaBlocks > 0 && borrowSpeed > 0) {\\n      uint256 borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\\n      uint256 compAccrued_ = mul_(deltaBlocks, borrowSpeed);\\n      Double memory ratio = borrowAmount > 0 ? fraction(compAccrued_, borrowAmount) : Double({ mantissa: 0 });\\n      Double memory index = add_(Double({ mantissa: borrowState.index }), ratio);\\n      compBorrowState[cToken] = CompMarketState({\\n        index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n        block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\n      });\\n    } else if (deltaBlocks > 0 && borrowState.index > 0) {\\n      borrowState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\n   * @param cToken The market in which the supplier is interacting\\n   * @param supplier The address of the supplier to distribute COMP to\\n   */\\n  function distributeSupplierComp(address cToken, address supplier) internal {\\n    CompMarketState storage supplyState = compSupplyState[cToken];\\n    Double memory supplyIndex = Double({ mantissa: supplyState.index });\\n    Double memory supplierIndex = Double({ mantissa: compSupplierIndex[cToken][supplier] });\\n    compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\\n\\n    if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n      supplierIndex.mantissa = compInitialIndex;\\n    }\\n\\n    Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\n    uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\\n    uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\\n    uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\n    compAccrued[supplier] = supplierAccrued;\\n    emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex.mantissa);\\n  }\\n\\n  /**\\n   * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\n   * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n   * @param cToken The market in which the borrower is interacting\\n   * @param borrower The address of the borrower to distribute COMP to\\n   */\\n  function distributeBorrowerComp(\\n    address cToken,\\n    address borrower,\\n    Exp memory marketBorrowIndex\\n  ) internal {\\n    CompMarketState storage borrowState = compBorrowState[cToken];\\n    Double memory borrowIndex = Double({ mantissa: borrowState.index });\\n    Double memory borrowerIndex = Double({ mantissa: compBorrowerIndex[cToken][borrower] });\\n    compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\\n\\n    if (borrowerIndex.mantissa > 0) {\\n      Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\n      uint256 borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n      uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n      uint256 borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\n      compAccrued[borrower] = borrowerAccrued;\\n      emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex.mantissa);\\n    }\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param supplier The minter/redeemer\\n   */\\n  function flywheelPreSupplierAction(address cToken, address supplier) external {\\n    if (compSupplyState[cToken].index > 0) {\\n      updateCompSupplyIndex(cToken);\\n      distributeSupplierComp(cToken, supplier);\\n    }\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param borrower The borrower\\n   */\\n  function flywheelPreBorrowerAction(address cToken, address borrower) external {\\n    if (compBorrowState[cToken].index > 0) {\\n      Exp memory borrowIndex = Exp({ mantissa: CToken(cToken).borrowIndex() });\\n      updateCompBorrowIndex(cToken, borrowIndex);\\n      distributeBorrowerComp(cToken, borrower, borrowIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-transfer and pre-seize\\n   * @dev Called by the Comptroller\\n   * @param cToken The relevant market\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   */\\n  function flywheelPreTransferAction(\\n    address cToken,\\n    address src,\\n    address dst\\n  ) external {\\n    if (compSupplyState[cToken].index > 0) {\\n      updateCompSupplyIndex(cToken);\\n      distributeSupplierComp(cToken, src);\\n      distributeSupplierComp(cToken, dst);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate additional accrued COMP for a contributor since last accrual\\n   * @param contributor The address to calculate contributor rewards for\\n   */\\n  function updateContributorRewards(address contributor) public {\\n    uint256 compSpeed = compContributorSpeeds[contributor];\\n    uint256 blockNumber = getBlockNumber();\\n    uint256 deltaBlocks = sub_(blockNumber, lastContributorBlock[contributor]);\\n    if (deltaBlocks > 0 && compSpeed > 0) {\\n      uint256 newAccrued = mul_(deltaBlocks, compSpeed);\\n      uint256 contributorAccrued = add_(compAccrued[contributor], newAccrued);\\n\\n      compAccrued[contributor] = contributorAccrued;\\n      lastContributorBlock[contributor] = blockNumber;\\n    }\\n  }\\n\\n  /**\\n   * @notice Claim all the comp accrued by holder in all markets\\n   * @param holder The address to claim COMP for\\n   */\\n  function claimRewards(address holder) public {\\n    return claimRewards(holder, allMarkets);\\n  }\\n\\n  /**\\n   * @notice Claim all the comp accrued by holder in the specified markets\\n   * @param holder The address to claim COMP for\\n   * @param cTokens The list of markets to claim COMP in\\n   */\\n  function claimRewards(address holder, CToken[] memory cTokens) public {\\n    address[] memory holders = new address[](1);\\n    holders[0] = holder;\\n    claimRewards(holders, cTokens, true, true);\\n  }\\n\\n  /**\\n   * @notice Claim all comp accrued by the holders\\n   * @param holders The addresses to claim COMP for\\n   * @param cTokens The list of markets to claim COMP in\\n   * @param borrowers Whether or not to claim COMP earned by borrowing\\n   * @param suppliers Whether or not to claim COMP earned by supplying\\n   */\\n  function claimRewards(\\n    address[] memory holders,\\n    CToken[] memory cTokens,\\n    bool borrowers,\\n    bool suppliers\\n  ) public {\\n    for (uint256 i = 0; i < cTokens.length; i++) {\\n      CToken cToken = cTokens[i];\\n      if (borrowers == true && compBorrowState[address(cToken)].index > 0) {\\n        Exp memory borrowIndex = Exp({ mantissa: cToken.borrowIndex() });\\n        updateCompBorrowIndex(address(cToken), borrowIndex);\\n        for (uint256 j = 0; j < holders.length; j++) {\\n          distributeBorrowerComp(address(cToken), holders[j], borrowIndex);\\n        }\\n      }\\n      if (suppliers == true && compSupplyState[address(cToken)].index > 0) {\\n        updateCompSupplyIndex(address(cToken));\\n        for (uint256 j = 0; j < holders.length; j++) {\\n          distributeSupplierComp(address(cToken), holders[j]);\\n        }\\n      }\\n    }\\n    for (uint256 j = 0; j < holders.length; j++) {\\n      compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Transfer COMP to the user\\n   * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n   * @param user The address of the user to transfer COMP to\\n   * @param amount The amount of COMP to (possibly) transfer\\n   * @return The amount of COMP which was NOT transferred to the user\\n   */\\n  function grantCompInternal(address user, uint256 amount) internal returns (uint256) {\\n    EIP20NonStandardInterface comp = EIP20NonStandardInterface(rewardToken);\\n    uint256 compRemaining = comp.balanceOf(address(this));\\n    if (amount > 0 && amount <= compRemaining) {\\n      comp.transfer(user, amount);\\n      return 0;\\n    }\\n    return amount;\\n  }\\n\\n  /*** Comp Distribution Admin ***/\\n\\n  /**\\n   * @notice Transfer COMP to the recipient\\n   * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n   * @param recipient The address of the recipient to transfer COMP to\\n   * @param amount The amount of COMP to (possibly) transfer\\n   */\\n  function _grantComp(address recipient, uint256 amount) public {\\n    require(msg.sender == admin, \\\"only admin can grant comp\\\");\\n    uint256 amountLeft = grantCompInternal(recipient, amount);\\n    require(amountLeft == 0, \\\"insufficient comp for grant\\\");\\n    emit CompGranted(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single market\\n   * @param cToken The market whose COMP speed to update\\n   * @param compSpeed New COMP speed for market\\n   */\\n  function _setCompSupplySpeed(CToken cToken, uint256 compSpeed) public {\\n    require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n    setCompSupplySpeedInternal(cToken, compSpeed);\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single market\\n   * @param cToken The market whose COMP speed to update\\n   * @param compSpeed New COMP speed for market\\n   */\\n  function _setCompBorrowSpeed(CToken cToken, uint256 compSpeed) public {\\n    require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n    setCompBorrowSpeedInternal(cToken, compSpeed);\\n  }\\n\\n  /**\\n   * @notice Set COMP borrow and supply speeds for the specified markets.\\n   * @param cTokens The markets whose COMP speed to update.\\n   * @param supplySpeeds New supply-side COMP speed for the corresponding market.\\n   * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\\n   */\\n  function _setCompSpeeds(\\n    CToken[] memory cTokens,\\n    uint256[] memory supplySpeeds,\\n    uint256[] memory borrowSpeeds\\n  ) public {\\n    require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n\\n    uint256 numTokens = cTokens.length;\\n    require(\\n      numTokens == supplySpeeds.length && numTokens == borrowSpeeds.length,\\n      \\\"RewardsDistributor::_setCompSpeeds invalid input\\\"\\n    );\\n\\n    for (uint256 i = 0; i < numTokens; ++i) {\\n      setCompSupplySpeedInternal(cTokens[i], supplySpeeds[i]);\\n      setCompBorrowSpeedInternal(cTokens[i], borrowSpeeds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set COMP speed for a single contributor\\n   * @param contributor The contributor whose COMP speed to update\\n   * @param compSpeed New COMP speed for contributor\\n   */\\n  function _setContributorCompSpeed(address contributor, uint256 compSpeed) public {\\n    require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n\\n    // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\\n    updateContributorRewards(contributor);\\n    if (compSpeed == 0) {\\n      // release storage\\n      delete lastContributorBlock[contributor];\\n    } else {\\n      lastContributorBlock[contributor] = getBlockNumber();\\n    }\\n    compContributorSpeeds[contributor] = compSpeed;\\n\\n    emit ContributorCompSpeedUpdated(contributor, compSpeed);\\n  }\\n\\n  /*** Helper Functions */\\n\\n  function getBlockNumber() public view returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns an array of all markets.\\n   */\\n  function getAllMarkets() external view returns (CToken[] memory) {\\n    return allMarkets;\\n  }\\n}\\n\",\"keccak256\":\"0xe4cf3e84e1f0cd8b65a61ad6b759bf309118fa9100a89d9adbdcf735b930b6b9\",\"license\":\"UNLICENSED\"},\"contracts/compound/RewardsDistributorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract RewardsDistributorDelegatorStorage {\\n  /// @notice Administrator for this contract\\n  address public admin;\\n\\n  /// @notice Pending administrator for this contract\\n  address public pendingAdmin;\\n\\n  /// @notice Active brains of RewardsDistributor\\n  address public implementation;\\n}\\n\\n/**\\n * @title Storage for RewardsDistributorDelegate\\n * @notice For future upgrades, do not change RewardsDistributorDelegateStorageV1. Create a new\\n * contract which implements RewardsDistributorDelegateStorageV1 and following the naming convention\\n * RewardsDistributorDelegateStorageVX.\\n */\\ncontract RewardsDistributorDelegateStorageV1 is RewardsDistributorDelegatorStorage {\\n  /// @dev The token to reward (i.e., COMP)\\n  address public rewardToken;\\n\\n  struct CompMarketState {\\n    // The market's last updated compBorrowIndex or compSupplyIndex\\n    uint224 index;\\n    // The block number the index was last updated at\\n    uint32 block;\\n  }\\n\\n  /// @notice A list of all markets\\n  CToken[] public allMarkets;\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  mapping(address => uint256) public compSupplySpeeds;\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  mapping(address => uint256) public compBorrowSpeeds;\\n\\n  /// @notice The COMP market supply state for each market\\n  mapping(address => CompMarketState) public compSupplyState;\\n\\n  /// @notice The COMP market borrow state for each market\\n  mapping(address => CompMarketState) public compBorrowState;\\n\\n  /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n  mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n  /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n  mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\n\\n  /// @notice The COMP accrued but not yet transferred to each user\\n  mapping(address => uint256) public compAccrued;\\n\\n  /// @notice The portion of COMP that each contributor receives per block\\n  mapping(address => uint256) public compContributorSpeeds;\\n\\n  /// @notice Last block at which a contributor's COMP rewards have been allocated\\n  mapping(address => uint256) public lastContributorBlock;\\n}\\n\",\"keccak256\":\"0x7bf1ba6d0688351f789ff6273e17e0e20eac439a0fff865df409d222bed7b497\",\"license\":\"UNLICENSED\"},\"contracts/compound/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Comptroller.sol\\\";\\n\\n/**\\n * @title Unitroller\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is changed\\n   */\\n  event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Event emitted when the Fuse admin rights are changed\\n   */\\n  event FuseAdminRightsToggled(bool hasRights);\\n\\n  /**\\n   * @notice Event emitted when the admin rights are changed\\n   */\\n  event AdminRightsToggled(bool hasRights);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  constructor(address payable _fuseAdmin) {\\n    // Set admin to caller\\n    admin = msg.sender;\\n    fuseAdmin = _fuseAdmin;\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  function _setPendingImplementation(address newPendingImplementation) public returns (uint256) {\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n    }\\n    if (\\n      !IFuseFeeDistributor(fuseAdmin).comptrollerImplementationWhitelist(\\n        comptrollerImplementation,\\n        newPendingImplementation\\n      )\\n    ) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK);\\n    }\\n    //require(Comptroller(newPendingImplementation).fuseAdmin() == fuseAdmin, \\\"fuseAdmin not matching\\\");\\n\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n    pendingComptrollerImplementation = newPendingImplementation;\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n   * @dev Admin function for new implementation to accept it's role as implementation\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptImplementation() public returns (uint256) {\\n    // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n    if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldImplementation = comptrollerImplementation;\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n    comptrollerImplementation = pendingComptrollerImplementation;\\n\\n    pendingComptrollerImplementation = address(0);\\n\\n    emit NewImplementation(oldImplementation, comptrollerImplementation);\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Toggles Fuse admin rights.\\n   * @param hasRights Boolean indicating if the Fuse admin is to have rights.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _toggleFuseAdminRights(bool hasRights) external returns (uint256) {\\n    // Check caller = admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\n    }\\n\\n    // Check that rights have not already been set to the desired value\\n    if (fuseAdminHasRights == hasRights) return uint256(Error.NO_ERROR);\\n\\n    // Set fuseAdminHasRights\\n    fuseAdminHasRights = hasRights;\\n\\n    // Emit FuseAdminRightsToggled()\\n    emit FuseAdminRightsToggled(fuseAdminHasRights);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Toggles admin rights.\\n   * @param hasRights Boolean indicating if the admin is to have rights.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _toggleAdminRights(bool hasRights) external returns (uint256) {\\n    // Check caller = admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\n    }\\n\\n    // Check that rights have not already been set to the desired value\\n    if (adminHasRights == hasRights) return uint256(Error.NO_ERROR);\\n\\n    // Set adminHasRights\\n    adminHasRights = hasRights;\\n\\n    // Emit AdminRightsToggled()\\n    emit AdminRightsToggled(hasRights);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint256) {\\n    // Check caller = admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() public returns (uint256) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = address(0);\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * It returns to the external caller whatever the implementation returns\\n   * or forwards reverts.\\n   */\\n  fallback() external payable {\\n    // Check for automatic implementation\\n    if (msg.sender != address(this)) {\\n      (bool callSuccess, bytes memory data) = address(this).staticcall(abi.encodeWithSignature(\\\"autoImplementation()\\\"));\\n      bool autoImplementation;\\n      if (callSuccess) (autoImplementation) = abi.decode(data, (bool));\\n\\n      if (autoImplementation) {\\n        address latestComptrollerImplementation = IFuseFeeDistributor(fuseAdmin).latestComptrollerImplementation(\\n          comptrollerImplementation\\n        );\\n\\n        if (comptrollerImplementation != latestComptrollerImplementation) {\\n          address oldImplementation = comptrollerImplementation; // Save current value for inclusion in log\\n          comptrollerImplementation = latestComptrollerImplementation;\\n          emit NewImplementation(oldImplementation, comptrollerImplementation);\\n        }\\n      }\\n    }\\n\\n    // delegate all other functions to current implementation\\n    (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n    assembly {\\n      let free_mem_ptr := mload(0x40)\\n      returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n      switch success\\n      case 0 {\\n        revert(free_mem_ptr, returndatasize())\\n      }\\n      default {\\n        return(free_mem_ptr, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4327e692ac486f7bc869a3641bdea4d7f84501f8f941716c65d34b84b1d31aca\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526002805461ffff60a01b191661010160a01b1790553480156200002657600080fd5b5060405162005bf438038062005bf483398101604081905262000049916200006f565b600080546001600160a01b0319166001600160a01b0392909216919091179055620000a1565b6000602082840312156200008257600080fd5b81516001600160a01b03811681146200009a57600080fd5b9392505050565b615b4380620000b16000396000f3fe608060405234801561001057600080fd5b50600436106104955760003560e01c80636d154ea511610262578063bb82aa5e11610151578063d5333166116100ce578063e4028eee11610092578063e4028eee14610b4f578063e6653f3d14610b62578063e875544614610b76578063eabe7d9114610b7f578063ede4edd014610b92578063f851a44014610ba557600080fd5b8063d533316614610af6578063da3d454c14610b09578063dce1544914610b1c578063dcfbc0c714610b2f578063dd5cd22c14610b4257600080fd5b8063c8c9c97511610115578063c8c9c97514610aad578063c90c20b114610ac0578063d01f63f514610ac8578063d02f735114610ad0578063d251fefc14610ae357600080fd5b8063bb82aa5e14610a2c578063bdcdc25814610a3f578063c299823814610a52578063c488847b14610a72578063c6c5b0dd14610a9a57600080fd5b8063929fe9a1116101df578063abfceffc116101a3578063abfceffc146109dd578063ac0b0bb7146109f0578063b0772d0b14610a04578063b095721014610a0c578063b9b5b15314610a1957600080fd5b8063929fe9a11461094057806394543c1514610981578063952adf5a146109945780639b19251a146109a7578063aba35b98146109ca57600080fd5b80637dc0d1d0116102265780637dc0d1d0146108af578063819605a8146108c257806387f76303146108d55780638e8f294b146108e95780638ebf63641461092d57600080fd5b80636d154ea5146108355780636d35bf9114610858578063731f0c2b146108665780637515bafa14610889578063779b22941461089c57600080fd5b80633bcf7ec11161038957806351dff989116103065780635ec88c79116102ca5780635ec88c79146107ce5780635f5af1aa146107e15780635fc7e71e146107f4578063607ef6c114610807578063632e51421461081a5780636a56947e1461082257600080fd5b806351dff9891461077a57806352d84d1e1461078d57806355ee1fe1146107a05780635c778605146107b35780635d72de62146107c657600080fd5b80634ada90af1161034d5780634ada90af1461070a5780634e79238f146107135780634ef4c3e1146107415780634fd42e171461075457806351a485e41461076757600080fd5b80633bcf7ec11461067b5780633c94786f1461068e57806341c728b9146106a257806347ef3b3b146106d75780634a584432146106ea57600080fd5b806324008a6211610417578063317b0b77116103db578063317b0b771461060f57806331ff47fa1461062257806332abcdbe1461064b5780633605b51b14610660578063391957d71461066857600080fd5b806324008a62146105af57806324a3d622146105c257806326782247146105d55780632d70db78146105e85780632f1069ba146105fb57600080fd5b806318c882a51161045e57806318c882a5146105475780631d504dc61461055a5780631ededc911461056f57806321af4569146105845780632259192a1461059c57600080fd5b80627e3dd21461049a57806302c3bcbb146104b75780630a755ec2146104e557806315761d51146104f957806316dc15fe14610524575b600080fd5b6104a2600181565b60405190151581526020015b60405180910390f35b6104d76104c5366004615284565b601a6020526000908152604090205481565b6040519081526020016104ae565b6002546104a290600160a81b900460ff1681565b60005461050c906001600160a01b031681565b6040516001600160a01b0390911681526020016104ae565b6104a2610532366004615284565b600f6020526000908152604090205460ff1681565b6104a26105553660046152af565b610bb8565b61056d610568366004615284565b610ced565b005b61056d61057d3660046152e8565b5050505050565b60185461050c9061010090046001600160a01b031681565b6104d76105aa366004615343565b610faa565b6104d76105bd36600461537e565b610fb9565b60155461050c906001600160a01b031681565b60025461050c906001600160a01b031681565b6104a26105f63660046153cf565b610ff4565b6002546104a290600160a01b900460ff1681565b6104d761061d3660046153ec565b6110d7565b61050c610630366004615284565b6010602052600090815260409020546001600160a01b031681565b6106536111ab565b6040516104ae9190615405565b61065361120d565b61056d610676366004615284565b61126d565b6104a26106893660046152af565b611341565b6015546104a290600160a01b900460ff1681565b61056d6106b0366004615452565b50506001600160a01b03166000908152600f60205260409020805460ff1916600117905550565b61056d6106e5366004615498565b61145e565b6104d76106f8366004615284565b60196020526000908152604090205481565b6104d760075481565b610726610721366004615452565b611463565b604080519384526020840192909252908201526060016104ae565b6104d761074f366004615506565b6114a3565b6104d76107623660046153ec565b611876565b61056d61077536600461558c565b611932565b61056d610788366004615452565b611b15565b61050c61079b3660046153ec565b611b6a565b6104d76107ae366004615284565b611b94565b61056d6107c1366004615506565b505050565b61056d611c15565b6107266107dc366004615284565b611cab565b6104d76107ef366004615284565b611ce6565b6104d76108023660046155f8565b611d5a565b61056d61081536600461558c565b611f27565b61056d612101565b61056d61083036600461537e565b612195565b6104a2610843366004615284565b60176020526000908152604090205460ff1681565b61056d61057d3660046155f8565b6104a2610874366004615284565b60166020526000908152604090205460ff1681565b61050c6108973660046153ec565b61219a565b6104d76108aa36600461565c565b6121aa565b60055461050c906001600160a01b031681565b6104d76108d0366004615284565b612305565b6015546104a290600160b01b900460ff1681565b6109166108f7366004615284565b600a602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016104ae565b6104a261093b3660046153cf565b6126a7565b6104a261094e366004615688565b6001600160a01b038082166000908152600a60209081526040808320938616835260029093019052205460ff1692915050565b6104a261098f366004615284565b612781565b6104d76109a23660046153cf565b6128eb565b6104a26109b5366004615284565b60126020526000908152604090205460ff1681565b6104d76109d83660046156b6565b612969565b6106536109eb366004615284565b612adb565b6015546104a290600160b81b900460ff1681565b610653612b51565b6011546104a29060ff1681565b6104d7610a27366004615284565b612bb1565b60035461050c906001600160a01b031681565b6104d7610a4d36600461537e565b612da3565b610a65610a60366004615757565b612e28565b6040516104ae9190615810565b610a85610a80366004615506565b612ef0565b604080519283526020830191909152016104ae565b61050c610aa83660046153ec565b61310a565b6104d7610abb36600461558c565b61311a565b61056d6133c1565b6106536134a4565b6104d7610ade3660046155f8565b613504565b61050c610af13660046153ec565b61368d565b6104d7610b043660046153cf565b61369d565b6104d7610b17366004615506565b613710565b61050c610b2a36600461565c565b613ac1565b60045461050c906001600160a01b031681565b6018546104a29060ff1681565b6104d7610b5d36600461565c565b613af9565b6015546104a290600160a81b900460ff1681565b6104d760065481565b6104d7610b8d366004615506565b613c84565b6104d7610ba0366004615284565b613ca1565b60015461050c906001600160a01b031681565b6001600160a01b0382166000908152600a602052604081205460ff16610bf95760405162461bcd60e51b8152600401610bf090615848565b60405180910390fd5b6015546001600160a01b0316331480610c155750610c15614124565b610c315760405162461bcd60e51b8152600401610bf090615890565b610c39614124565b80610c4657506001821515145b610c625760405162461bcd60e51b8152600401610bf0906158d7565b6001600160a01b038316600081815260176020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b6000546001600160a01b031633148015610d645750806001600160a01b0316632f1069ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d649190615907565b80610e495750806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcc9190615924565b6001600160a01b0316336001600160a01b0316148015610e495750806001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190615907565b610ea55760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b6064820152608401610bf0565b6000816001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b9190615941565b90508015610f535760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610bf0565b816001600160a01b0316635d72de626040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f8e57600080fd5b505af1158015610fa2573d6000803e3d6000fd5b505050505050565b6000805b90505b949350505050565b6001600160a01b0384166000908152600a602052604081205460ff16610fe35760095b9050610fb1565b610fed8584614178565b6000610fae565b6015546000906001600160a01b03163314806110135750611013614124565b61102f5760405162461bcd60e51b8152600401610bf090615890565b611037614124565b8061104457506001821515145b6110605760405162461bcd60e51b8152600401610bf0906158d7565b60158054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906110cb9084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b60006110e1614124565b6110f157610ce76001600761421b565b6040805160208082018352848252825190810190925266b1a2bc2ec5000080835281519192911161112857610fb16005600861421b565b6040805160208101909152670c7d713b49da00008082528351111561115c576111536005600861421b565b95945050505050565b600680549086905560408051828152602081018890527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9695505050505050565b6060600d80548060200260200160405190810160405280929190818152602001828054801561120357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111e5575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020018280548015611203576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111e5575050505050905090565b6001546001600160a01b031633146112d65760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b6064820152608401610bf0565b601880546001600160a01b03838116610100818102610100600160a81b031985161790945560408051949093049091168084526020840191909152917feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b0382166000908152600a602052604081205460ff166113795760405162461bcd60e51b8152600401610bf090615848565b6015546001600160a01b03163314806113955750611395614124565b6113b15760405162461bcd60e51b8152600401610bf090615890565b6113b9614124565b806113c657506001821515145b6113e25760405162461bcd60e51b8152600401610bf0906158d7565b6001600160a01b038316600081815260166020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a001610cdc565b610fa2565b6000806000806000806114788a8a8a8a614294565b9250925092508260158111156114905761149061595a565b95509093509150505b9450945094915050565b6001600160a01b03831660009081526016602052604081205460ff16156114fd5760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b6044820152606401610bf0565b6001600160a01b0384166000908152600a602052604090205460ff166115275760095b905061186f565b60115460ff16801561155257506001600160a01b03831660009081526012602052604090205460ff16155b1561155e576012611520565b6001600160a01b0384166000908152601a6020526040902054801561185e576000856001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e19190615941565b90506000866001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190615941565b90506000876001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad9190615941565b90506000886001600160a01b031663dc028ab16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117139190615941565b90506000896001600160a01b03166361feacff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117799190615941565b905060008061179b878761179661179089896145c5565b876145c5565b6145fb565b909250905060008260038111156117b4576117b461595a565b146117ca57600b9850505050505050505061186f565b60006117d6828c61464d565b909350905060008360038111156117ef576117ef61595a565b1461180657600b995050505050505050505061186f565b8881106118555760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c79206361702072656163686564000000000000006044820152606401610bf0565b50505050505050505b6118688585614680565b60005b9150505b9392505050565b6000611880614124565b61189057610ce76001600d61421b565b60408051602080820183528482528251908101909252670de0b6b3a7640000808352815191929110156118c957610fb16007600e61421b565b60408051602081019091526714d1120d7b160000808252835111156118f4576111536007600e61421b565b600780549086905560408051828152602081018890527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec13169101611196565b6001546001600160a01b031633148061195a575060185461010090046001600160a01b031633145b6119c45760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420737570706c79206361707360581b6064820152608401610bf0565b828181158015906119d457508082145b611a105760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610bf0565b60005b82811015611b0c57848482818110611a2d57611a2d615970565b90506020020135601a6000898985818110611a4a57611a4a615970565b9050602002016020810190611a5f9190615284565b6001600160a01b03168152602081019190915260400160002055868682818110611a8b57611a8b615970565b9050602002016020810190611aa09190615284565b6001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f8868684818110611adc57611adc615970565b90506020020135604051611af291815260200190565b60405180910390a280611b048161599c565b915050611a13565b50505050505050565b80158015611b235750600082115b15611b645760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610bf0565b50505050565b600b8181548110611b7a57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000611b9e614124565b611bae57610ce76001601361421b565b600580546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e2291015b60405180910390a160009392505050565b6003546001600160a01b03163314611c8a5760405162461bcd60e51b815260206004820152603260248201527f6f6e6c7920696d706c656d656e746174696f6e206d61792063616c6c205f626560448201527131b7b6b2a4b6b83632b6b2b73a30ba34b7b760711b6064820152608401610bf0565b601c54610100900460ff16611ca957601c805461ffff19166101011790555b565b600080600080600080611cc2876000806000614294565b925092509250826015811115611cda57611cda61595a565b97919650945092505050565b6000611cf0614124565b611d0057610ce76001601861421b565b601580546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e9101611c04565b6001600160a01b0385166000908152600a602052604081205460ff161580611d9b57506001600160a01b0385166000908152600a602052604090205460ff16155b15611daa5760095b9050611153565b6040516395dd919360e01b81526001600160a01b038481166004830152600091908816906395dd919390602401602060405180830381865afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e189190615941565b9050611e2387612781565b15611e8e5782811015611e895760405162461bcd60e51b815260206004820152602860248201527f43616e206e6f74207265706179206d6f7265207468616e2074686520746f74616044820152676c20626f72726f7760c01b6064820152608401610bf0565b611f1a565b600080611e9a86614722565b91935090915060009050826015811115611eb657611eb661595a565b14611ed757816015811115611ecd57611ecd61595a565b9350505050611153565b80611ee3576003611ecd565b6000611eff604051806020016040528060065481525085614742565b905080861115611f16576011945050505050611153565b5050505b5060009695505050505050565b6001546001600160a01b0316331480611f4f575060185461010090046001600160a01b031633145b611fb95760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b6064820152608401610bf0565b82818115801590611fc957508082145b6120055760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610bf0565b60005b82811015611b0c5784848281811061202257612022615970565b905060200201356019600089898581811061203f5761203f615970565b90506020020160208101906120549190615284565b6001600160a01b0316815260208101919091526040016000205586868281811061208057612080615970565b90506020020160208101906120959190615284565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f68686848181106120d1576120d1615970565b905060200201356040516120e791815260200190565b60405180910390a2806120f98161599c565b915050612008565b336000908152600a602052604090205460ff166121865760405162461bcd60e51b815260206004820152603b60248201527f436f6d7074726f6c6c65723a5f61667465724e6f6e5265656e7472616e743a2060448201527f63616c6c6572206e6f74206c6973746564206173206d61726b657400000000006064820152608401610bf0565b601c805460ff19166001179055565b611b64565b600d8181548110611b7a57600080fd5b600080546040805163fdb25fb160e01b8152905183926001600160a01b03169163fdb25fb19160048083019260209291908290030181865afa1580156121f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122189190615941565b905080156122fb5760055460405163fc57d4df60e01b81526001600160a01b038681166004830152600092169063fc57d4df90602401602060405180830381865afa15801561226b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228f9190615941565b9050806122a157600d92505050610ce7565b6000806122bc6040518060200160405280858152508761475a565b909250905060008260038111156122d5576122d561595a565b146122e857600b5b945050505050610ce7565b838110156122f75760136122dd565b5050505b6000949350505050565b600061230f614124565b61231f57610ce76001601961421b565b6001600160a01b0382166000908152600a602052604090205460ff1661234b57610ce76009601a61421b565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561238b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123af9190615941565b11156123c157610ce76015601b61421b565b6001600160a01b0382166000908152600a60209081526040808320805460ff19168155600101839055600b8054825181850281018501909352808352919290919083018282801561243b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161241d575b5050835193945083925060009150505b828110156124a057856001600160a01b031684828151811061246f5761246f615970565b60200260200101516001600160a01b0316141561248e578091506124a0565b806124988161599c565b91505061244b565b508181106124b0576124b06159b7565b600b80546124c0906001906159cd565b815481106124d0576124d0615970565b600091825260209091200154600b80546001600160a01b0390921691839081106124fc576124fc615970565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600b80548061253b5761253b6159e4565b6001900381819060005260206000200160006101000a8154906001600160a01b0302191690559055600060106000876001600160a01b031663ac784ddc6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156125a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cd9190615907565b61263857876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561260f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126339190615924565b61263b565b60005b6001600160a01b039081168252602080830193909352604091820160002080546001600160a01b031916948216949094179093555191871682527f302feb03efd5741df80efe7f97f5d93d74d46a542a3d312d0faae64fa1f3e0e9910160405180910390a16000611153565b6015546000906001600160a01b03163314806126c657506126c6614124565b6126e25760405162461bcd60e51b8152600401610bf090615890565b6126ea614124565b806126f757506001821515145b6127135760405162461bcd60e51b8152600401610bf0906158d7565b60158054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906110cb9084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b6001600160a01b0381166000908152600a60205260408120600101541580156127c757506001600160a01b03821660009081526017602052604090205460ff1615156001145b8015610ce757506128db61289d836001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa158015612812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128369190615941565b846001600160a01b0316638d02d9a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128989190615941565b6145c5565b836001600160a01b031663dbfe7c196040518163ffffffff1660e01b8152600401602060405180830381865afa158015612874573d6000803e3d6000fd5b670de0b6b3a76400001492915050565b60006128f5614124565b61290557610ce76001601461421b565b60115460ff161515821515141561291d576000610ce7565b6011805460ff19168315159081179091556040519081527f84c7d948374a180eddab35d27d2f7a94167a1ff4e79467f1e89c061984190a1e906020015b60405180910390a16000610ce7565b6000612973614124565b61298357610fdc6001601761421b565b60028054600160a01b60ff60a01b19821681179092550460ff16600086612a1e57600054604051638754e4fd60e01b81526001600160a01b0390911690638754e4fd906129d690899089906004016159fa565b6020604051808303816000875af11580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a199190615924565b612a93565b600054604051639b86a9b560e01b81526001600160a01b0390911690639b86a9b590612a5090899089906004016159fa565b6020604051808303816000875af1158015612a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a939190615924565b6002805460ff60a01b1916600160a01b8515150217905590506000612ab7826147ac565b90508015612ac55780612acf565b612acf8286613af9565b98975050505050505050565b6001600160a01b0381166000908152600960209081526040808320805482518185028101850190935280835260609493830182828015612b4457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612b26575b5093979650505050505050565b6060600b805480602002602001604051908101604052809291908181526020018280548015611203576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111e5575050505050905090565b6000612bbb614124565b612bcb57610ce76001600261421b565b816001600160a01b031663abc6d72d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2d9190615907565b612c795760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610bf0565b60005b601b54811015612d2457601b8181548110612c9957612c99615970565b6000918252602090912001546001600160a01b0384811691161415612d125760405162461bcd60e51b815260206004820152602960248201527f526577617264734469737472696275746f7220636f6e747261637420616c726560448201526818591e48185919195960ba1b6064820152608401610bf0565b80612d1c8161599c565b915050612c7c565b50601b80546001810182556000919091527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10180546001600160a01b0319166001600160a01b0384169081179091556040519081527f98ef1187fb6fd2bc85f8996489877eb2b5428f9e9bdfc068c9ad6c2ea82eacc79060200161295a565b601554600090600160b01b900460ff1615612df55760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b6044820152606401610bf0565b6000612e02868685614b42565b90508015612e11579050610fb1565b612e1c868686614bfa565b60009695505050505050565b805160609060008167ffffffffffffffff811115612e4857612e48615741565b604051908082528060200260200182016040528015612e71578160200160208202803683370190505b50905060005b82811015612ee8576000858281518110612e9357612e93615970565b60200260200101519050612ea78133614ca5565b6015811115612eb857612eb861595a565b838381518110612eca57612eca615970565b60209081029190910101525080612ee08161599c565b915050612e77565b509392505050565b60055460405163fc57d4df60e01b81526001600160a01b038581166004830152600092839283929091169063fc57d4df90602401602060405180830381865afa158015612f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f659190615941565b60055460405163fc57d4df60e01b81526001600160a01b0388811660048301529293506000929091169063fc57d4df90602401602060405180830381865afa158015612fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd99190615941565b9050811580612fe6575080155b15612ffa57600d6000935093505050613102565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561303a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305e9190615941565b905060006130786040518060200160405280600081525090565b6040805160208082018352600080835283518083018552908152835180830185526007548152845192830190945288825291926130b491614e40565b92506130dc604051806020016040528088815250604051806020016040528088815250614e40565b91506130e88383614e88565b90506130f4818b614742565b600099509750505050505050505b935093915050565b601b8181548110611b7a57600080fd5b6000613124614124565b61313457610fdc6001601561421b565b60005b848110156133b957600086868381811061315357613153615970565b90506020020160208101906131689190615284565b905084848381811061317c5761317c615970565b905060200201602081019061319191906153cf565b15613249576001600160a01b03811660009081526012602052604090205460ff16613244576001600160a01b0381166000818152601260205260408120805460ff19166001908117909155601380548083018255928190527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09090920180546001600160a01b0319169093179092555461322a91906159cd565b6001600160a01b0382166000908152601460205260409020555b6133a6565b6001600160a01b03811660009081526012602052604090205460ff16156133a6576013805461327a906001906159cd565b8154811061328a5761328a615970565b60009182526020808320909101546001600160a01b03848116845260149092526040909220546013805492909316929181106132c8576132c8615970565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506013805480613307576133076159e4565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03831682526014908190526040822054601380549193918490811061335b5761335b615970565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822094909455918416825260148352808220829055601290925220805460ff191690555b50806133b18161599c565b915050613137565b506000610fae565b336000908152600a602052604090205460ff166134465760405162461bcd60e51b815260206004820152603c60248201527f436f6d7074726f6c6c65723a5f6265666f72654e6f6e5265656e7472616e743a60448201527f2063616c6c6572206e6f74206c6973746564206173206d61726b6574000000006064820152608401610bf0565b601c5460ff166134985760405162461bcd60e51b815260206004820152601860248201527f72652d656e7465726564206163726f73732061737365747300000000000000006044820152606401610bf0565b601c805460ff19169055565b60606013805480602002602001604051908101604052809291908181526020018280548015611203576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111e5575050505050905090565b601554600090600160b81b900460ff16156135535760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b6044820152606401610bf0565b6001600160a01b0386166000908152600a602052604090205460ff16158061359457506001600160a01b0385166000908152600a602052604090205460ff16155b156135a0576009611da3565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136029190615924565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366d9190615924565b6001600160a01b031614613682576002611da3565b612e1c868486614bfa565b60138181548110611b7a57600080fd5b60006136a7614124565b6136b757610ce76001600661421b565b60185460ff16151582151514156136cf576000610ce7565b6018805460ff19168315159081179091556040519081527faa40ee94af55250363b91641a0a615c47690148901505f89b01dafae03fff2819060200161295a565b6001600160a01b03831660009081526017602052604081205460ff161561376c5760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b6044820152606401610bf0565b6001600160a01b0384166000908152600a602052604090205460ff16613793576009611520565b6001600160a01b038085166000908152600a60209081526040808320938716835260029093019052205460ff1661389057336001600160a01b038516146138145760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b6044820152606401610bf0565b60006138203385614ca5565b905060008160158111156138365761383661595a565b146138555780601581111561384d5761384d61595a565b91505061186f565b6001600160a01b038086166000908152600a60209081526040808320938816835260029093019052205460ff1661388e5761388e6159b7565b505b60055460405163fc57d4df60e01b81526001600160a01b0386811660048301529091169063fc57d4df90602401602060405180830381865afa1580156138da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138fe9190615941565b61390957600d611520565b60115460ff16801561393457506001600160a01b03831660009081526012602052604090205460ff16155b15613940576012611520565b6001600160a01b0384166000908152601960205260409020548015613a50576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561399f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c39190615941565b90506000806139d2838761464d565b909250905060008260038111156139eb576139eb61595a565b146139fd57600b94505050505061186f565b838110613a4c5760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610bf0565b5050505b613a5a8585614178565b600080613a6a8688600088614294565b91935090915060009050826015811115613a8657613a8661595a565b14613aa757816015811115613a9d57613a9d61595a565b935050505061186f565b8015613ab4576004613a9d565b6000979650505050505050565b60096020528160005260406000208181548110613add57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000613b03614124565b613b1a57613b136001600961421b565b9050610ce7565b6001600160a01b0383166000908152600a60205260409020805460ff16613b4f57613b476009600a61421b565b915050610ce7565b60408051602080820183528582528251908101909252670c7d713b49da0000825290613b7d81835190511090565b15613b9857613b8e6006600b61421b565b9350505050610ce7565b8415801590613c12575060055460405163fc57d4df60e01b81526001600160a01b0388811660048301529091169063fc57d4df90602401602060405180830381865afa158015613bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c109190615941565b155b15613c2357613b8e600d600c61421b565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b600080613c92858585614b42565b9050801561185e57905061186f565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa158015613cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d149190615a29565b5092509250925082600014613d795760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b6064820152608401610bf0565b8015613d8b576111a1600c600361421b565b6000613d98873385614b42565b90508015613db857613dad600e600483614ec2565b979650505050505050565b6001600160a01b0385166000908152600a60209081526040808320338452600281019092529091205460ff16613df657600098975050505050505050565b3360009081526002820160209081526040808320805460ff191690556009825280832080548251818502810185019093528083529192909190830182828015613e6857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613e4a575b5050835193945083925060009150505b82811015613ecd57896001600160a01b0316848281518110613e9c57613e9c615970565b60200260200101516001600160a01b03161415613ebb57809150613ecd565b80613ec58161599c565b915050613e78565b50818110613edd57613edd6159b7565b33600090815260096020526040902080548190613efc906001906159cd565b81548110613f0c57613f0c615970565b9060005260206000200160009054906101000a90046001600160a01b0316818381548110613f3c57613f3c615970565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080805480613f7a57613f7a6159e4565b600082815260209020810160001990810180546001600160a01b031916905501905580546140d157600d8054613fb2906001906159cd565b81548110613fc257613fc2615970565b6000918252602080832090910154338352600e909152604090912054600d80546001600160a01b03909316929091908110613fff57613fff615970565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600d80548061403e5761403e6159e4565b60008281526020808220830160001990810180546001600160a01b0319169055909201909255338252600e908190526040822054600d80549193918490811061408957614089615970565b60009182526020808320909101546001600160a01b03168352828101939093526040918201812093909355338352600e8252808320839055600c9091529020805460ff191690555b604080516001600160a01b038c1681523360208201527fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d910160405180910390a160009c9b505050505050505050505050565b6001546000906001600160a01b03163314801561414a5750600254600160a81b900460ff165b8061417357506000546001600160a01b0316331480156141735750600254600160a01b900460ff165b905090565b60005b601b548110156107c157601b818154811061419857614198615970565b600091825260209091200154604051631cdc2c5d60e31b81526001600160a01b03858116600483015284811660248301529091169063e6e162e890604401600060405180830381600087803b1580156141f057600080fd5b505af1158015614204573d6000803e3d6000fd5b5050505080806142139061599c565b91505061417b565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360158111156142505761425061595a565b83601b8111156142625761426261595a565b60408051928352602083019190915260009082015260600160405180910390a182601581111561186f5761186f61595a565b60008060006142a16151ba565b6001600160a01b03881660009081526009602090815260408083208054825181850281018501909352808352849383018282801561430857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116142ea575b5050505050905060005b815181101561456f57600082828151811061432f5761432f615970565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015614384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a89190615a29565b608089015260608801526040870152935083156143d457600f6000809750975097505050505050611499565b60408051602080820183526001600160a01b038481166000818152600a845285902060010154845260c08a0193909352835191820184526080890151825260e0890191909152600554925163fc57d4df60e01b81526004810192909252919091169063fc57d4df90602401602060405180830381865afa15801561445c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144809190615941565b60a086018190526144a057600d6000809750975097505050505050611499565b604080516020810190915260a0860151815261010086015260c085015160e08601516144da916144cf91614e40565b866101000151614e40565b6101208601819052604086015186516144f4929190614f3a565b855261010085015160608601516020870151614511929190614f3a565b60208601526001600160a01b03818116908c16141561455c5761453e8561012001518b8760200151614f3a565b60208601819052610100860151614556918b90614f3a565b60208601525b50806145678161599c565b915050614312565b506020830151835111156145a05760208301518351600091614590916159cd565b6000955095509550505050611499565b600080846000015185602001516145b791906159cd565b955095509550505050611499565b600061186f8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250614f5b565b60008060008061460b878761464d565b909250905060008260038111156146245761462461595a565b146146355750915060009050613102565b61463f8186614f95565b935093505050935093915050565b6000808061465b8486615a5f565b905084811061466f57600092509050614679565b6002600092509250505b9250929050565b60005b601b548110156107c157601b81815481106146a0576146a0615970565b60009182526020909120015460405162e48b0f60e51b81526001600160a01b038581166004830152848116602483015290911690631c9161e090604401600060405180830381600087803b1580156146f757600080fd5b505af115801561470b573d6000803e3d6000fd5b50505050808061471a9061599c565b915050614683565b6000806000614735846000806000614294565b9250925092509193909250565b60008061474f8484614fc0565b9050610fb181614fe8565b60008060008061476a8686615000565b909250905060008260038111156147835761478361595a565b146147945750915060009050614679565b600061479f82614fe8565b9350935050509250929050565b60006147b6614124565b6147c657610ce76001601761421b565b6001600160a01b0382166000908152600a602052604090205460ff16156147f357610ce7600a601661421b565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015614833573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148579190615907565b6148a35760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610bf0565b306001600160a01b0316826001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061490f9190615924565b6001600160a01b0316146149835760405162461bcd60e51b815260206004820152603560248201527f43616e6e6f7420737570706f72742061206d61726b657420776974682061206460448201527434b33332b932b73a1021b7b6b83a3937b63632b91760591b6064820152608401610bf0565b6000826001600160a01b031663ac784ddc6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156149c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149e99190615907565b614a5457826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015614a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a4f9190615924565b614a57565b60005b6001600160a01b038082166000908152601060205260409020549192501615614a865761186f600a601661421b565b6001600160a01b038381166000818152600a60209081526040808320805460ff191660019081178255808201859055600b805491820190557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319908116871790915595871684526010835292819020805490951684179094559251918252917fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f910160405180910390a16000610fb1565b6001600160a01b0383166000908152600a602052604081205460ff16614b69576009611520565b6001600160a01b038085166000908152600a60209081526040808320938716835260029093019052205460ff16614ba1576000611520565b600080614bb18587866000614294565b91935090915060009050826015811115614bcd57614bcd61595a565b14614bed57816015811115614be457614be461595a565b9250505061186f565b8015612e1c576004614be4565b60005b601b54811015611b6457601b8181548110614c1a57614c1a615970565b600091825260209091200154604051634e081c9560e01b81526001600160a01b0386811660048301528581166024830152848116604483015290911690634e081c9590606401600060405180830381600087803b158015614c7a57600080fd5b505af1158015614c8e573d6000803e3d6000fd5b505050508080614c9d9061599c565b915050614bfd565b6001600160a01b0382166000908152600a60205260408120805460ff16614cd0576009915050610ce7565b6001600160a01b038316600090815260028201602052604090205460ff16151560011415614d02576000915050610ce7565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600983528184208054918201815584528284200180546001600160a01b031916958a1695909517909455918152600c909152205460ff16614df357600d8054600180820183557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590910180546001600160a01b0319166001600160a01b0387169081179091556000908152600c60205260409020805460ff1916821790559054614dd991906159cd565b6001600160a01b0384166000908152600e60205260409020555b604080516001600160a01b038087168252851660208201527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a7640000614e758660000151866000015161507c565b614e7f9190615a77565b90529392505050565b6040805160208101909152600081526040518060200160405280614e7f614ebb8660000151670de0b6b3a764000061507c565b85516150be565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846015811115614ef757614ef761595a565b84601b811115614f0957614f0961595a565b604080519283526020830191909152810184905260600160405180910390a1836015811115610fb157610fb161595a565b600080614f478585614fc0565b905061186b614f5582614fe8565b846145c5565b600080614f688486615a5f565b90508285821015614f8c5760405162461bcd60e51b8152600401610bf09190615a99565b50949350505050565b600080838311614fb4576000614fab84866159cd565b91509150614679565b50600390506000614679565b6040805160208101909152600081526040518060200160405280614e7f85600001518561507c565b8051600090610ce790670de0b6b3a764000090615a77565b60006150186040518060200160405280600081525090565b6000806150298660000151866150f1565b909250905060008260038111156150425761504261595a565b1461506157506040805160208101909152600081529092509050614679565b60408051602081019091529081526000969095509350505050565b600061186f83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f7700000000000000000081525061513b565b600061186f83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b81525061518e565b6000808361510457506000905080614679565b60006151108486615aee565b90508361511d8683615a77565b1461513057600260009250925050614679565b600092509050614679565b6000831580615148575082155b156151555750600061186f565b60006151618486615aee565b90508361516e8683615a77565b148390614f8c5760405162461bcd60e51b8152600401610bf09190615a99565b600081836151af5760405162461bcd60e51b8152600401610bf09190615a99565b50610fb18385615a77565b6040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016152066040518060200160405280600081525090565b81526020016152216040518060200160405280600081525090565b815260200161523c6040518060200160405280600081525090565b81526020016152576040518060200160405280600081525090565b905290565b6001600160a01b038116811461527157600080fd5b50565b803561527f8161525c565b919050565b60006020828403121561529657600080fd5b813561186f8161525c565b801515811461527157600080fd5b600080604083850312156152c257600080fd5b82356152cd8161525c565b915060208301356152dd816152a1565b809150509250929050565b600080600080600060a0868803121561530057600080fd5b853561530b8161525c565b9450602086013561531b8161525c565b9350604086013561532b8161525c565b94979396509394606081013594506080013592915050565b6000806000806080858703121561535957600080fd5b84356153648161525c565b966020860135965060408601359560600135945092505050565b6000806000806080858703121561539457600080fd5b843561539f8161525c565b935060208501356153af8161525c565b925060408501356153bf8161525c565b9396929550929360600135925050565b6000602082840312156153e157600080fd5b813561186f816152a1565b6000602082840312156153fe57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156154465783516001600160a01b031683529284019291840191600101615421565b50909695505050505050565b6000806000806080858703121561546857600080fd5b84356154738161525c565b935060208501356154838161525c565b93969395505050506040820135916060013590565b60008060008060008060c087890312156154b157600080fd5b86356154bc8161525c565b955060208701356154cc8161525c565b945060408701356154dc8161525c565b935060608701356154ec8161525c565b9598949750929560808101359460a0909101359350915050565b60008060006060848603121561551b57600080fd5b83356155268161525c565b925060208401356155368161525c565b929592945050506040919091013590565b60008083601f84011261555957600080fd5b50813567ffffffffffffffff81111561557157600080fd5b6020830191508360208260051b850101111561467957600080fd5b600080600080604085870312156155a257600080fd5b843567ffffffffffffffff808211156155ba57600080fd5b6155c688838901615547565b909650945060208701359150808211156155df57600080fd5b506155ec87828801615547565b95989497509550505050565b600080600080600060a0868803121561561057600080fd5b853561561b8161525c565b9450602086013561562b8161525c565b9350604086013561563b8161525c565b9250606086013561564b8161525c565b949793965091946080013592915050565b6000806040838503121561566f57600080fd5b823561567a8161525c565b946020939093013593505050565b6000806040838503121561569b57600080fd5b82356156a68161525c565b915060208301356152dd8161525c565b600080600080606085870312156156cc57600080fd5b84356156d7816152a1565b9350602085013567ffffffffffffffff808211156156f457600080fd5b818701915087601f83011261570857600080fd5b81358181111561571757600080fd5b88602082850101111561572957600080fd5b95986020929092019750949560400135945092505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561576a57600080fd5b823567ffffffffffffffff8082111561578257600080fd5b818501915085601f83011261579657600080fd5b8135818111156157a8576157a8615741565b8060051b604051601f19603f830116810181811085821117156157cd576157cd615741565b6040529182528482019250838101850191888311156157eb57600080fd5b938501935b82851015612acf5761580185615274565b845293850193928501926157f0565b6020808252825182820181905260009190848201906040850190845b818110156154465783518352928401929184019160010161582c565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b6020808252601690820152756f6e6c792061646d696e2063616e20756e706175736560501b604082015260600190565b60006020828403121561591957600080fd5b815161186f816152a1565b60006020828403121561593657600080fd5b815161186f8161525c565b60006020828403121561595357600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156159b0576159b0615986565b5060010190565b634e487b7160e01b600052600160045260246000fd5b6000828210156159df576159df615986565b500390565b634e487b7160e01b600052603160045260246000fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60008060008060808587031215615a3f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60008219821115615a7257615a72615986565b500190565b600082615a9457634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b81811015615ac657858101830151858201604001528201615aaa565b81811115615ad8576000604083870101525b50601f01601f1916929092016040019392505050565b6000816000190483118215151615615b0857615b08615986565b50029056fea2646970667358221220acba1901cd4e2a1faa62867dc34a802d8615260c44ec18dc2391b338f79ca50564736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104955760003560e01c80636d154ea511610262578063bb82aa5e11610151578063d5333166116100ce578063e4028eee11610092578063e4028eee14610b4f578063e6653f3d14610b62578063e875544614610b76578063eabe7d9114610b7f578063ede4edd014610b92578063f851a44014610ba557600080fd5b8063d533316614610af6578063da3d454c14610b09578063dce1544914610b1c578063dcfbc0c714610b2f578063dd5cd22c14610b4257600080fd5b8063c8c9c97511610115578063c8c9c97514610aad578063c90c20b114610ac0578063d01f63f514610ac8578063d02f735114610ad0578063d251fefc14610ae357600080fd5b8063bb82aa5e14610a2c578063bdcdc25814610a3f578063c299823814610a52578063c488847b14610a72578063c6c5b0dd14610a9a57600080fd5b8063929fe9a1116101df578063abfceffc116101a3578063abfceffc146109dd578063ac0b0bb7146109f0578063b0772d0b14610a04578063b095721014610a0c578063b9b5b15314610a1957600080fd5b8063929fe9a11461094057806394543c1514610981578063952adf5a146109945780639b19251a146109a7578063aba35b98146109ca57600080fd5b80637dc0d1d0116102265780637dc0d1d0146108af578063819605a8146108c257806387f76303146108d55780638e8f294b146108e95780638ebf63641461092d57600080fd5b80636d154ea5146108355780636d35bf9114610858578063731f0c2b146108665780637515bafa14610889578063779b22941461089c57600080fd5b80633bcf7ec11161038957806351dff989116103065780635ec88c79116102ca5780635ec88c79146107ce5780635f5af1aa146107e15780635fc7e71e146107f4578063607ef6c114610807578063632e51421461081a5780636a56947e1461082257600080fd5b806351dff9891461077a57806352d84d1e1461078d57806355ee1fe1146107a05780635c778605146107b35780635d72de62146107c657600080fd5b80634ada90af1161034d5780634ada90af1461070a5780634e79238f146107135780634ef4c3e1146107415780634fd42e171461075457806351a485e41461076757600080fd5b80633bcf7ec11461067b5780633c94786f1461068e57806341c728b9146106a257806347ef3b3b146106d75780634a584432146106ea57600080fd5b806324008a6211610417578063317b0b77116103db578063317b0b771461060f57806331ff47fa1461062257806332abcdbe1461064b5780633605b51b14610660578063391957d71461066857600080fd5b806324008a62146105af57806324a3d622146105c257806326782247146105d55780632d70db78146105e85780632f1069ba146105fb57600080fd5b806318c882a51161045e57806318c882a5146105475780631d504dc61461055a5780631ededc911461056f57806321af4569146105845780632259192a1461059c57600080fd5b80627e3dd21461049a57806302c3bcbb146104b75780630a755ec2146104e557806315761d51146104f957806316dc15fe14610524575b600080fd5b6104a2600181565b60405190151581526020015b60405180910390f35b6104d76104c5366004615284565b601a6020526000908152604090205481565b6040519081526020016104ae565b6002546104a290600160a81b900460ff1681565b60005461050c906001600160a01b031681565b6040516001600160a01b0390911681526020016104ae565b6104a2610532366004615284565b600f6020526000908152604090205460ff1681565b6104a26105553660046152af565b610bb8565b61056d610568366004615284565b610ced565b005b61056d61057d3660046152e8565b5050505050565b60185461050c9061010090046001600160a01b031681565b6104d76105aa366004615343565b610faa565b6104d76105bd36600461537e565b610fb9565b60155461050c906001600160a01b031681565b60025461050c906001600160a01b031681565b6104a26105f63660046153cf565b610ff4565b6002546104a290600160a01b900460ff1681565b6104d761061d3660046153ec565b6110d7565b61050c610630366004615284565b6010602052600090815260409020546001600160a01b031681565b6106536111ab565b6040516104ae9190615405565b61065361120d565b61056d610676366004615284565b61126d565b6104a26106893660046152af565b611341565b6015546104a290600160a01b900460ff1681565b61056d6106b0366004615452565b50506001600160a01b03166000908152600f60205260409020805460ff1916600117905550565b61056d6106e5366004615498565b61145e565b6104d76106f8366004615284565b60196020526000908152604090205481565b6104d760075481565b610726610721366004615452565b611463565b604080519384526020840192909252908201526060016104ae565b6104d761074f366004615506565b6114a3565b6104d76107623660046153ec565b611876565b61056d61077536600461558c565b611932565b61056d610788366004615452565b611b15565b61050c61079b3660046153ec565b611b6a565b6104d76107ae366004615284565b611b94565b61056d6107c1366004615506565b505050565b61056d611c15565b6107266107dc366004615284565b611cab565b6104d76107ef366004615284565b611ce6565b6104d76108023660046155f8565b611d5a565b61056d61081536600461558c565b611f27565b61056d612101565b61056d61083036600461537e565b612195565b6104a2610843366004615284565b60176020526000908152604090205460ff1681565b61056d61057d3660046155f8565b6104a2610874366004615284565b60166020526000908152604090205460ff1681565b61050c6108973660046153ec565b61219a565b6104d76108aa36600461565c565b6121aa565b60055461050c906001600160a01b031681565b6104d76108d0366004615284565b612305565b6015546104a290600160b01b900460ff1681565b6109166108f7366004615284565b600a602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016104ae565b6104a261093b3660046153cf565b6126a7565b6104a261094e366004615688565b6001600160a01b038082166000908152600a60209081526040808320938616835260029093019052205460ff1692915050565b6104a261098f366004615284565b612781565b6104d76109a23660046153cf565b6128eb565b6104a26109b5366004615284565b60126020526000908152604090205460ff1681565b6104d76109d83660046156b6565b612969565b6106536109eb366004615284565b612adb565b6015546104a290600160b81b900460ff1681565b610653612b51565b6011546104a29060ff1681565b6104d7610a27366004615284565b612bb1565b60035461050c906001600160a01b031681565b6104d7610a4d36600461537e565b612da3565b610a65610a60366004615757565b612e28565b6040516104ae9190615810565b610a85610a80366004615506565b612ef0565b604080519283526020830191909152016104ae565b61050c610aa83660046153ec565b61310a565b6104d7610abb36600461558c565b61311a565b61056d6133c1565b6106536134a4565b6104d7610ade3660046155f8565b613504565b61050c610af13660046153ec565b61368d565b6104d7610b043660046153cf565b61369d565b6104d7610b17366004615506565b613710565b61050c610b2a36600461565c565b613ac1565b60045461050c906001600160a01b031681565b6018546104a29060ff1681565b6104d7610b5d36600461565c565b613af9565b6015546104a290600160a81b900460ff1681565b6104d760065481565b6104d7610b8d366004615506565b613c84565b6104d7610ba0366004615284565b613ca1565b60015461050c906001600160a01b031681565b6001600160a01b0382166000908152600a602052604081205460ff16610bf95760405162461bcd60e51b8152600401610bf090615848565b60405180910390fd5b6015546001600160a01b0316331480610c155750610c15614124565b610c315760405162461bcd60e51b8152600401610bf090615890565b610c39614124565b80610c4657506001821515145b610c625760405162461bcd60e51b8152600401610bf0906158d7565b6001600160a01b038316600081815260176020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b6000546001600160a01b031633148015610d645750806001600160a01b0316632f1069ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d649190615907565b80610e495750806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcc9190615924565b6001600160a01b0316336001600160a01b0316148015610e495750806001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190615907565b610ea55760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b6064820152608401610bf0565b6000816001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b9190615941565b90508015610f535760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610bf0565b816001600160a01b0316635d72de626040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f8e57600080fd5b505af1158015610fa2573d6000803e3d6000fd5b505050505050565b6000805b90505b949350505050565b6001600160a01b0384166000908152600a602052604081205460ff16610fe35760095b9050610fb1565b610fed8584614178565b6000610fae565b6015546000906001600160a01b03163314806110135750611013614124565b61102f5760405162461bcd60e51b8152600401610bf090615890565b611037614124565b8061104457506001821515145b6110605760405162461bcd60e51b8152600401610bf0906158d7565b60158054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906110cb9084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b60006110e1614124565b6110f157610ce76001600761421b565b6040805160208082018352848252825190810190925266b1a2bc2ec5000080835281519192911161112857610fb16005600861421b565b6040805160208101909152670c7d713b49da00008082528351111561115c576111536005600861421b565b95945050505050565b600680549086905560408051828152602081018890527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9695505050505050565b6060600d80548060200260200160405190810160405280929190818152602001828054801561120357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111e5575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020018280548015611203576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111e5575050505050905090565b6001546001600160a01b031633146112d65760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b6064820152608401610bf0565b601880546001600160a01b03838116610100818102610100600160a81b031985161790945560408051949093049091168084526020840191909152917feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b0382166000908152600a602052604081205460ff166113795760405162461bcd60e51b8152600401610bf090615848565b6015546001600160a01b03163314806113955750611395614124565b6113b15760405162461bcd60e51b8152600401610bf090615890565b6113b9614124565b806113c657506001821515145b6113e25760405162461bcd60e51b8152600401610bf0906158d7565b6001600160a01b038316600081815260166020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a001610cdc565b610fa2565b6000806000806000806114788a8a8a8a614294565b9250925092508260158111156114905761149061595a565b95509093509150505b9450945094915050565b6001600160a01b03831660009081526016602052604081205460ff16156114fd5760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b6044820152606401610bf0565b6001600160a01b0384166000908152600a602052604090205460ff166115275760095b905061186f565b60115460ff16801561155257506001600160a01b03831660009081526012602052604090205460ff16155b1561155e576012611520565b6001600160a01b0384166000908152601a6020526040902054801561185e576000856001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e19190615941565b90506000866001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190615941565b90506000876001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad9190615941565b90506000886001600160a01b031663dc028ab16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117139190615941565b90506000896001600160a01b03166361feacff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117799190615941565b905060008061179b878761179661179089896145c5565b876145c5565b6145fb565b909250905060008260038111156117b4576117b461595a565b146117ca57600b9850505050505050505061186f565b60006117d6828c61464d565b909350905060008360038111156117ef576117ef61595a565b1461180657600b995050505050505050505061186f565b8881106118555760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c79206361702072656163686564000000000000006044820152606401610bf0565b50505050505050505b6118688585614680565b60005b9150505b9392505050565b6000611880614124565b61189057610ce76001600d61421b565b60408051602080820183528482528251908101909252670de0b6b3a7640000808352815191929110156118c957610fb16007600e61421b565b60408051602081019091526714d1120d7b160000808252835111156118f4576111536007600e61421b565b600780549086905560408051828152602081018890527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec13169101611196565b6001546001600160a01b031633148061195a575060185461010090046001600160a01b031633145b6119c45760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420737570706c79206361707360581b6064820152608401610bf0565b828181158015906119d457508082145b611a105760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610bf0565b60005b82811015611b0c57848482818110611a2d57611a2d615970565b90506020020135601a6000898985818110611a4a57611a4a615970565b9050602002016020810190611a5f9190615284565b6001600160a01b03168152602081019190915260400160002055868682818110611a8b57611a8b615970565b9050602002016020810190611aa09190615284565b6001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f8868684818110611adc57611adc615970565b90506020020135604051611af291815260200190565b60405180910390a280611b048161599c565b915050611a13565b50505050505050565b80158015611b235750600082115b15611b645760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610bf0565b50505050565b600b8181548110611b7a57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000611b9e614124565b611bae57610ce76001601361421b565b600580546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e2291015b60405180910390a160009392505050565b6003546001600160a01b03163314611c8a5760405162461bcd60e51b815260206004820152603260248201527f6f6e6c7920696d706c656d656e746174696f6e206d61792063616c6c205f626560448201527131b7b6b2a4b6b83632b6b2b73a30ba34b7b760711b6064820152608401610bf0565b601c54610100900460ff16611ca957601c805461ffff19166101011790555b565b600080600080600080611cc2876000806000614294565b925092509250826015811115611cda57611cda61595a565b97919650945092505050565b6000611cf0614124565b611d0057610ce76001601861421b565b601580546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e9101611c04565b6001600160a01b0385166000908152600a602052604081205460ff161580611d9b57506001600160a01b0385166000908152600a602052604090205460ff16155b15611daa5760095b9050611153565b6040516395dd919360e01b81526001600160a01b038481166004830152600091908816906395dd919390602401602060405180830381865afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e189190615941565b9050611e2387612781565b15611e8e5782811015611e895760405162461bcd60e51b815260206004820152602860248201527f43616e206e6f74207265706179206d6f7265207468616e2074686520746f74616044820152676c20626f72726f7760c01b6064820152608401610bf0565b611f1a565b600080611e9a86614722565b91935090915060009050826015811115611eb657611eb661595a565b14611ed757816015811115611ecd57611ecd61595a565b9350505050611153565b80611ee3576003611ecd565b6000611eff604051806020016040528060065481525085614742565b905080861115611f16576011945050505050611153565b5050505b5060009695505050505050565b6001546001600160a01b0316331480611f4f575060185461010090046001600160a01b031633145b611fb95760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b6064820152608401610bf0565b82818115801590611fc957508082145b6120055760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610bf0565b60005b82811015611b0c5784848281811061202257612022615970565b905060200201356019600089898581811061203f5761203f615970565b90506020020160208101906120549190615284565b6001600160a01b0316815260208101919091526040016000205586868281811061208057612080615970565b90506020020160208101906120959190615284565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f68686848181106120d1576120d1615970565b905060200201356040516120e791815260200190565b60405180910390a2806120f98161599c565b915050612008565b336000908152600a602052604090205460ff166121865760405162461bcd60e51b815260206004820152603b60248201527f436f6d7074726f6c6c65723a5f61667465724e6f6e5265656e7472616e743a2060448201527f63616c6c6572206e6f74206c6973746564206173206d61726b657400000000006064820152608401610bf0565b601c805460ff19166001179055565b611b64565b600d8181548110611b7a57600080fd5b600080546040805163fdb25fb160e01b8152905183926001600160a01b03169163fdb25fb19160048083019260209291908290030181865afa1580156121f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122189190615941565b905080156122fb5760055460405163fc57d4df60e01b81526001600160a01b038681166004830152600092169063fc57d4df90602401602060405180830381865afa15801561226b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228f9190615941565b9050806122a157600d92505050610ce7565b6000806122bc6040518060200160405280858152508761475a565b909250905060008260038111156122d5576122d561595a565b146122e857600b5b945050505050610ce7565b838110156122f75760136122dd565b5050505b6000949350505050565b600061230f614124565b61231f57610ce76001601961421b565b6001600160a01b0382166000908152600a602052604090205460ff1661234b57610ce76009601a61421b565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561238b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123af9190615941565b11156123c157610ce76015601b61421b565b6001600160a01b0382166000908152600a60209081526040808320805460ff19168155600101839055600b8054825181850281018501909352808352919290919083018282801561243b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161241d575b5050835193945083925060009150505b828110156124a057856001600160a01b031684828151811061246f5761246f615970565b60200260200101516001600160a01b0316141561248e578091506124a0565b806124988161599c565b91505061244b565b508181106124b0576124b06159b7565b600b80546124c0906001906159cd565b815481106124d0576124d0615970565b600091825260209091200154600b80546001600160a01b0390921691839081106124fc576124fc615970565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600b80548061253b5761253b6159e4565b6001900381819060005260206000200160006101000a8154906001600160a01b0302191690559055600060106000876001600160a01b031663ac784ddc6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156125a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cd9190615907565b61263857876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561260f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126339190615924565b61263b565b60005b6001600160a01b039081168252602080830193909352604091820160002080546001600160a01b031916948216949094179093555191871682527f302feb03efd5741df80efe7f97f5d93d74d46a542a3d312d0faae64fa1f3e0e9910160405180910390a16000611153565b6015546000906001600160a01b03163314806126c657506126c6614124565b6126e25760405162461bcd60e51b8152600401610bf090615890565b6126ea614124565b806126f757506001821515145b6127135760405162461bcd60e51b8152600401610bf0906158d7565b60158054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906110cb9084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b6001600160a01b0381166000908152600a60205260408120600101541580156127c757506001600160a01b03821660009081526017602052604090205460ff1615156001145b8015610ce757506128db61289d836001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa158015612812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128369190615941565b846001600160a01b0316638d02d9a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128989190615941565b6145c5565b836001600160a01b031663dbfe7c196040518163ffffffff1660e01b8152600401602060405180830381865afa158015612874573d6000803e3d6000fd5b670de0b6b3a76400001492915050565b60006128f5614124565b61290557610ce76001601461421b565b60115460ff161515821515141561291d576000610ce7565b6011805460ff19168315159081179091556040519081527f84c7d948374a180eddab35d27d2f7a94167a1ff4e79467f1e89c061984190a1e906020015b60405180910390a16000610ce7565b6000612973614124565b61298357610fdc6001601761421b565b60028054600160a01b60ff60a01b19821681179092550460ff16600086612a1e57600054604051638754e4fd60e01b81526001600160a01b0390911690638754e4fd906129d690899089906004016159fa565b6020604051808303816000875af11580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a199190615924565b612a93565b600054604051639b86a9b560e01b81526001600160a01b0390911690639b86a9b590612a5090899089906004016159fa565b6020604051808303816000875af1158015612a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a939190615924565b6002805460ff60a01b1916600160a01b8515150217905590506000612ab7826147ac565b90508015612ac55780612acf565b612acf8286613af9565b98975050505050505050565b6001600160a01b0381166000908152600960209081526040808320805482518185028101850190935280835260609493830182828015612b4457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612b26575b5093979650505050505050565b6060600b805480602002602001604051908101604052809291908181526020018280548015611203576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111e5575050505050905090565b6000612bbb614124565b612bcb57610ce76001600261421b565b816001600160a01b031663abc6d72d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2d9190615907565b612c795760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610bf0565b60005b601b54811015612d2457601b8181548110612c9957612c99615970565b6000918252602090912001546001600160a01b0384811691161415612d125760405162461bcd60e51b815260206004820152602960248201527f526577617264734469737472696275746f7220636f6e747261637420616c726560448201526818591e48185919195960ba1b6064820152608401610bf0565b80612d1c8161599c565b915050612c7c565b50601b80546001810182556000919091527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10180546001600160a01b0319166001600160a01b0384169081179091556040519081527f98ef1187fb6fd2bc85f8996489877eb2b5428f9e9bdfc068c9ad6c2ea82eacc79060200161295a565b601554600090600160b01b900460ff1615612df55760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b6044820152606401610bf0565b6000612e02868685614b42565b90508015612e11579050610fb1565b612e1c868686614bfa565b60009695505050505050565b805160609060008167ffffffffffffffff811115612e4857612e48615741565b604051908082528060200260200182016040528015612e71578160200160208202803683370190505b50905060005b82811015612ee8576000858281518110612e9357612e93615970565b60200260200101519050612ea78133614ca5565b6015811115612eb857612eb861595a565b838381518110612eca57612eca615970565b60209081029190910101525080612ee08161599c565b915050612e77565b509392505050565b60055460405163fc57d4df60e01b81526001600160a01b038581166004830152600092839283929091169063fc57d4df90602401602060405180830381865afa158015612f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f659190615941565b60055460405163fc57d4df60e01b81526001600160a01b0388811660048301529293506000929091169063fc57d4df90602401602060405180830381865afa158015612fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd99190615941565b9050811580612fe6575080155b15612ffa57600d6000935093505050613102565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561303a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305e9190615941565b905060006130786040518060200160405280600081525090565b6040805160208082018352600080835283518083018552908152835180830185526007548152845192830190945288825291926130b491614e40565b92506130dc604051806020016040528088815250604051806020016040528088815250614e40565b91506130e88383614e88565b90506130f4818b614742565b600099509750505050505050505b935093915050565b601b8181548110611b7a57600080fd5b6000613124614124565b61313457610fdc6001601561421b565b60005b848110156133b957600086868381811061315357613153615970565b90506020020160208101906131689190615284565b905084848381811061317c5761317c615970565b905060200201602081019061319191906153cf565b15613249576001600160a01b03811660009081526012602052604090205460ff16613244576001600160a01b0381166000818152601260205260408120805460ff19166001908117909155601380548083018255928190527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09090920180546001600160a01b0319169093179092555461322a91906159cd565b6001600160a01b0382166000908152601460205260409020555b6133a6565b6001600160a01b03811660009081526012602052604090205460ff16156133a6576013805461327a906001906159cd565b8154811061328a5761328a615970565b60009182526020808320909101546001600160a01b03848116845260149092526040909220546013805492909316929181106132c8576132c8615970565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506013805480613307576133076159e4565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03831682526014908190526040822054601380549193918490811061335b5761335b615970565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822094909455918416825260148352808220829055601290925220805460ff191690555b50806133b18161599c565b915050613137565b506000610fae565b336000908152600a602052604090205460ff166134465760405162461bcd60e51b815260206004820152603c60248201527f436f6d7074726f6c6c65723a5f6265666f72654e6f6e5265656e7472616e743a60448201527f2063616c6c6572206e6f74206c6973746564206173206d61726b6574000000006064820152608401610bf0565b601c5460ff166134985760405162461bcd60e51b815260206004820152601860248201527f72652d656e7465726564206163726f73732061737365747300000000000000006044820152606401610bf0565b601c805460ff19169055565b60606013805480602002602001604051908101604052809291908181526020018280548015611203576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116111e5575050505050905090565b601554600090600160b81b900460ff16156135535760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b6044820152606401610bf0565b6001600160a01b0386166000908152600a602052604090205460ff16158061359457506001600160a01b0385166000908152600a602052604090205460ff16155b156135a0576009611da3565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136029190615924565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366d9190615924565b6001600160a01b031614613682576002611da3565b612e1c868486614bfa565b60138181548110611b7a57600080fd5b60006136a7614124565b6136b757610ce76001600661421b565b60185460ff16151582151514156136cf576000610ce7565b6018805460ff19168315159081179091556040519081527faa40ee94af55250363b91641a0a615c47690148901505f89b01dafae03fff2819060200161295a565b6001600160a01b03831660009081526017602052604081205460ff161561376c5760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b6044820152606401610bf0565b6001600160a01b0384166000908152600a602052604090205460ff16613793576009611520565b6001600160a01b038085166000908152600a60209081526040808320938716835260029093019052205460ff1661389057336001600160a01b038516146138145760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b6044820152606401610bf0565b60006138203385614ca5565b905060008160158111156138365761383661595a565b146138555780601581111561384d5761384d61595a565b91505061186f565b6001600160a01b038086166000908152600a60209081526040808320938816835260029093019052205460ff1661388e5761388e6159b7565b505b60055460405163fc57d4df60e01b81526001600160a01b0386811660048301529091169063fc57d4df90602401602060405180830381865afa1580156138da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138fe9190615941565b61390957600d611520565b60115460ff16801561393457506001600160a01b03831660009081526012602052604090205460ff16155b15613940576012611520565b6001600160a01b0384166000908152601960205260409020548015613a50576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561399f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c39190615941565b90506000806139d2838761464d565b909250905060008260038111156139eb576139eb61595a565b146139fd57600b94505050505061186f565b838110613a4c5760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610bf0565b5050505b613a5a8585614178565b600080613a6a8688600088614294565b91935090915060009050826015811115613a8657613a8661595a565b14613aa757816015811115613a9d57613a9d61595a565b935050505061186f565b8015613ab4576004613a9d565b6000979650505050505050565b60096020528160005260406000208181548110613add57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000613b03614124565b613b1a57613b136001600961421b565b9050610ce7565b6001600160a01b0383166000908152600a60205260409020805460ff16613b4f57613b476009600a61421b565b915050610ce7565b60408051602080820183528582528251908101909252670c7d713b49da0000825290613b7d81835190511090565b15613b9857613b8e6006600b61421b565b9350505050610ce7565b8415801590613c12575060055460405163fc57d4df60e01b81526001600160a01b0388811660048301529091169063fc57d4df90602401602060405180830381865afa158015613bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c109190615941565b155b15613c2357613b8e600d600c61421b565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b600080613c92858585614b42565b9050801561185e57905061186f565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa158015613cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d149190615a29565b5092509250925082600014613d795760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b6064820152608401610bf0565b8015613d8b576111a1600c600361421b565b6000613d98873385614b42565b90508015613db857613dad600e600483614ec2565b979650505050505050565b6001600160a01b0385166000908152600a60209081526040808320338452600281019092529091205460ff16613df657600098975050505050505050565b3360009081526002820160209081526040808320805460ff191690556009825280832080548251818502810185019093528083529192909190830182828015613e6857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613e4a575b5050835193945083925060009150505b82811015613ecd57896001600160a01b0316848281518110613e9c57613e9c615970565b60200260200101516001600160a01b03161415613ebb57809150613ecd565b80613ec58161599c565b915050613e78565b50818110613edd57613edd6159b7565b33600090815260096020526040902080548190613efc906001906159cd565b81548110613f0c57613f0c615970565b9060005260206000200160009054906101000a90046001600160a01b0316818381548110613f3c57613f3c615970565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080805480613f7a57613f7a6159e4565b600082815260209020810160001990810180546001600160a01b031916905501905580546140d157600d8054613fb2906001906159cd565b81548110613fc257613fc2615970565b6000918252602080832090910154338352600e909152604090912054600d80546001600160a01b03909316929091908110613fff57613fff615970565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600d80548061403e5761403e6159e4565b60008281526020808220830160001990810180546001600160a01b0319169055909201909255338252600e908190526040822054600d80549193918490811061408957614089615970565b60009182526020808320909101546001600160a01b03168352828101939093526040918201812093909355338352600e8252808320839055600c9091529020805460ff191690555b604080516001600160a01b038c1681523360208201527fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d910160405180910390a160009c9b505050505050505050505050565b6001546000906001600160a01b03163314801561414a5750600254600160a81b900460ff165b8061417357506000546001600160a01b0316331480156141735750600254600160a01b900460ff165b905090565b60005b601b548110156107c157601b818154811061419857614198615970565b600091825260209091200154604051631cdc2c5d60e31b81526001600160a01b03858116600483015284811660248301529091169063e6e162e890604401600060405180830381600087803b1580156141f057600080fd5b505af1158015614204573d6000803e3d6000fd5b5050505080806142139061599c565b91505061417b565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360158111156142505761425061595a565b83601b8111156142625761426261595a565b60408051928352602083019190915260009082015260600160405180910390a182601581111561186f5761186f61595a565b60008060006142a16151ba565b6001600160a01b03881660009081526009602090815260408083208054825181850281018501909352808352849383018282801561430857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116142ea575b5050505050905060005b815181101561456f57600082828151811061432f5761432f615970565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015614384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a89190615a29565b608089015260608801526040870152935083156143d457600f6000809750975097505050505050611499565b60408051602080820183526001600160a01b038481166000818152600a845285902060010154845260c08a0193909352835191820184526080890151825260e0890191909152600554925163fc57d4df60e01b81526004810192909252919091169063fc57d4df90602401602060405180830381865afa15801561445c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144809190615941565b60a086018190526144a057600d6000809750975097505050505050611499565b604080516020810190915260a0860151815261010086015260c085015160e08601516144da916144cf91614e40565b866101000151614e40565b6101208601819052604086015186516144f4929190614f3a565b855261010085015160608601516020870151614511929190614f3a565b60208601526001600160a01b03818116908c16141561455c5761453e8561012001518b8760200151614f3a565b60208601819052610100860151614556918b90614f3a565b60208601525b50806145678161599c565b915050614312565b506020830151835111156145a05760208301518351600091614590916159cd565b6000955095509550505050611499565b600080846000015185602001516145b791906159cd565b955095509550505050611499565b600061186f8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250614f5b565b60008060008061460b878761464d565b909250905060008260038111156146245761462461595a565b146146355750915060009050613102565b61463f8186614f95565b935093505050935093915050565b6000808061465b8486615a5f565b905084811061466f57600092509050614679565b6002600092509250505b9250929050565b60005b601b548110156107c157601b81815481106146a0576146a0615970565b60009182526020909120015460405162e48b0f60e51b81526001600160a01b038581166004830152848116602483015290911690631c9161e090604401600060405180830381600087803b1580156146f757600080fd5b505af115801561470b573d6000803e3d6000fd5b50505050808061471a9061599c565b915050614683565b6000806000614735846000806000614294565b9250925092509193909250565b60008061474f8484614fc0565b9050610fb181614fe8565b60008060008061476a8686615000565b909250905060008260038111156147835761478361595a565b146147945750915060009050614679565b600061479f82614fe8565b9350935050509250929050565b60006147b6614124565b6147c657610ce76001601761421b565b6001600160a01b0382166000908152600a602052604090205460ff16156147f357610ce7600a601661421b565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015614833573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148579190615907565b6148a35760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610bf0565b306001600160a01b0316826001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061490f9190615924565b6001600160a01b0316146149835760405162461bcd60e51b815260206004820152603560248201527f43616e6e6f7420737570706f72742061206d61726b657420776974682061206460448201527434b33332b932b73a1021b7b6b83a3937b63632b91760591b6064820152608401610bf0565b6000826001600160a01b031663ac784ddc6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156149c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149e99190615907565b614a5457826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015614a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a4f9190615924565b614a57565b60005b6001600160a01b038082166000908152601060205260409020549192501615614a865761186f600a601661421b565b6001600160a01b038381166000818152600a60209081526040808320805460ff191660019081178255808201859055600b805491820190557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319908116871790915595871684526010835292819020805490951684179094559251918252917fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f910160405180910390a16000610fb1565b6001600160a01b0383166000908152600a602052604081205460ff16614b69576009611520565b6001600160a01b038085166000908152600a60209081526040808320938716835260029093019052205460ff16614ba1576000611520565b600080614bb18587866000614294565b91935090915060009050826015811115614bcd57614bcd61595a565b14614bed57816015811115614be457614be461595a565b9250505061186f565b8015612e1c576004614be4565b60005b601b54811015611b6457601b8181548110614c1a57614c1a615970565b600091825260209091200154604051634e081c9560e01b81526001600160a01b0386811660048301528581166024830152848116604483015290911690634e081c9590606401600060405180830381600087803b158015614c7a57600080fd5b505af1158015614c8e573d6000803e3d6000fd5b505050508080614c9d9061599c565b915050614bfd565b6001600160a01b0382166000908152600a60205260408120805460ff16614cd0576009915050610ce7565b6001600160a01b038316600090815260028201602052604090205460ff16151560011415614d02576000915050610ce7565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600983528184208054918201815584528284200180546001600160a01b031916958a1695909517909455918152600c909152205460ff16614df357600d8054600180820183557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590910180546001600160a01b0319166001600160a01b0387169081179091556000908152600c60205260409020805460ff1916821790559054614dd991906159cd565b6001600160a01b0384166000908152600e60205260409020555b604080516001600160a01b038087168252851660208201527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a7640000614e758660000151866000015161507c565b614e7f9190615a77565b90529392505050565b6040805160208101909152600081526040518060200160405280614e7f614ebb8660000151670de0b6b3a764000061507c565b85516150be565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846015811115614ef757614ef761595a565b84601b811115614f0957614f0961595a565b604080519283526020830191909152810184905260600160405180910390a1836015811115610fb157610fb161595a565b600080614f478585614fc0565b905061186b614f5582614fe8565b846145c5565b600080614f688486615a5f565b90508285821015614f8c5760405162461bcd60e51b8152600401610bf09190615a99565b50949350505050565b600080838311614fb4576000614fab84866159cd565b91509150614679565b50600390506000614679565b6040805160208101909152600081526040518060200160405280614e7f85600001518561507c565b8051600090610ce790670de0b6b3a764000090615a77565b60006150186040518060200160405280600081525090565b6000806150298660000151866150f1565b909250905060008260038111156150425761504261595a565b1461506157506040805160208101909152600081529092509050614679565b60408051602081019091529081526000969095509350505050565b600061186f83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f7700000000000000000081525061513b565b600061186f83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b81525061518e565b6000808361510457506000905080614679565b60006151108486615aee565b90508361511d8683615a77565b1461513057600260009250925050614679565b600092509050614679565b6000831580615148575082155b156151555750600061186f565b60006151618486615aee565b90508361516e8683615a77565b148390614f8c5760405162461bcd60e51b8152600401610bf09190615a99565b600081836151af5760405162461bcd60e51b8152600401610bf09190615a99565b50610fb18385615a77565b6040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016152066040518060200160405280600081525090565b81526020016152216040518060200160405280600081525090565b815260200161523c6040518060200160405280600081525090565b81526020016152576040518060200160405280600081525090565b905290565b6001600160a01b038116811461527157600080fd5b50565b803561527f8161525c565b919050565b60006020828403121561529657600080fd5b813561186f8161525c565b801515811461527157600080fd5b600080604083850312156152c257600080fd5b82356152cd8161525c565b915060208301356152dd816152a1565b809150509250929050565b600080600080600060a0868803121561530057600080fd5b853561530b8161525c565b9450602086013561531b8161525c565b9350604086013561532b8161525c565b94979396509394606081013594506080013592915050565b6000806000806080858703121561535957600080fd5b84356153648161525c565b966020860135965060408601359560600135945092505050565b6000806000806080858703121561539457600080fd5b843561539f8161525c565b935060208501356153af8161525c565b925060408501356153bf8161525c565b9396929550929360600135925050565b6000602082840312156153e157600080fd5b813561186f816152a1565b6000602082840312156153fe57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156154465783516001600160a01b031683529284019291840191600101615421565b50909695505050505050565b6000806000806080858703121561546857600080fd5b84356154738161525c565b935060208501356154838161525c565b93969395505050506040820135916060013590565b60008060008060008060c087890312156154b157600080fd5b86356154bc8161525c565b955060208701356154cc8161525c565b945060408701356154dc8161525c565b935060608701356154ec8161525c565b9598949750929560808101359460a0909101359350915050565b60008060006060848603121561551b57600080fd5b83356155268161525c565b925060208401356155368161525c565b929592945050506040919091013590565b60008083601f84011261555957600080fd5b50813567ffffffffffffffff81111561557157600080fd5b6020830191508360208260051b850101111561467957600080fd5b600080600080604085870312156155a257600080fd5b843567ffffffffffffffff808211156155ba57600080fd5b6155c688838901615547565b909650945060208701359150808211156155df57600080fd5b506155ec87828801615547565b95989497509550505050565b600080600080600060a0868803121561561057600080fd5b853561561b8161525c565b9450602086013561562b8161525c565b9350604086013561563b8161525c565b9250606086013561564b8161525c565b949793965091946080013592915050565b6000806040838503121561566f57600080fd5b823561567a8161525c565b946020939093013593505050565b6000806040838503121561569b57600080fd5b82356156a68161525c565b915060208301356152dd8161525c565b600080600080606085870312156156cc57600080fd5b84356156d7816152a1565b9350602085013567ffffffffffffffff808211156156f457600080fd5b818701915087601f83011261570857600080fd5b81358181111561571757600080fd5b88602082850101111561572957600080fd5b95986020929092019750949560400135945092505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561576a57600080fd5b823567ffffffffffffffff8082111561578257600080fd5b818501915085601f83011261579657600080fd5b8135818111156157a8576157a8615741565b8060051b604051601f19603f830116810181811085821117156157cd576157cd615741565b6040529182528482019250838101850191888311156157eb57600080fd5b938501935b82851015612acf5761580185615274565b845293850193928501926157f0565b6020808252825182820181905260009190848201906040850190845b818110156154465783518352928401929184019160010161582c565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b6020808252601690820152756f6e6c792061646d696e2063616e20756e706175736560501b604082015260600190565b60006020828403121561591957600080fd5b815161186f816152a1565b60006020828403121561593657600080fd5b815161186f8161525c565b60006020828403121561595357600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156159b0576159b0615986565b5060010190565b634e487b7160e01b600052600160045260246000fd5b6000828210156159df576159df615986565b500390565b634e487b7160e01b600052603160045260246000fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60008060008060808587031215615a3f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60008219821115615a7257615a72615986565b500190565b600082615a9457634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b81811015615ac657858101830151858201604001528201615aaa565b81811115615ad8576000604083870101525b50601f01601f1916929092016040019392505050565b6000816000190483118215151615615b0857615b08615986565b50029056fea2646970667358221220acba1901cd4e2a1faa62867dc34a802d8615260c44ec18dc2391b338f79ca50564736f6c634300080b0033",
  "devdoc": {
    "author": "Compound",
    "details": "This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).",
    "kind": "dev",
    "methods": {
      "_addRewardsDistributor(address)": {
        "details": "Admin function to add a RewardsDistributor contract",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_afterNonReentrant()": {
        "details": "Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention. Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream."
      },
      "_beforeNonReentrant()": {
        "details": "Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention. Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream."
      },
      "_deployMarket(bool,bytes,uint256)": {
        "details": "Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor",
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_setBorrowCapGuardian(address)": {
        "params": {
          "newBorrowCapGuardian": "The address of the new Borrow Cap Guardian"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Admin function to set closeFactor",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Admin function to set per-market collateralFactor",
        "params": {
          "cToken": "The market to set the factor on",
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Admin function to set liquidationIncentive",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
        "params": {
          "cTokens": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.",
        "params": {
          "cTokens": "The addresses of the markets (tokens) to change the supply caps for",
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying."
        }
      },
      "_setPauseGuardian(address)": {
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_setPriceOracle(address)": {
        "details": "Admin function to set a new price oracle",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setWhitelistEnforcement(bool)": {
        "details": "Admin function to set a new whitelist enforcement boolean",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setWhitelistStatuses(address[],bool[])": {
        "details": "Admin function to set the whitelist `statuses` for `suppliers`",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_toggleAutoImplementations(bool)": {
        "params": {
          "enabled": "If the feature is to be enabled"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_unsupportMarket(address)": {
        "details": "Admin function unset isListed and collateralFactorMantissa and unadd support for the market",
        "params": {
          "cToken": "The address of the market (token) to unlist"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "cToken": "The market to verify the borrow against"
        },
        "returns": {
          "_0": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "borrowVerify(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset requested to borrow",
          "borrower": "The address borrowing the underlying",
          "cToken": "Asset whose underlying is being borrowed"
        }
      },
      "borrowWithinLimits(address,uint256)": {
        "params": {
          "accountBorrowsNew": "The user's new borrow balance of the underlying asset",
          "cToken": "Asset whose underlying is being borrowed"
        }
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The address of the account to check",
          "cToken": "The cToken to check"
        },
        "returns": {
          "_0": "True if the account is in the asset, otherwise false."
        }
      },
      "enterMarkets(address[])": {
        "params": {
          "cTokens": "The list of addresses of the cToken markets to be enabled"
        },
        "returns": {
          "_0": "Success indicator for whether each corresponding market was entered"
        }
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset,  or be providing neccessary collateral for an outstanding borrow.",
        "params": {
          "cTokenAddress": "The address of the asset to be removed"
        },
        "returns": {
          "_0": "Whether or not the account successfully exited the market"
        }
      },
      "getAccountLiquidity(address)": {
        "returns": {
          "_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
        }
      },
      "getAllBorrowers()": {
        "details": "The automatic getter may be used to access an individual borrower.",
        "returns": {
          "_0": "The list of borrower account addresses"
        }
      },
      "getAllMarkets()": {
        "details": "The automatic getter may be used to access an individual market.",
        "returns": {
          "_0": "The list of market addresses"
        }
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The address of the account to pull assets for"
        },
        "returns": {
          "_0": "A dynamic list with the assets the account has entered"
        }
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "params": {
          "account": "The account to determine liquidity for",
          "borrowAmount": "The amount of underlying to hypothetically borrow",
          "cTokenModify": "The market to hypothetically redeem/borrow in",
          "redeemTokens": "The number of tokens to hypothetically redeem"
        },
        "returns": {
          "_0": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)"
        }
      },
      "getWhitelist()": {
        "details": "The automatic getter may be used to access an individual whitelist status.",
        "returns": {
          "_0": "The list of borrower account addresses"
        }
      },
      "isDeprecated(address)": {
        "details": "All borrows in a deprecated cToken market can be immediately liquidated",
        "params": {
          "cToken": "The market to check if deprecated"
        }
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid"
        }
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral"
        }
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "details": "Used in liquidation (called in cToken.liquidateBorrowFresh)",
        "params": {
          "actualRepayAmount": "The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens",
          "cTokenBorrowed": "The address of the borrowed cToken",
          "cTokenCollateral": "The address of the collateral cToken"
        },
        "returns": {
          "_0": "(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)"
        }
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the mint against",
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens"
        },
        "returns": {
          "_0": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "mintVerify(address,address,uint256,uint256)": {
        "params": {
          "actualMintAmount": "The amount of the underlying asset being minted",
          "cToken": "Asset being minted",
          "mintTokens": "The number of tokens being minted",
          "minter": "The address minting the tokens"
        }
      },
      "mintWithinLimits(address,uint256,uint256,uint256)": {
        "params": {
          "accountTokens": "Underlying amount to mint",
          "cToken": "Asset whose underlying is being borrowed",
          "exchangeRateMantissa": "Underlying/cToken exchange rate"
        }
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the redeem against",
          "redeemTokens": "The number of cTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens"
        },
        "returns": {
          "_0": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "cToken": "Asset being redeemed",
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which would borrowed the asset",
          "cToken": "The market to verify the repay against",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay"
        },
        "returns": {
          "_0": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "cToken": "Asset being repaid",
          "payer": "The address repaying the borrow"
        }
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the transfer against",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        },
        "returns": {
          "_0": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "transferVerify(address,address,address,uint256)": {
        "params": {
          "cToken": "Asset being transferred",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        }
      }
    },
    "title": "Compound's Comptroller Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ActionPaused(address,string,bool)": {
        "notice": "Emitted when an action is paused on a market"
      },
      "ActionPaused(string,bool)": {
        "notice": "Emitted when an action is paused globally"
      },
      "AddedRewardsDistributor(address)": {
        "notice": "Emitted when a new RewardsDistributor contract is added to hooks"
      },
      "AutoImplementationsToggled(bool)": {
        "notice": "Emitted when auto implementations are toggled"
      },
      "MarketEntered(address,address)": {
        "notice": "Emitted when an account enters a market"
      },
      "MarketExited(address,address)": {
        "notice": "Emitted when an account exits a market"
      },
      "MarketListed(address)": {
        "notice": "Emitted when an admin supports a market"
      },
      "MarketUnlisted(address)": {
        "notice": "Emitted when an admin unsupports a market"
      },
      "NewBorrowCap(address,uint256)": {
        "notice": "Emitted when borrow cap for a cToken is changed"
      },
      "NewBorrowCapGuardian(address,address)": {
        "notice": "Emitted when borrow cap guardian is changed"
      },
      "NewCloseFactor(uint256,uint256)": {
        "notice": "Emitted when close factor is changed by admin"
      },
      "NewCollateralFactor(address,uint256,uint256)": {
        "notice": "Emitted when a collateral factor is changed by admin"
      },
      "NewLiquidationIncentive(uint256,uint256)": {
        "notice": "Emitted when liquidation incentive is changed by admin"
      },
      "NewPauseGuardian(address,address)": {
        "notice": "Emitted when pause guardian is changed"
      },
      "NewPriceOracle(address,address)": {
        "notice": "Emitted when price oracle is changed"
      },
      "NewSupplyCap(address,uint256)": {
        "notice": "Emitted when supply cap for a cToken is changed"
      },
      "WhitelistEnforcementChanged(bool)": {
        "notice": "Emitted when the whitelist enforcement is changed"
      }
    },
    "kind": "user",
    "methods": {
      "_addRewardsDistributor(address)": {
        "notice": "Add a RewardsDistributor contracts."
      },
      "_deployMarket(bool,bytes,uint256)": {
        "notice": "Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor"
      },
      "_setBorrowCapGuardian(address)": {
        "notice": "Admin function to change the Borrow Cap Guardian"
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert."
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_setWhitelistEnforcement(bool)": {
        "notice": "Sets the whitelist enforcement for the comptroller"
      },
      "_setWhitelistStatuses(address[],bool[])": {
        "notice": "Sets the whitelist `statuses` for `suppliers`"
      },
      "_toggleAutoImplementations(bool)": {
        "notice": "Toggles the auto-implementation feature"
      },
      "_unsupportMarket(address)": {
        "notice": "Removed a market from the markets mapping and sets it as unlisted"
      },
      "accountAssets(address,uint256)": {
        "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "adminHasRights()": {
        "notice": "Whether or not the admin has admin rights"
      },
      "allBorrowers(uint256)": {
        "notice": "A list of all borrowers who have entered markets"
      },
      "allMarkets(uint256)": {
        "notice": "A list of all markets"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "borrowCapGuardian()": {
        "notice": "The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market."
      },
      "borrowCaps(address)": {
        "notice": "Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing."
      },
      "borrowVerify(address,address,uint256)": {
        "notice": "Validates borrow and reverts on rejection. May emit logs."
      },
      "borrowWithinLimits(address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "cTokensByUnderlying(address)": {
        "notice": "All cTokens addresses mapped by their underlying token addresses"
      },
      "checkMembership(address,address)": {
        "notice": "Returns whether the given account is entered in the given asset"
      },
      "closeFactorMantissa()": {
        "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
      },
      "comptrollerImplementation()": {
        "notice": "Active brains of Unitroller"
      },
      "enforceWhitelist()": {
        "notice": "Whether or not the supplier whitelist is enforced"
      },
      "enterMarkets(address[])": {
        "notice": "Add assets to be included in account liquidity calculation"
      },
      "exitMarket(address)": {
        "notice": "Removes asset from sender's account liquidity calculation"
      },
      "fuseAdminHasRights()": {
        "notice": "Whether or not the Fuse admin has admin rights"
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getAllBorrowers()": {
        "notice": "Return all of the borrowers"
      },
      "getAllMarkets()": {
        "notice": "Return all of the markets"
      },
      "getAssetsIn(address)": {
        "notice": "Returns the assets an account has entered"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
      },
      "getRewardsDistributors()": {
        "notice": "Returns an array of all RewardsDistributors"
      },
      "getWhitelist()": {
        "notice": "Return all of the whitelist"
      },
      "isComptroller()": {
        "notice": "Indicator that this is a Comptroller contract (for inspection)"
      },
      "isDeprecated(address)": {
        "notice": "Returns true if the given cToken market has been deprecated"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "liquidationIncentiveMantissa()": {
        "notice": "Multiplier representing the discount on collateral that a liquidator receives"
      },
      "markets(address)": {
        "notice": "Official mapping of cTokens -> Market metadata"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "mintVerify(address,address,uint256,uint256)": {
        "notice": "Validates mint and reverts on rejection. May emit logs."
      },
      "mintWithinLimits(address,uint256,uint256,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "oracle()": {
        "notice": "Oracle which gives the price of any given asset"
      },
      "pauseGuardian()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market."
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "pendingComptrollerImplementation()": {
        "notice": "Pending brains of Unitroller"
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem and reverts on rejection. May emit logs."
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "notice": "Validates repayBorrow and reverts on rejection. May emit logs."
      },
      "rewardsDistributors(uint256)": {
        "notice": "RewardsDistributor contracts to notify of flywheel changes."
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the seizing of assets should be allowed to occur"
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "notice": "Validates seize and reverts on rejection. May emit logs."
      },
      "supplyCaps(address)": {
        "notice": "Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying."
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      },
      "transferVerify(address,address,address,uint256)": {
        "notice": "Validates transfer and reverts on rejection. May emit logs."
      },
      "whitelist(address)": {
        "notice": "Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)"
      },
      "whitelistArray(uint256)": {
        "notice": "An array of all whitelisted accounts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21313,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "fuseAdmin",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 21316,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 21319,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 21323,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "fuseAdminHasRights",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 21327,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "adminHasRights",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 21356,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 21359,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 21366,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "oracle",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(PriceOracle)28223"
      },
      {
        "astId": 21369,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 21372,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 21374,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "maxAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 21381,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "accountAssets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_contract(CToken)16433)dyn_storage)"
      },
      {
        "astId": 21399,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "markets",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Market)21393_storage)"
      },
      {
        "astId": 21404,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "allMarkets",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_contract(CToken)16433)dyn_storage"
      },
      {
        "astId": 21409,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "borrowers",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21413,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "allBorrowers",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21417,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "borrowerIndexes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21422,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "suppliers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21428,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "cTokensByUnderlying",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_contract(CToken)16433)"
      },
      {
        "astId": 21431,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "enforceWhitelist",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 21436,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "whitelist",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21440,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "whitelistArray",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21444,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "whitelistIndexes",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21447,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 21449,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 21451,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 21453,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 21455,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 21459,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21463,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21469,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "autoImplementation",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 21472,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "borrowCapGuardian",
        "offset": 1,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 21477,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21482,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "supplyCaps",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21486,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "rewardsDistributors",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21489,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "_notEntered",
        "offset": 0,
        "slot": "28",
        "type": "t_bool"
      },
      {
        "astId": 21492,
        "contract": "contracts/compound/Comptroller.sol:Comptroller",
        "label": "_notEnteredInitialized",
        "offset": 1,
        "slot": "28",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(CToken)16433)dyn_storage": {
        "base": "t_contract(CToken)16433",
        "encoding": "dynamic_array",
        "label": "contract CToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CToken)16433": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)28223": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(CToken)16433)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(CToken)16433)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(CToken)16433)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CToken)",
        "numberOfBytes": "32",
        "value": "t_contract(CToken)16433"
      },
      "t_mapping(t_address,t_struct(Market)21393_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV2Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)21393_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Market)21393_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV2Storage.Market",
        "members": [
          {
            "astId": 21386,
            "contract": "contracts/compound/Comptroller.sol:Comptroller",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 21388,
            "contract": "contracts/compound/Comptroller.sol:Comptroller",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21392,
            "contract": "contracts/compound/Comptroller.sol:Comptroller",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}